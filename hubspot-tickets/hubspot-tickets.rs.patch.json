[
  {
    "op": "add",
    "path": "/info/x-rust",
    "value": {
      "client": "// Authenticate via an API token.\nlet client = hubspot-tickets::Client::new(\"$TOKEN\");\n\n// - OR -\n\n// Authenticate with your token and host parsed from the environment variables:\n// `HUBSPOT_TICKETS_API_TOKEN`.\nlet client = hubspot_tickets::Client::new_from_env();",
      "install": "[dependencies]\nhubspot-tickets = \"0.1.0\""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets/get/x-rust",
    "value": {
      "example": "/// Retrieve tickets\n/// \n/// Retrieve a ticket by its ID (`ticketId`) or by a unique property (`idProperty`). You can specify what is returned using the `properties` query parameter.\n/// \n/// **Parameters:**\n/// \n/// - `after: Option<String>`: The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.\n/// - `archived: Option<bool>`: Whether to return only results that have been archived.\n/// - `associations: Option<Vec<String>>`: A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.\n/// - `limit: Option<i32>`: The maximum number of results to display per page.\n/// - `properties: Option<Vec<String>>`: A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.\n/// - `properties_with_history: Option<Vec<String>>`: A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.\nasync fn example_basic_get_crm_v_3_objects_tickets_get_page() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::CollectionResponseSimplePublicObjectWithAssociationsForwardPaging =\n        client\n            .basic()\n            .get_crm_v_3_objects_tickets_get_page(\n                Some(\"some-string\".to_string()),\n                Some(true),\n                Some(vec![\"some-string\".to_string()]),\n                Some(4 as i32),\n                Some(vec![\"some-string\".to_string()]),\n                Some(vec![\"some-string\".to_string()]),\n            )\n            .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/basic/struct.Basic.html#method.get_crm_v_3_objects_tickets_get_page"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets/post/x-rust",
    "value": {
      "example": "/// Create a ticket\n/// \n/// Create a single ticket. Include a `properties` object to define [property values](https://developers.hubspot.com/docs/guides/api/crm/properties) for the ticket, along with an `associations` array to define [associations](https://developers.hubspot.com/docs/guides/api/crm/associations/associations-v4) with other CRM records.\nasync fn example_basic_post_crm_v_3_objects_tickets_create() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::SimplePublicObject = client\n        .basic()\n        .post_crm_v_3_objects_tickets_create(&hubspot_tickets::types::SimplePublicObjectInputForCreate {\n            associations: vec![hubspot_tickets::types::PublicAssociationsForObject {\n                types: vec![hubspot_tickets::types::AssociationSpec {\n                    association_category: hubspot_tickets::types::AssociationCategory::UserDefined,\n                    association_type_id: 4 as i32,\n                }],\n                to: hubspot_tickets::types::PublicObjectId {\n                    id: \"some-string\".to_string(),\n                },\n            }],\n            object_write_trace_id: Some(\"some-string\".to_string()),\n            properties: std::collections::HashMap::from([(\n                \"some-key\".to_string(),\n                \"some-string\".to_string(),\n            )]),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/basic/struct.Basic.html#method.post_crm_v_3_objects_tickets_create"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1batch~1archive/post/x-rust",
    "value": {
      "example": "/// Archive a batch of tickets by ID\n/// \n/// Delete a batch of tickets by ID. Deleted tickets can be restored within 90 days of deletion. Learn more about [restoring records](https://knowledge.hubspot.com/records/restore-deleted-records).\nasync fn example_batch_post_crm_v_3_objects_tickets_archive_archive() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    client\n        .batch()\n        .post_crm_v_3_objects_tickets_archive_archive(\n            &hubspot_tickets::types::BatchInputSimplePublicObjectId {\n                inputs: vec![hubspot_tickets::types::SimplePublicObjectId {\n                    id: \"some-string\".to_string(),\n                }],\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/batch/struct.Batch.html#method.post_crm_v_3_objects_tickets_archive_archive"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1batch~1create/post/x-rust",
    "value": {
      "example": "/// Create a batch of tickets\n/// \n/// Create a batch of tickets. The `inputs` array can contain a `properties` object to define property values for the ticket, along with an `associations` array to define [associations](https://developers.hubspot.com/docs/guides/api/crm/associations/associations-v4) with other CRM records.\nasync fn example_batch_post_crm_v_3_objects_tickets_create_create() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::BatchResponseSimplePublicObject = client\n        .batch()\n        .post_crm_v_3_objects_tickets_create_create(\n            &hubspot_tickets::types::BatchInputSimplePublicObjectInputForCreate {\n                inputs: vec![hubspot_tickets::types::SimplePublicObjectInputForCreate {\n                    associations: vec![hubspot_tickets::types::PublicAssociationsForObject {\n                        types: vec![hubspot_tickets::types::AssociationSpec {\n                            association_category: hubspot_tickets::types::AssociationCategory::UserDefined,\n                            association_type_id: 4 as i32,\n                        }],\n                        to: hubspot_tickets::types::PublicObjectId {\n                            id: \"some-string\".to_string(),\n                        },\n                    }],\n                    object_write_trace_id: Some(\"some-string\".to_string()),\n                    properties: std::collections::HashMap::from([(\n                        \"some-key\".to_string(),\n                        \"some-string\".to_string(),\n                    )]),\n                }],\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/batch/struct.Batch.html#method.post_crm_v_3_objects_tickets_create_create"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1batch~1read/post/x-rust",
    "value": {
      "example": "/// Retrieve a batch of tickets\n/// \n/// Retrieve a batch of tickets by ID (`ticketId`) or unique property value (`idProperty`). \n/// \n/// **Parameters:**\n/// \n/// - `archived: Option<bool>`: Whether to return only results that have been archived.\nasync fn example_batch_post_crm_v_3_objects_tickets_read_read() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::BatchResponseSimplePublicObject = client\n        .batch()\n        .post_crm_v_3_objects_tickets_read_read(\n            Some(true),\n            &hubspot_tickets::types::BatchReadInputSimplePublicObjectId {\n                properties_with_history: vec![\"some-string\".to_string()],\n                id_property: Some(\"some-string\".to_string()),\n                inputs: vec![hubspot_tickets::types::SimplePublicObjectId {\n                    id: \"some-string\".to_string(),\n                }],\n                properties: vec![\"some-string\".to_string()],\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/batch/struct.Batch.html#method.post_crm_v_3_objects_tickets_read_read"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1batch~1update/post/x-rust",
    "value": {
      "example": "/// Update a batch of tickets\n/// \n/// Update a batch of tickets by ID (`ticketId`) or unique property value (`idProperty`). Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\nasync fn example_batch_post_crm_v_3_objects_tickets_update_update() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::BatchResponseSimplePublicObject = client\n        .batch()\n        .post_crm_v_3_objects_tickets_update_update(\n            &hubspot_tickets::types::BatchInputSimplePublicObjectBatchInput {\n                inputs: vec![hubspot_tickets::types::SimplePublicObjectBatchInput {\n                    id_property: Some(\"some-string\".to_string()),\n                    object_write_trace_id: Some(\"some-string\".to_string()),\n                    id: \"some-string\".to_string(),\n                    properties: std::collections::HashMap::from([(\n                        \"some-key\".to_string(),\n                        \"some-string\".to_string(),\n                    )]),\n                }],\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/batch/struct.Batch.html#method.post_crm_v_3_objects_tickets_update_update"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1batch~1upsert/post/x-rust",
    "value": {
      "example": "/// Create or update a batch of tickets by unique property values\n/// \n/// Create and update a batch of tickets by a unique property. Tickets that don't exist will be created, while existing tickets will be updated.\nasync fn example_batch_post_crm_v_3_objects_tickets_upsert_upsert() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::BatchResponseSimplePublicUpsertObject = client\n        .batch()\n        .post_crm_v_3_objects_tickets_upsert_upsert(\n            &hubspot_tickets::types::BatchInputSimplePublicObjectBatchInputUpsert {\n                inputs: vec![hubspot_tickets::types::SimplePublicObjectBatchInputUpsert {\n                    id_property: Some(\"some-string\".to_string()),\n                    object_write_trace_id: Some(\"some-string\".to_string()),\n                    id: \"some-string\".to_string(),\n                    properties: std::collections::HashMap::from([(\n                        \"some-key\".to_string(),\n                        \"some-string\".to_string(),\n                    )]),\n                }],\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/batch/struct.Batch.html#method.post_crm_v_3_objects_tickets_upsert_upsert"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1merge/post/x-rust",
    "value": {
      "example": "/// Merge two tickets with same type\n/// \n/// Merge two tickets, combining them into one ticket record.\nasync fn example_basic_post_crm_v_3_objects_tickets_merge_merge() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::SimplePublicObject = client\n        .basic()\n        .post_crm_v_3_objects_tickets_merge_merge(&hubspot_tickets::types::PublicMergeInput {\n            object_id_to_merge: \"some-string\".to_string(),\n            primary_object_id: \"some-string\".to_string(),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/basic/struct.Basic.html#method.post_crm_v_3_objects_tickets_merge_merge"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1search/post/x-rust",
    "value": {
      "example": "/// Search for tickets\n/// \n/// Search for tickets by filtering on properties, searching through associations, and sorting results. Learn more about [CRM search](https://developers.hubspot.com/docs/guides/api/crm/search#make-a-search-request).\nasync fn example_search_post_crm_v_3_objects_tickets_do() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::CollectionResponseWithTotalSimplePublicObjectForwardPaging = client\n        .search()\n        .post_crm_v_3_objects_tickets_do(&hubspot_tickets::types::PublicObjectSearchRequest {\n            query: Some(\"some-string\".to_string()),\n            limit: Some(4 as i32),\n            after: Some(\"some-string\".to_string()),\n            sorts: Some(vec![\"some-string\".to_string()]),\n            properties: Some(vec![\"some-string\".to_string()]),\n            filter_groups: Some(vec![hubspot_tickets::types::FilterGroup {\n                filters: vec![hubspot_tickets::types::Filter {\n                    high_value: Some(\"some-string\".to_string()),\n                    property_name: \"some-string\".to_string(),\n                    values: Some(vec![\"some-string\".to_string()]),\n                    value: Some(\"some-string\".to_string()),\n                    operator: hubspot_tickets::types::Operator::NotIn,\n                }],\n            }]),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/search/struct.Search.html#method.post_crm_v_3_objects_tickets_do"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1{ticketId}/delete/x-rust",
    "value": {
      "example": "/// Archive a ticket\n/// \n/// Archive a ticket, sending it to the recycling bin. Deleted tickets can be restored within 90 days of deletion. Learn more about [restoring records](https://knowledge.hubspot.com/records/restore-deleted-records).\n/// \n/// **Parameters:**\n/// \n/// - `ticket_id: &'astr`: The ID of the ticket to delete. (required)\nasync fn example_basic_delete_crm_v_3_objects_tickets_ticket_id_archive() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    client\n        .basic()\n        .delete_crm_v_3_objects_tickets_ticket_id_archive(\"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/basic/struct.Basic.html#method.delete_crm_v_3_objects_tickets_ticket_id_archive"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1{ticketId}/get/x-rust",
    "value": {
      "example": "/// Retrieve a ticket\n/// \n/// Retrieve a ticket by its ID (`ticketId`) or by a unique property (`idProperty`). You can specify what is returned using the `properties` query parameter.\n/// \n/// **Parameters:**\n/// \n/// - `archived: Option<bool>`: Whether to return only results that have been archived.\n/// - `associations: Option<Vec<String>>`: A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.\n/// - `id_property: Option<String>`: The name of a property whose values are unique for this object\n/// - `properties: Option<Vec<String>>`: A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.\n/// - `properties_with_history: Option<Vec<String>>`: A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.\n/// - `ticket_id: &'astr`: The ID of the ticket. (required)\nasync fn example_basic_get_crm_v_3_objects_tickets_ticket_id_get_by_id() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::SimplePublicObjectWithAssociations = client\n        .basic()\n        .get_crm_v_3_objects_tickets_ticket_id_get_by_id(\n            Some(true),\n            Some(vec![\"some-string\".to_string()]),\n            Some(\"some-string\".to_string()),\n            Some(vec![\"some-string\".to_string()]),\n            Some(vec![\"some-string\".to_string()]),\n            \"some-string\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/basic/struct.Basic.html#method.get_crm_v_3_objects_tickets_ticket_id_get_by_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1crm~1v3~1objects~1tickets~1{ticketId}/patch/x-rust",
    "value": {
      "example": "/// Update a ticket\n/// \n/// \n/// Update a ticket by ID (`ticketId`) or unique property value (`idProperty`). Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\n/// \n/// **Parameters:**\n/// \n/// - `id_property: Option<String>`: The name of a property whose values are unique for this object\n/// - `ticket_id: &'astr` (required)\nasync fn example_basic_patch_crm_v_3_objects_tickets_ticket_id_update() -> anyhow::Result<()> {\n    let client = hubspot_tickets::Client::new_from_env();\n    let result: hubspot_tickets::types::SimplePublicObject = client\n        .basic()\n        .patch_crm_v_3_objects_tickets_ticket_id_update(\n            Some(\"some-string\".to_string()),\n            \"some-string\",\n            &hubspot_tickets::types::SimplePublicObjectInput {\n                object_write_trace_id: Some(\"some-string\".to_string()),\n                properties: std::collections::HashMap::from([(\n                    \"some-key\".to_string(),\n                    \"some-string\".to_string(),\n                )]),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/hubspot-tickets/latest/hubspot-tickets/basic/struct.Basic.html#method.patch_crm_v_3_objects_tickets_ticket_id_update"
    }
  }
]