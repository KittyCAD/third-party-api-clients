[
  {
    "op": "add",
    "path": "/info/x-rust",
    "value": {
      "client": "// Authenticate via an API token.\nlet client = commonroom-api::Client::new(\"$TOKEN\");\n\n// - OR -\n\n// Authenticate with your token and host parsed from the environment variables:\n// `COMMONROOM_API_TOKEN`.\nlet client = commonroom_api::Client::new_from_env();",
      "install": "[dependencies]\ncommonroom-api = \"0.1.0\""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1Users/get/x-rust",
    "value": {
      "example": "/// Active community members by role\n/// \n/// Returns the list of active owners, filtered based on the query parameters\n/// \n/// **Parameters:**\n/// \n/// - `count: Option<i64>`\n/// - `filter: Option<String>`\n/// - `start_index: Option<i64>`\nasync fn example_scim_active_community_members_by_role() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: commonroom_api::types::ActiveCommunityMembersByRoleResponse = client\n        .scim()\n        .active_community_members_by_role(\n            Some(4 as i64),\n            Some(\"some-string\".to_string()),\n            Some(4 as i64),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/scim/struct.Scim.html#method.active_community_members_by_role"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1Users/post/x-rust",
    "value": {
      "example": "/// Creates the community member with specific role\n/// \n/// Creates the community member with owner role\n/// \n/// **Parameters:**\n/// \n/// - `count: Option<i64>`\n/// - `filter: Option<String>`\n/// - `start_index: Option<i64>`\nasync fn example_scim_create_community_member_with_specific_role() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: commonroom_api::types::User = client\n        .scim()\n        .create_community_member_with_specific_role(\n            Some(4 as i64),\n            Some(\"some-string\".to_string()),\n            Some(4 as i64),\n            &commonroom_api::types::CreateCommunityMemberWithSpecificRoleRequestBody {\n                schemas: Some(vec![\"some-string\".to_string()]),\n                user_name: Some(\"some-string\".to_string()),\n                name: Some(commonroom_api::types::Name {\n                    given_name: Some(\"some-string\".to_string()),\n                    family_name: Some(\"some-string\".to_string()),\n                }),\n                emails: Some(vec![\n                    commonroom_api::types::CreateCommunityMemberWithSpecificRoleRequestBodyEmails {\n                        value: Some(\"some-string\".to_string()),\n                        primary: Some(false),\n                        type_: Some(\"some-string\".to_string()),\n                    },\n                ]),\n                active: Some(true),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/scim/struct.Scim.html#method.create_community_member_with_specific_role"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1Users~1:email/get/x-rust",
    "value": {
      "example": "/// Retrieves a specific user account\n/// \n/// **Parameters:**\n/// \n/// - `email: &'astr` (required)\nasync fn example_scim_get_specific_user_account() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: commonroom_api::types::User = client\n        .scim()\n        .get_specific_user_account(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/scim/struct.Scim.html#method.get_specific_user_account"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1Users~1:email/patch/x-rust",
    "value": {
      "example": "/// Updates an user account\n/// \n/// Updates the user account specified in the query\n/// \n/// **Parameters:**\n/// \n/// - `email: &'astr` (required)\nasync fn example_scim_update_user_account() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: commonroom_api::types::User = client\n        .scim()\n        .update_user_account(\n            \"some-string\",\n            &commonroom_api::types::UpdateUserAccountRequestBody {\n                schemas: Some(vec![\"some-string\".to_string()]),\n                operations: Some(vec![commonroom_api::types::UpdateUserAccountRequestBodyOperations {\n                    op: Some(\"some-string\".to_string()),\n                    value: Some(commonroom_api::types::UpdateUserAccountRequestBodyOperationsValue {\n                        active: Some(false),\n                    }),\n                }]),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/scim/struct.Scim.html#method.update_user_account"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1activities/post/x-rust",
    "value": {
      "example": "/// Add an activity to existing community member(s)\n/// \n/// Add an activity to existing community member(s) with matching socials\n/// \nasync fn example_activities_create_user_input_activity() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    client\n        .activities()\n        .create_user_input_activity(&commonroom_api::types::CreateUserInputActivityRequestBody {\n            source: \"some-string\".to_string(),\n            social_type: \"some-string\".to_string(),\n            value: \"some-string\".to_string(),\n            activity_type: \"some-string\".to_string(),\n            activity_body: \"some-string\".to_string(),\n            occurred_at: Some(\"some-string\".to_string()),\n            tags: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/activities/struct.Activities.html#method.create_user_input_activity"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1activityTypes/get/x-rust",
    "value": {
      "example": "/// Get Activity Types\n/// \n/// Gets all activity types\n/// \nasync fn example_activities_get_activity_types() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: Vec<commonroom_api::types::GetActivityTypesResponse> =\n        client.activities().get_activity_types().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/activities/struct.Activities.html#method.get_activity_types"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-token-status/get/x-rust",
    "value": {
      "example": "/// API Token status information\n/// \n/// Status information about the API token used in the request.\n/// \nasync fn example_beta_api_token_status() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: commonroom_api::types::ApiToken = client.beta().api_token_status().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/beta/struct.Beta.html#method.api_token_status"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1members/get/x-rust",
    "value": {
      "example": "/// Get Community Member By E-Mail or Socials\n/// \n/// **Parameters:**\n/// \n/// - `email: Option<String>`\n/// - `github: Option<String>`\n/// - `linkedin: Option<String>`\n/// - `twitter: Option<String>`\nasync fn example_members_get_by_socials() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: Vec<commonroom_api::types::GetMemberBySocialsResponse> = client\n        .members()\n        .get_by_socials(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/members/struct.Members.html#method.get_by_socials"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1members~1/post/x-rust",
    "value": {
      "example": "/// Create or update Community Member\n/// \n/// Create or Update a Community Member\n/// \nasync fn example_members_create_or_update_community() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    client\n        .members()\n        .create_or_update_community(&commonroom_api::types::CreateOrUpdateCommunityMemberRequestBody {\n            source: \"some-string\".to_string(),\n            full_name: Some(\"some-string\".to_string()),\n            avatar_url: Some(\"some-string\".to_string()),\n            description: Some(\"some-string\".to_string()),\n            socials: Some(vec![\n                commonroom_api::types::CreateOrUpdateCommunityMemberRequestBodySocials::Email(\n                    commonroom_api::types::Email {\n                        type_: Some(commonroom_api::types::EmailType::Email),\n                        value: Some(\"some-string\".to_string()),\n                    },\n                ),\n            ]),\n            segment: Some(3.14 as f64),\n            company: Some(\"some-string\".to_string()),\n            domain: Some(\"some-string\".to_string()),\n            title: Some(\"some-string\".to_string()),\n            role: Some(\"some-string\".to_string()),\n            location: Some(commonroom_api::types::Location {\n                city: Some(\"some-string\".to_string()),\n                region: Some(\"some-string\".to_string()),\n                country: Some(\"some-string\".to_string()),\n            }),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/members/struct.Members.html#method.create_or_update_community"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1members~1customFields/get/x-rust",
    "value": {
      "example": "/// Gets all member custom fields for a community\n/// \n/// Gets all member custom fields for a community\n/// \nasync fn example_members_get_custom_fields() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: Vec<commonroom_api::types::GetMemberCustomFieldsResponse> =\n        client.members().get_custom_fields().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/members/struct.Members.html#method.get_custom_fields"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1members~1customFields/post/x-rust",
    "value": {
      "example": "/// Set an existing Custom Field for a Community Member\n/// \n/// Set an existing Custom Field for a Community Member\n/// \nasync fn example_members_set_custom_field_value() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    client\n        .members()\n        .set_custom_field_value(&commonroom_api::types::SetMemberCustomFieldValueRequestBody {\n            social_type: Some(\"some-string\".to_string()),\n            value: Some(\"some-string\".to_string()),\n            custom_field_id: Some(3.14 as f64),\n            custom_field_value: Some(commonroom_api::types::CustomFieldValue {\n                type_: Some(\"some-string\".to_string()),\n                value: Some(serde_json::Value::String(\"some-string\".to_string())),\n            }),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/members/struct.Members.html#method.set_custom_field_value"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1members~1note/post/x-rust",
    "value": {
      "example": "/// Add a Note to a Community Member\n/// \n/// Add a Note to a Community Member\n/// \nasync fn example_members_add_note_to() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    client\n        .members()\n        .add_note_to(&commonroom_api::types::AddNoteToMemberRequestBody {\n            social_type: Some(\"some-string\".to_string()),\n            value: Some(\"some-string\".to_string()),\n            note: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/members/struct.Members.html#method.add_note_to"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1members~1tags/post/x-rust",
    "value": {
      "example": "/// Adds a new or existing tag to a Community Member\n/// \n/// Adds a new or existing tag to a Community Member\n/// \nasync fn example_members_add_tags_to() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    client\n        .members()\n        .add_tags_to(&commonroom_api::types::AddTagsToMemberRequestBody {\n            social_type: Some(\"some-string\".to_string()),\n            value: Some(\"some-string\".to_string()),\n            tags: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/members/struct.Members.html#method.add_tags_to"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1segments/get/x-rust",
    "value": {
      "example": "/// Get segments in a community\n/// \n/// Gets all segments in a community\n/// \nasync fn example_segments_get() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: Vec<commonroom_api::types::GetSegmentsResponse> = client.segments().get().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/segments/struct.Segments.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1segments~1:id/post/x-rust",
    "value": {
      "example": "/// Add Community Member(s) to Segment\n/// \n/// Add existing community members to an existing segment\n/// \nasync fn example_segments_add_members_to() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    client\n        .segments()\n        .add_members_to(&commonroom_api::types::AddMembersToSegmentRequestBody {\n            social_type: \"some-string\".to_string(),\n            value: \"some-string\".to_string(),\n            status_id: Some(3.14 as f64),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/segments/struct.Segments.html#method.add_members_to"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1segments~1:id~1status/get/x-rust",
    "value": {
      "example": "/// Gets all status for a segment\n/// \n/// Gets all status for a segment\n/// \nasync fn example_segments_get_statuses() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: Vec<commonroom_api::types::GetSegmentStatusesResponse> =\n        client.segments().get_statuses().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/segments/struct.Segments.html#method.get_statuses"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1segments~1note/post/x-rust",
    "value": {
      "example": "/// Add a Note to a Segment\n/// \n/// Add a Note to a Segment\n/// \nasync fn example_segments_add_note_to() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    client\n        .segments()\n        .add_note_to(&commonroom_api::types::AddNoteToSegmentRequestBody {\n            segment_id: Some(3.14 as f64),\n            note: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/segments/struct.Segments.html#method.add_note_to"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1{email}/delete/x-rust",
    "value": {
      "example": "/// Anonymize Community Member\n/// \n/// Request removal of all personally identifiable information (PII) for the\n/// Community Member associated by this email address.\n/// \n/// This does not immediately anonymize the community member. The anonymization\n/// is queued and will happen at a future time within 15 days.\n/// \n/// \n/// **Parameters:**\n/// \n/// - `email: &'astr` (required)\nasync fn example_members_anonymize() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: String = client.members().anonymize(\"email@example.com\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/members/struct.Members.html#method.anonymize"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1{email}/get/x-rust",
    "value": {
      "example": "/// Get Community Member by E-Mail\n/// \n/// A Community Member's profile based on an email address.\n/// \n/// **Parameters:**\n/// \n/// - `email: &'astr` (required)\nasync fn example_members_get_by_email() -> anyhow::Result<()> {\n    let client = commonroom_api::Client::new_from_env();\n    let result: Vec<commonroom_api::types::CommunityMember> =\n        client.members().get_by_email(\"email@example.com\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/commonroom-api/latest/commonroom-api/members/struct.Members.html#method.get_by_email"
    }
  }
]