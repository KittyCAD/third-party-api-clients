[
  {
    "op": "add",
    "path": "/info/x-rust",
    "value": {
      "client": "// Authenticate.\nlet client = ramp-api::Client::new(\n     String::from(\"client-id\"),\n     String::from(\"client-secret\"),\n     String::from(\"redirect-uri\"),\n     String::from(\"token\"),\n     String::from(\"refresh-token\"),\n);\n\n// - OR -\n\n// Authenticate with your credentials parsed from the environment variables:\n// - `RAMP_CLIENT_ID`\n// - `let client = ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));_CLIENT_SECRET`\n// - `let client = ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));_REDIRECT_URI`\nlet client = ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));",
      "install": "[dependencies]\nramp-api = \"0.0.2\""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1business~1/get/x-rust",
    "value": {
      "example": "/// Fetch the company metadata associated with the OAuth2 access token\nasync fn example_business_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Business = client.business().get_resource().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/business/struct.Business.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1business~1balance/get/x-rust",
    "value": {
      "example": "/// Retrieve the current balance info of a business\nasync fn example_business_get_balance_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::BusinessBalance = client.business().get_balance_resource().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/business/struct.Business.html#method.get_balance_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1card-programs~1/get/x-rust",
    "value": {
      "example": "/// List all the card programs\n/// \n/// **Parameters:**\n/// \n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_card_program_get_list() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiCardProgramResourceSchema = client\n        .card_program()\n        .get_list(\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card_program/struct.CardProgram.html#method.get_list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1card-programs~1/post/x-rust",
    "value": {
      "example": "/// Create a new card program\nuse std::str::FromStr;\nasync fn example_card_program_post_list() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiCardProgramResource = client\n        .card_program()\n        .post_list(&ramp_api::types::ApiCardProgramCreate {\n            acting_user_id: 4 as i64,\n            business_id: 4 as i64,\n            is_default: false,\n            is_physical: false,\n            spending_restrictions: ramp_api::types::ApiCardSpendingRestrictionsLoad {\n                categories: Some(vec![4 as i64]),\n                amount: 3.14 as f64,\n                policy_id: Some(\"some-string\".to_string()),\n                vendor_whitelist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                categories_blacklist: Some(vec![4 as i64]),\n                card_accounting_rules: Some(vec![ramp_api::types::ApiCardAccountingRulesData {\n                    accounting_provider_access_uuid: Some(\"some-string\".to_string()),\n                    tracking_category_id: 4 as i64,\n                    tracking_category_option_id: 4 as i64,\n                    tracking_category_option_remote_name: \"some-string\".to_string(),\n                }]),\n                vendor_blacklist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                lock_date: Some(chrono::Utc::now()),\n                categories_whitelist: Some(vec![4 as i64]),\n                transaction_amount_limit: Some(3.14 as f64),\n                interval: ramp_api::types::Interval::Yearly,\n            },\n            policy_id: 4 as i64,\n            display_name: \"some-string\".to_string(),\n            description: \"some-string\".to_string(),\n            icon: Some(ramp_api::types::Icon::CardIcon),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card_program/struct.CardProgram.html#method.post_list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1card-programs~1{card_program_id}/get/x-rust",
    "value": {
      "example": "/// Retrieve the card program by ID\n/// \n/// **Parameters:**\n/// \n/// - `card_program_id: &'astr` (required)\nasync fn example_card_program_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiCardProgramResource =\n        client.card_program().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card_program/struct.CardProgram.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1/get/x-rust",
    "value": {
      "example": "/// Retrieve all cards\n/// \n/// **Parameters:**\n/// \n/// - `card_program_id: Option<uuid::Uuid>`: Filter by card program.\n/// - `is_activated: Option<bool>`: Filter only for activated cards. Defaults to True if not specified\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `user_id: Option<uuid::Uuid>`: Filter by card owner.\nuse std::str::FromStr;\nasync fn example_card_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiCardResourceSchema = client\n        .card()\n        .get_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1deferred~1physical/post/x-rust",
    "value": {
      "example": "/// Create a physical card\nuse std::str::FromStr;\nasync fn example_card_post_physical() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_physical(&ramp_api::types::ApiCardRequest {\n            fulfillment: Some(ramp_api::types::CardFulfillment {\n                shipping: Some(ramp_api::types::CardShipping {\n                    return_address: Some(ramp_api::types::CardShippingAddress {\n                        city: \"some-string\".to_string(),\n                        state: Some(\"some-string\".to_string()),\n                        phone: Some(\"some-string\".to_string()),\n                        address_2: Some(\"some-string\".to_string()),\n                        postal_code: \"some-string\".to_string(),\n                        country: \"some-string\".to_string(),\n                        last_name: \"some-string\".to_string(),\n                        address_1: \"some-string\".to_string(),\n                        first_name: \"some-string\".to_string(),\n                    }),\n                    method: Some(\"some-string\".to_string()),\n                    recipient_address: Some(ramp_api::types::CardShippingAddress {\n                        city: \"some-string\".to_string(),\n                        state: Some(\"some-string\".to_string()),\n                        phone: Some(\"some-string\".to_string()),\n                        address_2: Some(\"some-string\".to_string()),\n                        postal_code: \"some-string\".to_string(),\n                        country: \"some-string\".to_string(),\n                        last_name: \"some-string\".to_string(),\n                        address_1: \"some-string\".to_string(),\n                        first_name: \"some-string\".to_string(),\n                    }),\n                    recipient_address_verification_state: Some(\n                        ramp_api::types::RecipientAddressVerificationState::Verified,\n                    ),\n                }),\n                card_personalization: Some(ramp_api::types::CardPersonalization {\n                    text: Some(ramp_api::types::CardPersonalizationText {\n                        name_line_2: Some(ramp_api::types::CardPersonalizationNameLine {\n                            value: Some(\"some-string\".to_string()),\n                        }),\n                        name_line_1: Some(ramp_api::types::CardPersonalizationNameLine {\n                            value: Some(\"some-string\".to_string()),\n                        }),\n                    }),\n                }),\n            }),\n            user_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            card_program_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            idempotency_key: \"some-string\".to_string(),\n            is_physical: Some(false),\n            spending_restrictions: Some(ramp_api::types::ApiCardSpendingRestrictionsLoad {\n                categories: Some(vec![4 as i64]),\n                amount: 3.14 as f64,\n                policy_id: Some(\"some-string\".to_string()),\n                vendor_whitelist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                categories_blacklist: Some(vec![4 as i64]),\n                card_accounting_rules: Some(vec![ramp_api::types::ApiCardAccountingRulesData {\n                    accounting_provider_access_uuid: Some(\"some-string\".to_string()),\n                    tracking_category_id: 4 as i64,\n                    tracking_category_option_id: 4 as i64,\n                    tracking_category_option_remote_name: \"some-string\".to_string(),\n                }]),\n                vendor_blacklist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                lock_date: Some(chrono::Utc::now()),\n                categories_whitelist: Some(vec![4 as i64]),\n                transaction_amount_limit: Some(3.14 as f64),\n                interval: ramp_api::types::Interval::Annual,\n            }),\n            is_temporary: Some(false),\n            display_name: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_physical"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1deferred~1status~1{task_uuid}/get/x-rust",
    "value": {
      "example": "/// Gets the status of a deferred task for cards\n/// \n/// **Parameters:**\n/// \n/// - `task_uuid: &'astr` (required)\nasync fn example_card_get_deferred_task_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::CardDeferredTask = client\n        .card()\n        .get_deferred_task_resource(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.get_deferred_task_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1deferred~1virtual/post/x-rust",
    "value": {
      "example": "/// Create a virtual card\nuse std::str::FromStr;\nasync fn example_card_post_virtual() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_virtual(&ramp_api::types::ApiCardRequest {\n            fulfillment: Some(ramp_api::types::CardFulfillment {\n                shipping: Some(ramp_api::types::CardShipping {\n                    return_address: Some(ramp_api::types::CardShippingAddress {\n                        city: \"some-string\".to_string(),\n                        state: Some(\"some-string\".to_string()),\n                        phone: Some(\"some-string\".to_string()),\n                        address_2: Some(\"some-string\".to_string()),\n                        postal_code: \"some-string\".to_string(),\n                        country: \"some-string\".to_string(),\n                        last_name: \"some-string\".to_string(),\n                        address_1: \"some-string\".to_string(),\n                        first_name: \"some-string\".to_string(),\n                    }),\n                    method: Some(\"some-string\".to_string()),\n                    recipient_address: Some(ramp_api::types::CardShippingAddress {\n                        city: \"some-string\".to_string(),\n                        state: Some(\"some-string\".to_string()),\n                        phone: Some(\"some-string\".to_string()),\n                        address_2: Some(\"some-string\".to_string()),\n                        postal_code: \"some-string\".to_string(),\n                        country: \"some-string\".to_string(),\n                        last_name: \"some-string\".to_string(),\n                        address_1: \"some-string\".to_string(),\n                        first_name: \"some-string\".to_string(),\n                    }),\n                    recipient_address_verification_state: Some(\n                        ramp_api::types::RecipientAddressVerificationState::Overriden,\n                    ),\n                }),\n                card_personalization: Some(ramp_api::types::CardPersonalization {\n                    text: Some(ramp_api::types::CardPersonalizationText {\n                        name_line_2: Some(ramp_api::types::CardPersonalizationNameLine {\n                            value: Some(\"some-string\".to_string()),\n                        }),\n                        name_line_1: Some(ramp_api::types::CardPersonalizationNameLine {\n                            value: Some(\"some-string\".to_string()),\n                        }),\n                    }),\n                }),\n            }),\n            user_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            card_program_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            idempotency_key: \"some-string\".to_string(),\n            is_physical: Some(true),\n            spending_restrictions: Some(ramp_api::types::ApiCardSpendingRestrictionsLoad {\n                categories: Some(vec![4 as i64]),\n                amount: 3.14 as f64,\n                policy_id: Some(\"some-string\".to_string()),\n                vendor_whitelist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                categories_blacklist: Some(vec![4 as i64]),\n                card_accounting_rules: Some(vec![ramp_api::types::ApiCardAccountingRulesData {\n                    accounting_provider_access_uuid: Some(\"some-string\".to_string()),\n                    tracking_category_id: 4 as i64,\n                    tracking_category_option_id: 4 as i64,\n                    tracking_category_option_remote_name: \"some-string\".to_string(),\n                }]),\n                vendor_blacklist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                lock_date: Some(chrono::Utc::now()),\n                categories_whitelist: Some(vec![4 as i64]),\n                transaction_amount_limit: Some(3.14 as f64),\n                interval: ramp_api::types::Interval::Yearly,\n            }),\n            is_temporary: Some(true),\n            display_name: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_virtual"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a single card by ID\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nasync fn example_card_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Card = client.card().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}/patch/x-rust",
    "value": {
      "example": "/// Updates a card's spending restrictions\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nuse std::str::FromStr;\nasync fn example_card_patch_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .card()\n        .patch_resource(\n            \"some-string\",\n            &ramp_api::types::ApiCardUpdate {\n                card_program_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                display_name: Some(\"some-string\".to_string()),\n                has_notifications_enabled: Some(true),\n                spending_restrictions: Some(ramp_api::types::ApiCardSpendingRestrictionsUpdate {\n                    categories: Some(vec![4 as i64]),\n                    amount: Some(3.14 as f64),\n                    policy_id: Some(\"some-string\".to_string()),\n                    vendor_whitelist: Some(vec![uuid::Uuid::from_str(\n                        \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                    )?]),\n                    blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                    categories_blacklist: Some(vec![4 as i64]),\n                    card_accounting_rules: Some(vec![ramp_api::types::ApiCardAccountingRulesData {\n                        accounting_provider_access_uuid: Some(\"some-string\".to_string()),\n                        tracking_category_id: 4 as i64,\n                        tracking_category_option_id: 4 as i64,\n                        tracking_category_option_remote_name: \"some-string\".to_string(),\n                    }]),\n                    vendor_blacklist: Some(vec![uuid::Uuid::from_str(\n                        \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                    )?]),\n                    lock_date: Some(chrono::Utc::now()),\n                    categories_whitelist: Some(vec![4 as i64]),\n                    transaction_amount_limit: Some(3.14 as f64),\n                    interval: Some(ramp_api::types::Interval::Quarterly),\n                }),\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.patch_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}~1deferred~1suspension/post/x-rust",
    "value": {
      "example": "/// Create an async task to suspend a card so that it is locked from use\n/// \n/// The suspension is revertable.\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nasync fn example_card_post_suspension_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_suspension_resource(\n            \"some-string\",\n            &ramp_api::types::ApiCardDeferredUpdate {\n                idempotency_key: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_suspension_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}~1deferred~1termination/post/x-rust",
    "value": {
      "example": "/// Create an async task to terminate a card permanently\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nasync fn example_card_post_termination_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_termination_resource(\n            \"some-string\",\n            &ramp_api::types::ApiCardDeferredUpdate {\n                idempotency_key: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_termination_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}~1deferred~1unsuspension/post/x-rust",
    "value": {
      "example": "/// Create an async task to remove a card's suspension so that it may be used again\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nasync fn example_card_post_unsuspension_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_unsuspension_resource(\n            \"some-string\",\n            &ramp_api::types::ApiCardDeferredUpdate {\n                idempotency_key: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_unsuspension_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1custom-id-provider~1/get/x-rust",
    "value": {
      "example": "/// Get provider id associated with access token\nasync fn example_custom_id_provider_get_endpoint() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::CustomIdProvider = client.custom_id_provider().get_endpoint().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/custom_id_provider/struct.CustomIdProvider.html#method.get_endpoint"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1custom-id-provider~1/post/x-rust",
    "value": {
      "example": "/// Create custom id provider\nasync fn example_custom_id_provider_post_endpoint() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::CustomIdProvider =\n        client.custom_id_provider().post_endpoint().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/custom_id_provider/struct.CustomIdProvider.html#method.post_endpoint"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1custom-id-provider~1application-link/post/x-rust",
    "value": {
      "example": "/// Register an access token with custom id provider\nuse std::str::FromStr;\nasync fn example_custom_id_provider_post_token_endpoint() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .custom_id_provider()\n        .post_token_endpoint(&ramp_api::types::ApiCustomIdProviderTokenCreate {\n            custom_id_provider: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/custom_id_provider/struct.CustomIdProvider.html#method.post_token_endpoint"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1custom-id-provider~1{entity_type}~1custom-id-link/post/x-rust",
    "value": {
      "example": "/// Add custom id <-> ramp id mapping\n/// \n/// **Parameters:**\n/// \n/// - `entity_type: &'astr` (required)\nuse std::str::FromStr;\nasync fn example_custom_id_provider_post_create_custom_id_mapping() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .custom_id_provider()\n        .post_create_custom_id_mapping(\n            \"some-string\",\n            &ramp_api::types::ApiCustomIdMapping {\n                custom_id: ramp_api::types::ApiCustomIdMappingCustomId::U,\n                ramp_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/custom_id_provider/struct.CustomIdProvider.html#method.post_create_custom_id_mapping"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1custom-id-provider~1{entity_type}~1{custom_id}~1ramp-id/get/x-rust",
    "value": {
      "example": "/// Get ramp id from corresponding custom id\n/// \n/// **Parameters:**\n/// \n/// - `custom_id: &'astr` (required)\n/// - `entity_type: &'astr` (required)\nasync fn example_custom_id_provider_get_ramp_id_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::RampId = client\n        .custom_id_provider()\n        .get_ramp_id_resource(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/custom_id_provider/struct.CustomIdProvider.html#method.get_ramp_id_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1custom-id-provider~1{entity_type}~1{ramp_id}~1custom-id/get/x-rust",
    "value": {
      "example": "/// Get custom id from corresponding ramp id\n/// \n/// **Parameters:**\n/// \n/// - `entity_type: &'astr` (required)\n/// - `ramp_id: &'astr` (required)\nasync fn example_custom_id_provider_get_ramp_to_custom_id() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::CustomId = client\n        .custom_id_provider()\n        .get_ramp_to_custom_id(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/custom_id_provider/struct.CustomIdProvider.html#method.get_ramp_to_custom_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1departments~1/get/x-rust",
    "value": {
      "example": "/// Retrieve all departments\n/// \n/// **Parameters:**\n/// \n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_department_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiDepartmentResourceSchema = client\n        .department()\n        .get_list_with_pagination(\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/department/struct.Department.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1departments~1/post/x-rust",
    "value": {
      "example": "/// Create a new department\nasync fn example_department_post_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Department = client\n        .department()\n        .post_list_with_pagination(&ramp_api::types::ApiDepartmentCreate {\n            business_id: 4 as i64,\n            name: \"some-string\".to_string(),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/department/struct.Department.html#method.post_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1departments~1{department_uuid}/get/x-rust",
    "value": {
      "example": "/// Retrieve a single department by ID\n/// \n/// **Parameters:**\n/// \n/// - `department_uuid: &'astr` (required)\nasync fn example_department_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Department = client.department().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/department/struct.Department.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1departments~1{department_uuid}/patch/x-rust",
    "value": {
      "example": "/// Modify a department\n/// \n/// **Parameters:**\n/// \n/// - `department_uuid: &'astr` (required)\nuse std::str::FromStr;\nasync fn example_department_patch_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Department = client\n        .department()\n        .patch_resource(\n            \"some-string\",\n            &ramp_api::types::ApiDepartmentUpdate {\n                name: \"some-string\".to_string(),\n                id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/department/struct.Department.html#method.patch_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1leads~1/post/x-rust",
    "value": {
      "example": "/// Create a sales lead\nasync fn example_sales_lead_post_creation() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .sales_lead()\n        .post_creation(&ramp_api::types::ApiSalesLeadCreate {\n            phone: Some(\"some-string\".to_string()),\n            state: \"some-string\".to_string(),\n            source: ramp_api::types::ApiSalesLeadCreateSource::AngelList,\n            last_name: \"some-string\".to_string(),\n            redirect_uri: \"some-string\".to_string(),\n            email: \"some-string\".to_string(),\n            first_name: \"some-string\".to_string(),\n            external_id: \"some-string\".to_string(),\n            business_info: Some(ramp_api::types::ApiSalesLeadBusinessLoad {\n                office_address: Some(ramp_api::types::ApiSalesLeadOfficeAddress {\n                    office_postal_code: Some(\"some-string\".to_string()),\n                    office_state: Some(\"some-string\".to_string()),\n                    office_city: Some(\"some-string\".to_string()),\n                    office_street_address: Some(\"some-string\".to_string()),\n                    office_apt_suite: Some(\"some-string\".to_string()),\n                    office_country: Some(\"some-string\".to_string()),\n                }),\n                date_of_incorporation: Some(chrono::Utc::now().date().naive_utc()),\n                state_of_incorporation: Some(\"some-string\".to_string()),\n                business_description: Some(\"some-string\".to_string()),\n                ein_number: Some(\"some-string\".to_string()),\n                sector: Some(\"some-string\".to_string()),\n                business_name_website: Some(\"some-string\".to_string()),\n                estimated_monthly_spend: Some(\"some-string\".to_string()),\n                business_name_legal: \"some-string\".to_string(),\n                industry: Some(\"some-string\".to_string()),\n                business_name_dba: \"some-string\".to_string(),\n                industry_group: Some(\"some-string\".to_string()),\n                office_phone_number: Some(\"some-string\".to_string()),\n                entity_type: Some(ramp_api::types::EntityType::Partnership),\n                sub_industry: Some(\"some-string\".to_string()),\n            }),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/sales_lead/struct.SalesLead.html#method.post_creation"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1leads~1{sales_lead_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a sales lead by ID\n/// \n/// **Parameters:**\n/// \n/// - `sales_lead_id: &'astr` (required)\nasync fn example_sales_lead_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Lead = client.sales_lead().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/sales_lead/struct.SalesLead.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1leads~1{sales_lead_id}~1upload_document/post/x-rust",
    "value": {
      "example": "/// Upload documents required by financing application process\n/// \n/// **Parameters:**\n/// \n/// - `sales_lead_id: &'astr` (required)\nasync fn example_sales_lead_post_document_upload() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Upload = client\n        .sales_lead()\n        .post_document_upload(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/sales_lead/struct.SalesLead.html#method.post_document_upload"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1locations~1/get/x-rust",
    "value": {
      "example": "/// Retrieves all locations for your business\n/// \n/// **Parameters:**\n/// \n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_location_get_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiLocationResourceSchema = client\n        .location()\n        .get_list_resource(\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/location/struct.Location.html#method.get_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1locations~1/post/x-rust",
    "value": {
      "example": "/// Create a new location\nasync fn example_location_post_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Location = client\n        .location()\n        .post_list_resource(&ramp_api::types::ApiLocationCreate {\n            name: \"some-string\".to_string(),\n            business_id: 4 as i64,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/location/struct.Location.html#method.post_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1locations~1{location_uuid}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific location by ID\n/// \n/// **Parameters:**\n/// \n/// - `location_uuid: &'astr` (required)\nasync fn example_location_get_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Location =\n        client.location().get_single_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/location/struct.Location.html#method.get_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1locations~1{location_uuid}/patch/x-rust",
    "value": {
      "example": "/// Modifies a location\n/// \n/// **Parameters:**\n/// \n/// - `location_uuid: &'astr` (required)\nasync fn example_location_patch_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Location = client\n        .location()\n        .patch_single_resource(\n            \"some-string\",\n            &ramp_api::types::ApiLocationUpdate {\n                name: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/location/struct.Location.html#method.patch_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1memos~1/get/x-rust",
    "value": {
      "example": "/// Returns a list of memos that meets the criteria\n/// \n/// **Parameters:**\n/// \n/// - `card_id: Option<String>`\n/// - `department_id: Option<String>`\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`\n/// - `location_id: Option<String>`\n/// - `manager_id: Option<String>`\n/// - `merchant_id: Option<String>`\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`\n/// - `user_id: Option<String>`\nuse std::str::FromStr;\nasync fn example_memo_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiMemoResourceSchema = client\n        .memo()\n        .get_list_with_pagination(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(chrono::Utc::now()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/memo/struct.Memo.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1memos~1{transaction_id}/get/x-rust",
    "value": {
      "example": "/// Get the memo of a transaction\n/// \n/// **Parameters:**\n/// \n/// - `transaction_id: &'astr` (required)\nasync fn example_memo_get_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Memo = client.memo().get_single_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/memo/struct.Memo.html#method.get_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1merchants~1/get/x-rust",
    "value": {
      "example": "/// List all the merchants\n/// \n/// **Parameters:**\n/// \n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `transaction_from_date: Option<chrono::DateTime<chrono::Utc>>`\n/// - `transaction_to_date: Option<chrono::DateTime<chrono::Utc>>`\nuse std::str::FromStr;\nasync fn example_merchant_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiMerchantResourceSchema = client\n        .merchant()\n        .get_list_with_pagination(\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/merchant/struct.Merchant.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipt-integrations~1opt-out/get/x-rust",
    "value": {
      "example": "/// List all emails that have been opted out of Email-based receipt integrations\nuse std::str::FromStr;\nasync fn example_receipt_integrations_get_opted_out_emails_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiReceiptIntegrationOptedOutEmailResource = client\n        .receipt_integrations()\n        .get_opted_out_emails_list_resource(\n            &ramp_api::types::ApiReceiptIntegrationOptedOutEmailResource {\n                id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                email: Some(\"email@example.com\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt_integrations/struct.ReceiptIntegrations.html#method.get_opted_out_emails_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipt-integrations~1opt-out/post/x-rust",
    "value": {
      "example": "/// Add a new email to be opted out of Email-based receipt integrations\nasync fn example_receipt_integrations_post_opted_out_emails_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiReceiptIntegrationOptedOutEmailResource = client\n        .receipt_integrations()\n        .post_opted_out_emails_list_resource(\n            &ramp_api::types::ApiReceiptIntegrationOptedOutEmailCreate {\n                business_id: 4 as i64,\n                email: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt_integrations/struct.ReceiptIntegrations.html#method.post_opted_out_emails_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipt-integrations~1opt-out~1{mailbox_opted_out_email_uuid}/delete/x-rust",
    "value": {
      "example": "/// Remove an email from the Email-based receipt integration opt out list, opting it in\n/// \n/// **Parameters:**\n/// \n/// - `mailbox_opted_out_email_uuid: &'astr` (required)\nasync fn example_receipt_integrations_delete_opted_out_emails_delete_resource() -> anyhow::Result<()>\n{\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .receipt_integrations()\n        .delete_opted_out_emails_delete_resource(\"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt_integrations/struct.ReceiptIntegrations.html#method.delete_opted_out_emails_delete_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipts~1/get/x-rust",
    "value": {
      "example": "/// List all receipts of a business\n/// \n/// **Parameters:**\n/// \n/// - `created_after: Option<chrono::DateTime<chrono::Utc>>`: Filter for receipts that were created after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\n/// - `created_before: Option<chrono::DateTime<chrono::Utc>>`: Filter for receipts that were created before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for receipts related to transactions which occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for receipts related to transactions which occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\nuse std::str::FromStr;\nasync fn example_receipt_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiReceiptResourceSchema = client\n        .receipt()\n        .get_list_with_pagination(\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt/struct.Receipt.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipts~1{receipt_id}/get/x-rust",
    "value": {
      "example": "/// Get details of single receipt\n/// \n/// **Parameters:**\n/// \n/// - `receipt_id: &'astr` (required)\nasync fn example_receipt_get_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Receipt = client.receipt().get_single_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt/struct.Receipt.html#method.get_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1reimbursements~1/get/x-rust",
    "value": {
      "example": "/// List all the reimbursements\n/// \n/// **Parameters:**\n/// \n/// - `has_no_sync_commits: Option<bool>`: Filter for reimbursements that have not been synced to ERP systems yet.\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `sync_ready: Option<bool>`: Filter for reimbursements that are coded with accounting fields and ready to sync to ERP systems.\n/// - `user_id: Option<uuid::Uuid>`\nuse std::str::FromStr;\nasync fn example_reimbursement_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiReimbursementResourceSchema = client\n        .reimbursement()\n        .get_list_with_pagination(\n            Some(true),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(false),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/reimbursement/struct.Reimbursement.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1reimbursements~1{reimbursement_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a reimbursement by ID\n/// \n/// **Parameters:**\n/// \n/// - `reimbursement_id: &'astr` (required)\nasync fn example_reimbursement_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Reimbursement =\n        client.reimbursement().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/reimbursement/struct.Reimbursement.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1token~1/post/x-rust",
    "value": {
      "example": "/// Perform a `POST` request to `/developer/v1/token/`.\nasync fn example_token_post() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client.token().post().await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/token/struct.Token.html#method.post"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1token~1pkce/post/x-rust",
    "value": {
      "example": "/// Perform a `POST` request to `/developer/v1/token/pkce`.\nasync fn example_token_post_pkce() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client.token().post_pkce().await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/token/struct.Token.html#method.post_pkce"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1token~1revoke/post/x-rust",
    "value": {
      "example": "/// Perform a `POST` request to `/developer/v1/token/revoke`.\nasync fn example_token_post_revoke() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client.token().post_revoke().await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/token/struct.Token.html#method.post_revoke"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1transactions~1/get/x-rust",
    "value": {
      "example": "/// Retrieves all transactions for the business\n/// \n/// This endpoint supports filtering and ordering. Note that setting multiple ordering parameters is unsupported.\n/// \n/// **Parameters:**\n/// \n/// - `card_id: Option<String>`: Filter by card.\n/// - `department_id: Option<String>`: Filter by department.\n/// - `expense_policy_interaction_has_alert: Option<bool>`: Filter for transactions that have expense policy alert.\n/// - `expense_policy_interaction_needs_review: Option<bool>`: Filter for transactions that require expense policy review.\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for transactions that happens after the given date.\n/// - `has_no_sync_commits: Option<bool>`: Filter for transactions that have not been synced to ERP systems yet.\n/// - `location_id: Option<String>`: Filter by location.\n/// - `manager_id: Option<serde_json::Value>`\n/// - `max_amount: Option<f64>`: Filter for transactions that have smaller amount that the given amount. This is a U.S. Dollar denominated amount.\n/// - `merchant_id: Option<String>`: Filter by merchant.\n/// - `min_amount: Option<f64>`: Filter for transactions that have larger amount that the given amount. This is a U.S. Dollar denominated amount.\n/// - `order_by_amount_asc: Option<bool>`: Sort transactions by amount in ascending order.\n/// - `order_by_amount_desc: Option<bool>`: Sort transactions by amount in descending order.\n/// - `order_by_date_asc: Option<bool>`: Sort transactions by date in ascending order.\n/// - `order_by_date_desc: Option<bool>`: Sort transactions by date in descending order.\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `requires_memo: Option<bool>`: Filters for transactions which require a memo, but do not have one. This can only be set to true.\n/// - `sk_category_id: Option<String>`: Filter by sk category.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `state: Option<crate::types::GetTransactionsCanonicalListWithPaginationState>`: Filter by transaction state.\n/// - `sync_ready: Option<bool>`: Filter for transactions that are coded with accounting fields and ready to sync to ERP systems.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for transactions that happens before the given date.\n/// - `user_id: Option<String>`: Filter by user.\nuse std::str::FromStr;\nasync fn example_transaction_get_transactions_canonical_list_with_pagination() -> anyhow::Result<()>\n{\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiTransactionCanonicalSchema = client\n        .transaction()\n        .get_transactions_canonical_list_with_pagination(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(true),\n            Some(true),\n            Some(chrono::Utc::now()),\n            Some(true),\n            Some(\"some-string\".to_string()),\n            Some(serde_json::Value::String(\"some-string\".to_string())),\n            Some(3.14 as f64),\n            Some(\"some-string\".to_string()),\n            Some(3.14 as f64),\n            Some(true),\n            Some(false),\n            Some(true),\n            Some(true),\n            Some(4 as i64),\n            Some(true),\n            Some(\"some-string\".to_string()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(ramp_api::types::GetTransactionsCanonicalListWithPaginationState::Error),\n            Some(false),\n            Some(chrono::Utc::now()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/transaction/struct.Transaction.html#method.get_transactions_canonical_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1transactions~1{transaction_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a single transaction by ID\n/// \n/// **Parameters:**\n/// \n/// - `transaction_id: &'astr` (required)\nasync fn example_transaction_get_canonical_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Transaction = client\n        .transaction()\n        .get_canonical_resource(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/transaction/struct.Transaction.html#method.get_canonical_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1/get/x-rust",
    "value": {
      "example": "/// Retrieve all users of the business\n/// \n/// **Parameters:**\n/// \n/// - `department_id: Option<uuid::Uuid>`: filter by department\n/// - `email: Option<String>`: filter by email\n/// - `location_id: Option<uuid::Uuid>`: filter by location\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_user_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiUserResourceSchema = client\n        .user()\n        .get_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(\"email@example.com\".to_string()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1deferred/post/x-rust",
    "value": {
      "example": "/// Trigger an async task to create a new user\nuse std::str::FromStr;\nasync fn example_user_post_creation_deferred_task() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .user()\n        .post_creation_deferred_task(&ramp_api::types::ApiUserCreate {\n            role: ramp_api::types::ApiUserCreateRole::BusinessUser,\n            phone: \"some-string\".to_string(),\n            department_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            location_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            idempotency_key: Some(\"some-string\".to_string()),\n            last_name: \"some-string\".to_string(),\n            email: \"email@example.com\".to_string(),\n            first_name: \"some-string\".to_string(),\n            direct_manager_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.post_creation_deferred_task"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1deferred~1status~1{task_uuid}/get/x-rust",
    "value": {
      "example": "/// Gets the status of a deferred task for users\n/// \n/// **Parameters:**\n/// \n/// - `task_uuid: &'astr` (required)\nasync fn example_user_get_deferred_task_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::UserDeferredTask = client\n        .user()\n        .get_deferred_task_resource(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.get_deferred_task_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1{user_id}/delete/x-rust",
    "value": {
      "example": "/// Suspends a user\n/// \n/// Note that this action does not delete the user's cards.\n/// Currently this action is not reversible.\n/// \n/// **Parameters:**\n/// \n/// - `user_id: &'astr` (required)\nasync fn example_user_delete_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client.user().delete_resource(\"some-string\").await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.delete_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1{user_id}/get/x-rust",
    "value": {
      "example": "/// Retrieve the information of the user with the matching user ID\n/// \n/// **Parameters:**\n/// \n/// - `user_id: &'astr` (required)\nasync fn example_user_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::User = client.user().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1{user_id}/patch/x-rust",
    "value": {
      "example": "/// Modify information about a user\n/// \n/// **Parameters:**\n/// \n/// - `user_id: &'astr` (required)\nuse std::str::FromStr;\nasync fn example_user_patch_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .user()\n        .patch_resource(\n            \"some-string\",\n            &ramp_api::types::ApiUserUpdate {\n                role: Some(ramp_api::types::Role::BusinessAdmin),\n                direct_manager_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                department_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                location_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.patch_resource"
    }
  }
]