[
  {
    "op": "add",
    "path": "/info/x-rust",
    "value": {
      "client": "// Authenticate.\nlet client = ramp-api::Client::new(\n     String::from(\"client-id\"),\n     String::from(\"client-secret\"),\n     String::from(\"redirect-uri\"),\n     String::from(\"token\"),\n     String::from(\"refresh-token\"),\n);\n\n// - OR -\n\n// Authenticate with your credentials parsed from the environment variables:\n// - `RAMP_CLIENT_ID`\n// - `let client = ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));_CLIENT_SECRET`\n// - `let client = ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));_REDIRECT_URI`\nlet client = ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));",
      "install": "[dependencies]\nramp-api = \"0.0.2\""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1accounts/get/x-rust",
    "value": {
      "example": "/// List general ledger accounts\n/// \n/// **Parameters:**\n/// \n/// - `is_active: Option<bool>`\n/// - `is_synced: Option<bool>`\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_accounting_get_gl_account_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiAccountingGLAccountResourceSchema = client\n        .accounting()\n        .get_gl_account_list_resource(\n            Some(false),\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_gl_account_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1accounts/post/x-rust",
    "value": {
      "example": "/// Upload general ledger accounts\n/// \n/// You can upload up to 500 general ledger accounts in an all-or-nothing fashion. If a general ledger accounts within a batch is malformed or violates a database constraint, the entire batch containing that account will be disregarded.\n/// To have a successful upload, please sanitize the data and ensure the general ledger accounts that you are trying to upload do not already exist on Ramp.\n/// If a general ledger account is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/accounts/{id} endpoint instead.\nasync fn example_accounting_post_gl_account_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiAccountingTrackingCategoryUploadResponse = client\n        .accounting()\n        .post_gl_account_list_resource(&ramp_api::types::ApiAccountingGLAccountUploadRequestBody {\n            gl_accounts: vec![ramp_api::types::Glaccount {\n                classification: ramp_api::types::Classification::Unknown,\n                code: Some(\"some-string\".to_string()),\n                id: \"some-string\".to_string(),\n                name: \"some-string\".to_string(),\n            }],\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.post_gl_account_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1accounts~1{gl_account_id}/delete/x-rust",
    "value": {
      "example": "/// Delete a general ledger account\n/// \n/// **Parameters:**\n/// \n/// - `gl_account_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_delete_gl_account_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .accounting()\n        .delete_gl_account_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.delete_gl_account_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1accounts~1{gl_account_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a general ledger account\n/// \n/// **Parameters:**\n/// \n/// - `gl_account_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_get_gl_account_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::GeneralLedgerAccount = client\n        .accounting()\n        .get_gl_account_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_gl_account_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1accounts~1{gl_account_id}/patch/x-rust",
    "value": {
      "example": "/// Update a general ledger account\n/// \n/// This endpoint can be used to update the name or code of a GL account;\n/// It can also be used to associate a general ledger account with a list of subsidiaries.\n/// \n/// **Parameters:**\n/// \n/// - `gl_account_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_patch_gl_account_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::GeneralLedgerAccount = client\n        .accounting()\n        .patch_gl_account_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiAccountingGLAccountUpdateRequestBody {\n                code: Some(\"some-string\".to_string()),\n                name: Some(\"some-string\".to_string()),\n                reactivate: Some(false),\n                subsidiaries: Some(vec![\"some-string\".to_string()]),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.patch_gl_account_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1connection/delete/x-rust",
    "value": {
      "example": "/// Delete an accounting connection\nasync fn example_accounting_delete_connection_resouce() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client.accounting().delete_connection_resouce().await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.delete_connection_resouce"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1connection/get/x-rust",
    "value": {
      "example": "/// Fetch an accounting connection\nasync fn example_accounting_get_connection_resouce() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::AccountingProvider =\n        client.accounting().get_connection_resouce().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_connection_resouce"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1connection/post/x-rust",
    "value": {
      "example": "/// Register a new accounting connection\n/// \n/// A connection is required in order to use our accounting API functionality.\n/// \n/// This endpoint provides the option to reactivate a deleted accounting connection\n/// instead of creating a brand-new connection if the user passes the \"reactivate\" parameter.\n/// This is useful if the user registered accounting fields in a previous connection\n/// and doesn't want to re-register those fields again.\nasync fn example_accounting_post_connection_resouce() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::AccountingProvider = client\n        .accounting()\n        .post_connection_resouce(\n            &ramp_api::types::ApiAccountingProviderAccessCreateRequestBody {\n                reactivate: false,\n                remote_provider_name: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.post_connection_resouce"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1field-options/get/x-rust",
    "value": {
      "example": "/// List options for a given custom accounting field\n/// \n/// **Parameters:**\n/// \n/// - `field_id: uuid::Uuid` (required)\n/// - `is_active: Option<bool>`\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_accounting_get_custom_field_option_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiAccountingCustomFieldOptionResourceSchema =\n        client\n            .accounting()\n            .get_custom_field_option_list_resource(\n                uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n                Some(false),\n                Some(4 as i64),\n                Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n            )\n            .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_custom_field_option_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1field-options/post/x-rust",
    "value": {
      "example": "/// Upload new options\n/// \n/// You can upload up to 500 new field options for a given custom accounting field in an all-or-nothing fashion. If a field option within a batch is malformed or violates a database constraint, the entire batch containing that field option will be disregarded.\n/// To have a successful upload, please sanitize the data and ensure the field options that you are trying to upload do not already exist on Ramp.\n/// If a field option is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/field-options/{id} endpoint instead.\nuse std::str::FromStr;\nasync fn example_accounting_post_custom_field_option_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiAccountingTrackingCategoryUploadResponse = client\n        .accounting()\n        .post_custom_field_option_list_resource(\n            &ramp_api::types::ApiAccountingCustomFieldOptionUploadRequestBody {\n                field_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n                options: vec![ramp_api::types::FieldOption {\n                    id: \"some-string\".to_string(),\n                    value: \"some-string\".to_string(),\n                }],\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.post_custom_field_option_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1field-options~1{field_option_id}/delete/x-rust",
    "value": {
      "example": "/// Delete a custom accounting field option\n/// \n/// **Parameters:**\n/// \n/// - `field_option_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_delete_custom_field_option_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .accounting()\n        .delete_custom_field_option_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.delete_custom_field_option_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1field-options~1{field_option_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a custom accounting field option\n/// \n/// **Parameters:**\n/// \n/// - `field_option_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_get_custom_field_option_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::CustomFieldOption = client\n        .accounting()\n        .get_custom_field_option_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_custom_field_option_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1field-options~1{field_option_id}/patch/x-rust",
    "value": {
      "example": "/// Update a custom accounting field option\n/// \n/// **Parameters:**\n/// \n/// - `field_option_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_patch_custom_field_option_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::CustomFieldOption = client\n        .accounting()\n        .patch_custom_field_option_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiAccountingCustomFieldOptionUpdateRequestBody {\n                reactivate: Some(false),\n                value: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.patch_custom_field_option_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1fields/get/x-rust",
    "value": {
      "example": "/// List custom accounting fields\n/// \n/// **Parameters:**\n/// \n/// - `is_active: Option<bool>`\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_accounting_get_custom_field_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiAccountingCustomFieldResourceSchema = client\n        .accounting()\n        .get_custom_field_list_resource(\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_custom_field_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1fields/post/x-rust",
    "value": {
      "example": "/// Create a new custom accounting field\n/// \n/// If an custom field with the same id already exist on Ramp, then that existing one will be returned instead of creating a new one; If the existing custom field is inactive, it will be reactivated.\n/// If you want to update the existing custom field, please use the PATCH developer/v1/accounting/fields/{id} endpoint instead.\nasync fn example_accounting_post_custom_field_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiAccountingCustomFieldResource = client\n        .accounting()\n        .post_custom_field_list_resource(&ramp_api::types::ApiAccountingCustomFieldCreateRequestBody {\n            id: \"some-string\".to_string(),\n            input_type: ramp_api::types::InputType::SingleChoice,\n            is_splittable: Some(false),\n            name: \"some-string\".to_string(),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.post_custom_field_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1fields~1{field_id}/delete/x-rust",
    "value": {
      "example": "/// Delete a custom accounting field\n/// \n/// **Parameters:**\n/// \n/// - `field_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_delete_custom_field_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .accounting()\n        .delete_custom_field_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.delete_custom_field_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1fields~1{field_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a custom accounting field\n/// \n/// **Parameters:**\n/// \n/// - `field_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_get_custom_field_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiAccountingCustomFieldResource = client\n        .accounting()\n        .get_custom_field_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_custom_field_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1fields~1{field_id}/patch/x-rust",
    "value": {
      "example": "/// Update a custom accounting field\n/// \n/// **Parameters:**\n/// \n/// - `field_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_patch_custom_field_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiAccountingCustomFieldResource = client\n        .accounting()\n        .patch_custom_field_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiAccountingCustomFieldUpdateRequestBody {\n                is_splittable: Some(false),\n                name: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.patch_custom_field_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1syncs/post/x-rust",
    "value": {
      "example": "/// Post sync status\n/// \n/// This endpoint allows customers to notify Ramp of a list of sync results.\n/// An idempotency key is required to ensure that subsequent requests are properly handled.\nuse std::str::FromStr;\nasync fn example_accounting_post_sync_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .accounting()\n        .post_sync_list_resource(&ramp_api::types::ApiAccountingSyncCreateRequestBody {\n            failed_syncs: Some(vec![ramp_api::types::ApiAccountingFailedSyncRequestBody {\n                error: ramp_api::types::ApiAccountingSyncErrorRequestBody {\n                    message: \"some-string\".to_string(),\n                },\n                id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            }]),\n            idempotency_key: \"some-string\".to_string(),\n            successful_syncs: Some(vec![ramp_api::types::ApiAccountingSuccessfulSyncRequestBody {\n                id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n                reference_id: \"some-string\".to_string(),\n            }]),\n            sync_type: ramp_api::types::SyncType::WalletTransferSync,\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.post_sync_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1vendors/get/x-rust",
    "value": {
      "example": "/// List vendors\n/// \n/// **Parameters:**\n/// \n/// - `is_active: Option<bool>`\n/// - `is_synced: Option<bool>`\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_accounting_get_vendor_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiAccountingVendorResourceSchema = client\n        .accounting()\n        .get_vendor_list_resource(\n            Some(false),\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_vendor_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1vendors/post/x-rust",
    "value": {
      "example": "/// Upload vendors\n/// \n/// You can upload up to 500 vendors in an all-or-nothing fashion. If a vendors within a batch is malformed or violates a database constraint, the entire batch containing that vendors will be disregarded.\n/// To have a successful upload, please sanitize the data and ensure the subsidiaries that you are trying to upload do not already exist on Ramp.\n/// If a vendors is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/vendors/{id} endpoint instead.\nasync fn example_accounting_post_vendor_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiAccountingTrackingCategoryUploadResponse = client\n        .accounting()\n        .post_vendor_list_resource(&ramp_api::types::ApiAccountingVendorUploadRequestBody {\n            vendors: vec![ramp_api::types::Vendor {\n                id: \"some-string\".to_string(),\n                name: \"some-string\".to_string(),\n            }],\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.post_vendor_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1vendors~1{vendor_id}/delete/x-rust",
    "value": {
      "example": "/// Delete a vendor\n/// \n/// **Parameters:**\n/// \n/// - `vendor_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_delete_vendor_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .accounting()\n        .delete_vendor_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.delete_vendor_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1vendors~1{vendor_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a vendor\n/// \n/// **Parameters:**\n/// \n/// - `vendor_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_get_vendor_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::VendorAccount = client\n        .accounting()\n        .get_vendor_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.get_vendor_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1accounting~1vendors~1{vendor_id}/patch/x-rust",
    "value": {
      "example": "/// Update a vendor\n/// \n/// **Parameters:**\n/// \n/// - `vendor_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_accounting_patch_vendor_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::VendorAccount = client\n        .accounting()\n        .patch_vendor_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiAccountingVendorUpdateRequestBody {\n                code: Some(\"some-string\".to_string()),\n                name: Some(\"some-string\".to_string()),\n                reactivate: Some(false),\n                subsidiaries: Some(vec![\"some-string\".to_string()]),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/accounting/struct.Accounting.html#method.patch_vendor_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1bills/get/x-rust",
    "value": {
      "example": "/// List bills\n/// \n/// **Parameters:**\n/// \n/// - `entity_id: Option<uuid::Uuid>`: Filter bills by entity.\n/// - `from_due_date: Option<chrono::DateTime<chrono::Utc>>`: Shows only bills with a due_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601\n/// - `from_issued_date: Option<chrono::DateTime<chrono::Utc>>`: Shows only bills with a issued_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `payment_method: Option<crate::types::PaymentMethod>`: List bills of the provided payment method.\n/// - `payment_status: Option<crate::types::PaymentStatus>`: List bills of the provided payment status.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `sync_ready: Option<bool>`: Only show bills that are ready to sync to ERP, if set to True\n/// - `to_due_date: Option<chrono::DateTime<chrono::Utc>>`: Shows only bills with a due_at on or beofre this date. This parameter should be provided as a datetime string that conforms to ISO 8601\n/// - `to_issued_date: Option<chrono::DateTime<chrono::Utc>>`: Shows only bills with a issued_at on or beofre this date. This parameter should be provided as a datetime string that conforms to ISO 8601\nuse std::str::FromStr;\nasync fn example_bill_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiBillResourceSchema = client\n        .bill()\n        .get_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n            Some(4 as i64),\n            Some(ramp_api::types::PaymentMethod::Unspecified),\n            Some(ramp_api::types::PaymentStatus::Paid),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(false),\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/bill/struct.Bill.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1bills~1{bill_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a bill\n/// \n/// **Parameters:**\n/// \n/// - `bill_id: &'astr` (required)\nasync fn example_bill_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Bill = client.bill().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/bill/struct.Bill.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1business/get/x-rust",
    "value": {
      "example": "/// Fetch the company information\nasync fn example_business_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Business = client.business().get_resource().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/business/struct.Business.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1business~1balance/get/x-rust",
    "value": {
      "example": "/// Fetch the company balance information\nasync fn example_business_get_balance_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::BusinessBalance = client.business().get_balance_resource().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/business/struct.Business.html#method.get_balance_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1card-programs/get/x-rust",
    "value": {
      "example": "/// List card programs\n/// \n/// **Parameters:**\n/// \n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// \n/// **NOTE:** This operation is marked as deprecated.\nuse std::str::FromStr;\nasync fn example_card_program_get_list_deprecated() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiCardProgramResourceSchema = client\n        .card_program()\n        .get_list_deprecated(\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card_program/struct.CardProgram.html#method.get_list_deprecated"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1card-programs/post/x-rust",
    "value": {
      "example": "/// Create a card program\n/// \n/// **NOTE:** This operation is marked as deprecated.\nuse std::str::FromStr;\nasync fn example_card_program_post_list_deprecated() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiCardProgramResource = client\n        .card_program()\n        .post_list_deprecated(&ramp_api::types::ApiCardProgramCreateRequestBody {\n            acting_user_id: 4 as i64,\n            business_id: 4 as i64,\n            description: \"some-string\".to_string(),\n            display_name: \"some-string\".to_string(),\n            icon: Some(ramp_api::types::Icon::TravelExpensesIcon),\n            is_default: false,\n            is_physical: false,\n            policy_id: 4 as i64,\n            spending_restrictions: ramp_api::types::ApiCardSpendingRestrictionsRequestBody {\n                amount: 3.14 as f64,\n                blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                card_accounting_rules: Some(vec![\n                    ramp_api::types::ApiCardAccountingRulesDataRequestBody {\n                        tracking_category_id: uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?,\n                        tracking_category_option_id: uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?,\n                        tracking_category_option_remote_name: \"some-string\".to_string(),\n                    },\n                ]),\n                categories: Some(vec![4 as i64]),\n                categories_blacklist: Some(vec![4 as i64]),\n                categories_whitelist: Some(vec![4 as i64]),\n                currency: Some(\"some-string\".to_string()),\n                interval: ramp_api::types::Interval::Yearly,\n                lock_date: Some(chrono::Utc::now()),\n                policy_id: Some(\"some-string\".to_string()),\n                transaction_amount_limit: Some(3.14 as f64),\n                vendor_blacklist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                vendor_whitelist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n            },\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card_program/struct.CardProgram.html#method.post_list_deprecated"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1card-programs~1{card_program_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a card program\n/// \n/// **Parameters:**\n/// \n/// - `card_program_id: &'astr` (required)\n/// \n/// **NOTE:** This operation is marked as deprecated.\nasync fn example_card_program_get_resource_deprecated() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiCardProgramResource = client\n        .card_program()\n        .get_resource_deprecated(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card_program/struct.CardProgram.html#method.get_resource_deprecated"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards/get/x-rust",
    "value": {
      "example": "/// List cards\n/// \n/// **Parameters:**\n/// \n/// - `card_program_id: Option<uuid::Uuid>`: Filter by card program.\n/// - `display_name: Option<String>`: Filter by display name.\n/// - `entity_id: Option<uuid::Uuid>`: Filter by business entity.\n/// - `is_activated: Option<bool>`: Filter only for activated cards. Defaults to True if not specified\n/// - `is_terminated: Option<bool>`: Filter only for terminated cards. Defaults to False if not specified\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `user_id: Option<uuid::Uuid>`: Filter by card owner.\nuse std::str::FromStr;\nasync fn example_card_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiCardResourceSchema = client\n        .card()\n        .get_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(\"some-string\".to_string()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(false),\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1deferred~1physical/post/x-rust",
    "value": {
      "example": "/// Create a physical card\n/// \n/// Call this endpoint to create an async task to request for new physical card.\nuse std::str::FromStr;\nasync fn example_card_post_physical() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_physical(&ramp_api::types::ApiPhysicalRequestBody {\n            card_program_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            display_name: Some(\"some-string\".to_string()),\n            entity_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            fulfillment: Some(ramp_api::types::CardFulfillmentRequestBody {\n                card_personalization: Some(ramp_api::types::CardPersonalizationRequestBody {\n                    text: Some(ramp_api::types::CardPersonalizationTextRequestBody {\n                        name_line_1: Some(ramp_api::types::CardPersonalizationNameLineRequestBody {\n                            value: Some(\"some-string\".to_string()),\n                        }),\n                        name_line_2: Some(ramp_api::types::CardPersonalizationNameLineRequestBody {\n                            value: Some(\"some-string\".to_string()),\n                        }),\n                    }),\n                }),\n                cardholder_uuid: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                shipping: Some(ramp_api::types::CardShippingRequestBody {\n                    method: Some(\"some-string\".to_string()),\n                    recipient_address: Some(ramp_api::types::CardShippingAddressRequestBody {\n                        address_1: \"some-string\".to_string(),\n                        address_2: Some(\"some-string\".to_string()),\n                        city: \"some-string\".to_string(),\n                        country: \"some-string\".to_string(),\n                        first_name: \"some-string\".to_string(),\n                        last_name: \"some-string\".to_string(),\n                        phone: Some(\"some-string\".to_string()),\n                        postal_code: \"some-string\".to_string(),\n                        state: Some(\"some-string\".to_string()),\n                    }),\n                    recipient_address_verification_state: Some(\n                        ramp_api::types::RecipientAddressVerificationState::Verified,\n                    ),\n                    return_address: Some(ramp_api::types::CardShippingAddressRequestBody {\n                        address_1: \"some-string\".to_string(),\n                        address_2: Some(\"some-string\".to_string()),\n                        city: \"some-string\".to_string(),\n                        country: \"some-string\".to_string(),\n                        first_name: \"some-string\".to_string(),\n                        last_name: \"some-string\".to_string(),\n                        phone: Some(\"some-string\".to_string()),\n                        postal_code: \"some-string\".to_string(),\n                        state: Some(\"some-string\".to_string()),\n                    }),\n                }),\n            }),\n            idempotency_key: \"some-string\".to_string(),\n            is_physical: false,\n            is_temporary: false,\n            spending_restrictions: Some(ramp_api::types::ApiCardSpendingRestrictionsRequestBody {\n                amount: 3.14 as f64,\n                blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                card_accounting_rules: Some(vec![\n                    ramp_api::types::ApiCardAccountingRulesDataRequestBody {\n                        tracking_category_id: uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?,\n                        tracking_category_option_id: uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?,\n                        tracking_category_option_remote_name: \"some-string\".to_string(),\n                    },\n                ]),\n                categories: Some(vec![4 as i64]),\n                categories_blacklist: Some(vec![4 as i64]),\n                categories_whitelist: Some(vec![4 as i64]),\n                currency: Some(\"some-string\".to_string()),\n                interval: ramp_api::types::Interval::Yearly,\n                lock_date: Some(chrono::Utc::now()),\n                policy_id: Some(\"some-string\".to_string()),\n                transaction_amount_limit: Some(3.14 as f64),\n                vendor_blacklist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                vendor_whitelist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n            }),\n            user_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_physical"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1deferred~1status~1{task_id}/get/x-rust",
    "value": {
      "example": "/// Fetch deferred task status\n/// \n/// **Parameters:**\n/// \n/// - `task_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_card_get_deferred_task_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::CardDeferredTask = client\n        .card()\n        .get_deferred_task_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.get_deferred_task_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1deferred~1virtual/post/x-rust",
    "value": {
      "example": "/// Create a virtual card\n/// \n/// Call this endpoint to create an async task to request for new virtual card.\nuse std::str::FromStr;\nasync fn example_card_post_virtual() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_virtual(&ramp_api::types::ApiCardRequestBody {\n            card_program_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            display_name: Some(\"some-string\".to_string()),\n            entity_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            idempotency_key: \"some-string\".to_string(),\n            is_physical: false,\n            is_temporary: false,\n            spending_restrictions: Some(ramp_api::types::ApiCardSpendingRestrictionsRequestBody {\n                amount: 3.14 as f64,\n                blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                card_accounting_rules: Some(vec![\n                    ramp_api::types::ApiCardAccountingRulesDataRequestBody {\n                        tracking_category_id: uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?,\n                        tracking_category_option_id: uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?,\n                        tracking_category_option_remote_name: \"some-string\".to_string(),\n                    },\n                ]),\n                categories: Some(vec![4 as i64]),\n                categories_blacklist: Some(vec![4 as i64]),\n                categories_whitelist: Some(vec![4 as i64]),\n                currency: Some(\"some-string\".to_string()),\n                interval: ramp_api::types::Interval::Yearly,\n                lock_date: Some(chrono::Utc::now()),\n                policy_id: Some(\"some-string\".to_string()),\n                transaction_amount_limit: Some(3.14 as f64),\n                vendor_blacklist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                vendor_whitelist: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n            }),\n            user_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_virtual"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a card\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nasync fn example_card_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Card = client.card().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}/patch/x-rust",
    "value": {
      "example": "/// Update a card\n/// \n/// This endpoint allow you update the owner, display name, and spend restrictions of a card.\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nuse std::str::FromStr;\nasync fn example_card_patch_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .card()\n        .patch_resource(\n            \"some-string\",\n            &ramp_api::types::ApiCardUpdateRequestBody {\n                card_program_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                display_name: Some(\"some-string\".to_string()),\n                entity_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                has_notifications_enabled: Some(false),\n                new_user_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                spending_restrictions: Some(\n                    ramp_api::types::PartialApiCardSpendingRestrictionsUpdateRequestBody {\n                        amount: Some(3.14 as f64),\n                        blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                        categories: Some(vec![4 as i64]),\n                        categories_blacklist: Some(vec![4 as i64]),\n                        categories_whitelist: Some(vec![4 as i64]),\n                        currency: Some(\"some-string\".to_string()),\n                        interval: Some(ramp_api::types::Interval::Yearly),\n                        lock_date: Some(chrono::Utc::now()),\n                        policy_id: Some(\"some-string\".to_string()),\n                        transaction_amount_limit: Some(3.14 as f64),\n                        vendor_blacklist: Some(vec![uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?]),\n                        vendor_whitelist: Some(vec![uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?]),\n                    },\n                ),\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.patch_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}~1deferred~1suspension/post/x-rust",
    "value": {
      "example": "/// Suspend a card\n/// \n/// Call this endpoint to create an async task to suspend a card so that it is locked from use. The suspension is revertable.\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nasync fn example_card_post_suspension_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_suspension_resource(\n            \"some-string\",\n            &ramp_api::types::ApiCardDeferredUpdateRequestBody {\n                idempotency_key: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_suspension_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}~1deferred~1termination/post/x-rust",
    "value": {
      "example": "/// Terminate a card\n/// \n/// Call this endpoint to create an async task to terminate a card permanently. Please note that this action is irreversible.\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nasync fn example_card_post_termination_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_termination_resource(\n            \"some-string\",\n            &ramp_api::types::ApiCardDeferredUpdateRequestBody {\n                idempotency_key: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_termination_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cards~1{card_id}~1deferred~1unsuspension/post/x-rust",
    "value": {
      "example": "/// Unlock a card\n/// \n/// Call this endpoint to create an async task to remove a card's suspension so that it may be used again.\n/// \n/// **Parameters:**\n/// \n/// - `card_id: &'astr` (required)\nasync fn example_card_post_unsuspension_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .card()\n        .post_unsuspension_resource(\n            \"some-string\",\n            &ramp_api::types::ApiCardDeferredUpdateRequestBody {\n                idempotency_key: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/card/struct.Card.html#method.post_unsuspension_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cashbacks/get/x-rust",
    "value": {
      "example": "/// List cashback payments\n/// \n/// **Parameters:**\n/// \n/// - `entity_id: Option<uuid::Uuid>`: Filter by business entity.\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for cashback payments that occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `statement_id: Option<uuid::Uuid>`: Filter by statement.\n/// - `sync_ready: Option<bool>`: Filter for cashback payments that are ready to be synced. These have no pending syncs and are completed\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for cashback payments that occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\nuse std::str::FromStr;\nasync fn example_cashback_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiCashbackResourceSchema = client\n        .cashback()\n        .get_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(false),\n            Some(chrono::Utc::now()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/cashback/struct.Cashback.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1cashbacks~1{cashback_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a cashback payment\n/// \n/// **Parameters:**\n/// \n/// - `cashback_id: &'astr` (required)\nasync fn example_cashback_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Cashback = client.cashback().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/cashback/struct.Cashback.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1departments/get/x-rust",
    "value": {
      "example": "/// List departments\n/// \n/// **Parameters:**\n/// \n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_department_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiDepartmentResourceSchema = client\n        .department()\n        .get_list_with_pagination(\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/department/struct.Department.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1departments/post/x-rust",
    "value": {
      "example": "/// Create a department\nasync fn example_department_post_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Department = client\n        .department()\n        .post_list_with_pagination(&ramp_api::types::ApiDepartmentCreateRequestBody {\n            name: \"some-string\".to_string(),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/department/struct.Department.html#method.post_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1departments~1{department_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a department\n/// \n/// **Parameters:**\n/// \n/// - `department_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_department_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Department = client\n        .department()\n        .get_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/department/struct.Department.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1departments~1{department_id}/patch/x-rust",
    "value": {
      "example": "/// Update a department\n/// \n/// **Parameters:**\n/// \n/// - `department_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_department_patch_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Department = client\n        .department()\n        .patch_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiDepartmentUpdateRequestBody {\n                id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n                name: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/department/struct.Department.html#method.patch_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1entities/get/x-rust",
    "value": {
      "example": "/// List business entities\n/// \n/// **Parameters:**\n/// \n/// - `currency: Option<String>`\n/// - `entity_name: Option<String>`\n/// - `is_primary: Option<bool>`\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_business_entities_get_entity_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiEntityResource = client\n        .business_entities()\n        .get_entity_list_with_pagination(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/business_entities/struct.BusinessEntities.html#method.get_entity_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1entities~1{entity_id}/get/x-rust",
    "value": {
      "example": "/// Get a business entity\n/// \n/// **Parameters:**\n/// \n/// - `entity_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_business_entities_get_entity_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiEntityResource = client\n        .business_entities()\n        .get_entity_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/business_entities/struct.BusinessEntities.html#method.get_entity_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1leads/post/x-rust",
    "value": {
      "example": "/// Create a sales lead\nasync fn example_sales_lead_post_creation() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .sales_lead()\n        .post_creation(&ramp_api::types::ApiSalesLeadCreateRequestBody {\n            business_info: Some(ramp_api::types::ApiSalesLeadBusinessRequestBody {\n                business_description: Some(\"some-string\".to_string()),\n                business_name_dba: \"some-string\".to_string(),\n                business_name_legal: \"some-string\".to_string(),\n                business_name_website: Some(\"some-string\".to_string()),\n                date_of_incorporation: Some(chrono::Utc::now().date_naive()),\n                ein_number: Some(\"some-string\".to_string()),\n                entity_type: Some(ramp_api::types::EntityType::SoleProprietorship),\n                estimated_monthly_spend: Some(\"some-string\".to_string()),\n                industry: Some(\"some-string\".to_string()),\n                industry_group: Some(\"some-string\".to_string()),\n                office_address: Some(ramp_api::types::ApiSalesLeadOfficeAddressRequestBody {\n                    office_apt_suite: Some(\"some-string\".to_string()),\n                    office_city: Some(\"some-string\".to_string()),\n                    office_country: Some(\"some-string\".to_string()),\n                    office_postal_code: Some(\"some-string\".to_string()),\n                    office_state: Some(\"some-string\".to_string()),\n                    office_street_address: Some(\"some-string\".to_string()),\n                }),\n                office_phone_number: Some(\"some-string\".to_string()),\n                sector: Some(\"some-string\".to_string()),\n                state_of_incorporation: Some(\"some-string\".to_string()),\n                sub_industry: Some(\"some-string\".to_string()),\n            }),\n            email: \"some-string\".to_string(),\n            external_id: \"some-string\".to_string(),\n            first_name: \"some-string\".to_string(),\n            last_name: \"some-string\".to_string(),\n            phone: Some(\"some-string\".to_string()),\n            redirect_uri: \"some-string\".to_string(),\n            source: ramp_api::types::Source::Quanta,\n            state: \"some-string\".to_string(),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/sales_lead/struct.SalesLead.html#method.post_creation"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1leads~1{sales_lead_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a sales lead\n/// \n/// **Parameters:**\n/// \n/// - `sales_lead_id: &'astr` (required)\nasync fn example_sales_lead_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Lead = client.sales_lead().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/sales_lead/struct.SalesLead.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1leads~1{sales_lead_id}~1upload_document/post/x-rust",
    "value": {
      "example": "/// Upload documents required by financing application process\n/// \n/// **Parameters:**\n/// \n/// - `sales_lead_id: &'astr` (required)\n/// \n/// **NOTE:** This operation is marked as deprecated.\nasync fn example_sales_lead_post_document_upload_deprecated() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Upload = client\n        .sales_lead()\n        .post_document_upload_deprecated(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/sales_lead/struct.SalesLead.html#method.post_document_upload_deprecated"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits/get/x-rust",
    "value": {
      "example": "/// List limits\n/// \n/// **Parameters:**\n/// \n/// - `display_name: Option<String>`: Filter by display name.\n/// - `entity_id: Option<uuid::Uuid>`: Filter for limits by associated business entity.\n/// - `is_terminated: Option<bool>`: Filter only for terminated spend limits.\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `spend_program_id: Option<uuid::Uuid>`: Filter for limits that are associated with the specified spend program\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `user_id: Option<uuid::Uuid>`: Filter for limits that are owned by the user.\nuse std::str::FromStr;\nasync fn example_limit_get_spend_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiSpendLimitResourceSchema = client\n        .limit()\n        .get_spend_list_with_pagination(\n            Some(\"some-string\".to_string()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.get_spend_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1deferred/post/x-rust",
    "value": {
      "example": "/// Create a limit\n/// \n/// Limit may either be created with spend program id (can provide display name and spending restrictions, cannot provide payment restrictions) or without (must provide display name, spending restrictions, and payment restrictions).\nuse std::str::FromStr;\nasync fn example_limit_post_spend_creation() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .limit()\n        .post_spend_creation(&ramp_api::types::ApiSpendLimitCreateRequestBody {\n            display_name: Some(\"some-string\".to_string()),\n            fulfillment: Some(ramp_api::types::CardFulfillmentRequestBody {\n                card_personalization: Some(ramp_api::types::CardPersonalizationRequestBody {\n                    text: Some(ramp_api::types::CardPersonalizationTextRequestBody {\n                        name_line_1: Some(ramp_api::types::CardPersonalizationNameLineRequestBody {\n                            value: Some(\"some-string\".to_string()),\n                        }),\n                        name_line_2: Some(ramp_api::types::CardPersonalizationNameLineRequestBody {\n                            value: Some(\"some-string\".to_string()),\n                        }),\n                    }),\n                }),\n                cardholder_uuid: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                shipping: Some(ramp_api::types::CardShippingRequestBody {\n                    method: Some(\"some-string\".to_string()),\n                    recipient_address: Some(ramp_api::types::CardShippingAddressRequestBody {\n                        address_1: \"some-string\".to_string(),\n                        address_2: Some(\"some-string\".to_string()),\n                        city: \"some-string\".to_string(),\n                        country: \"some-string\".to_string(),\n                        first_name: \"some-string\".to_string(),\n                        last_name: \"some-string\".to_string(),\n                        phone: Some(\"some-string\".to_string()),\n                        postal_code: \"some-string\".to_string(),\n                        state: Some(\"some-string\".to_string()),\n                    }),\n                    recipient_address_verification_state: Some(\n                        ramp_api::types::RecipientAddressVerificationState::Verified,\n                    ),\n                    return_address: Some(ramp_api::types::CardShippingAddressRequestBody {\n                        address_1: \"some-string\".to_string(),\n                        address_2: Some(\"some-string\".to_string()),\n                        city: \"some-string\".to_string(),\n                        country: \"some-string\".to_string(),\n                        first_name: \"some-string\".to_string(),\n                        last_name: \"some-string\".to_string(),\n                        phone: Some(\"some-string\".to_string()),\n                        postal_code: \"some-string\".to_string(),\n                        state: Some(\"some-string\".to_string()),\n                    }),\n                }),\n            }),\n            idempotency_key: \"some-string\".to_string(),\n            is_shareable: Some(false),\n            permitted_spend_types: Some(ramp_api::types::ApiPermittedSpendTypesRequestBody {\n                primary_card_enabled: false,\n                reimbursements_enabled: false,\n            }),\n            spend_program_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            spending_restrictions: Some(ramp_api::types::ApiSpendingRestrictionsRequestBody {\n                allowed_categories: Some(vec![4 as i64]),\n                allowed_vendors: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                blocked_categories: Some(vec![4 as i64]),\n                blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                blocked_vendors: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                interval: ramp_api::types::Interval::Yearly,\n                limit: ramp_api::types::CurrencyAmountRequestBody {\n                    amount: 4 as i64,\n                    currency_code: Some(\"some-string\".to_string()),\n                },\n                lock_date: Some(chrono::Utc::now()),\n                transaction_amount_limit: Some(ramp_api::types::CurrencyAmountRequestBody {\n                    amount: 4 as i64,\n                    currency_code: Some(\"some-string\".to_string()),\n                }),\n            }),\n            user_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.post_spend_creation"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1deferred~1status~1{task_id}/get/x-rust",
    "value": {
      "example": "/// Fetch deferred task status\n/// \n/// **Parameters:**\n/// \n/// - `task_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_limit_get_spend_deferred_task_status() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::SpendLimitDeferredTask = client\n        .limit()\n        .get_spend_deferred_task_status(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.get_spend_deferred_task_status"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1{spend_limit_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a limit\n/// \n/// **Parameters:**\n/// \n/// - `spend_limit_id: &'astr` (required)\nasync fn example_limit_get_spend_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Limit = client.limit().get_spend_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.get_spend_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1{spend_limit_id}/patch/x-rust",
    "value": {
      "example": "/// Update a limit\n/// \n/// **Parameters:**\n/// \n/// - `spend_limit_id: &'astr` (required)\nuse std::str::FromStr;\nasync fn example_limit_patch_spend_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Limit = client\n        .limit()\n        .patch_spend_resource(\n            \"some-string\",\n            &ramp_api::types::ApiSpendLimitUpdateRequestBody {\n                display_name: Some(\"some-string\".to_string()),\n                is_shareable: Some(false),\n                new_user_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                permitted_spend_types: Some(ramp_api::types::ApiPermittedSpendTypesRequestBody {\n                    primary_card_enabled: false,\n                    reimbursements_enabled: false,\n                }),\n                spend_program_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                spending_restrictions: Some(ramp_api::types::ApiSpendingRestrictionsRequestBody {\n                    allowed_categories: Some(vec![4 as i64]),\n                    allowed_vendors: Some(vec![uuid::Uuid::from_str(\n                        \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                    )?]),\n                    blocked_categories: Some(vec![4 as i64]),\n                    blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                    blocked_vendors: Some(vec![uuid::Uuid::from_str(\n                        \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                    )?]),\n                    interval: ramp_api::types::Interval::Yearly,\n                    limit: ramp_api::types::CurrencyAmountRequestBody {\n                        amount: 4 as i64,\n                        currency_code: Some(\"some-string\".to_string()),\n                    },\n                    lock_date: Some(chrono::Utc::now()),\n                    transaction_amount_limit: Some(ramp_api::types::CurrencyAmountRequestBody {\n                        amount: 4 as i64,\n                        currency_code: Some(\"some-string\".to_string()),\n                    }),\n                }),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.patch_spend_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1{spend_limit_id}~1add-users/put/x-rust",
    "value": {
      "example": "/// Perform a `PUT` request to `/developer/v1/limits/{spend_limit_id}/add-users`.\n/// \n/// **Parameters:**\n/// \n/// - `spend_limit_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_limit_put_spend_allocation_add_users() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Limit = client\n        .limit()\n        .put_spend_allocation_add_users(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiSpendLimitModifyUserAccessRequestBody {\n                user_ids: Some(vec![\"some-string\".to_string()]),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.put_spend_allocation_add_users"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1{spend_limit_id}~1deferred~1termination/post/x-rust",
    "value": {
      "example": "/// Terminate a limit\n/// \n/// This endpoint creates an async task to terminate a limit permanently.\n/// \n/// **Parameters:**\n/// \n/// - `spend_limit_id: &'astr` (required)\nasync fn example_limit_post_spend_termination_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .limit()\n        .post_spend_termination_resource(\n            \"some-string\",\n            &ramp_api::types::ApiSpendLimitDeferredUpdateRequestBody {\n                idempotency_key: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.post_spend_termination_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1{spend_limit_id}~1delete-users/delete/x-rust",
    "value": {
      "example": "/// Perform a `DELETE` request to `/developer/v1/limits/{spend_limit_id}/delete-users`.\n/// \n/// **Parameters:**\n/// \n/// - `spend_limit_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_limit_delete_spend_allocation_delete_users() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Limit = client\n        .limit()\n        .delete_spend_allocation_delete_users(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiSpendLimitModifyUserAccessRequestBody {\n                user_ids: Some(vec![\"some-string\".to_string()]),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.delete_spend_allocation_delete_users"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1{spend_limit_id}~1suspension/post/x-rust",
    "value": {
      "example": "/// Suspend a limit\n/// \n/// **Parameters:**\n/// \n/// - `spend_limit_id: &'astr` (required)\nasync fn example_limit_post_spend_suspension_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Limit = client\n        .limit()\n        .post_spend_suspension_resource(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.post_spend_suspension_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1limits~1{spend_limit_id}~1unsuspension/post/x-rust",
    "value": {
      "example": "/// Unsuspend a limit\n/// \n/// **Parameters:**\n/// \n/// - `spend_limit_id: &'astr` (required)\nasync fn example_limit_post_spend_unsuspension_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Limit = client\n        .limit()\n        .post_spend_unsuspension_resource(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/limit/struct.Limit.html#method.post_spend_unsuspension_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1locations/get/x-rust",
    "value": {
      "example": "/// List locations\n/// \n/// **Parameters:**\n/// \n/// - `entity_id: Option<uuid::Uuid>`: Filter by associated business entity.\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_location_get_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiLocationResourceSchema = client\n        .location()\n        .get_list_resource(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/location/struct.Location.html#method.get_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1locations/post/x-rust",
    "value": {
      "example": "/// Create a location\nuse std::str::FromStr;\nasync fn example_location_post_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Location = client\n        .location()\n        .post_list_resource(&ramp_api::types::ApiLocationCreateRequestBody {\n            entity_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            name: \"some-string\".to_string(),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/location/struct.Location.html#method.post_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1locations~1{location_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a location\n/// \n/// **Parameters:**\n/// \n/// - `location_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_location_get_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Location = client\n        .location()\n        .get_single_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/location/struct.Location.html#method.get_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1locations~1{location_id}/patch/x-rust",
    "value": {
      "example": "/// Update a location\n/// \n/// **Parameters:**\n/// \n/// - `location_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_location_patch_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Location = client\n        .location()\n        .patch_single_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiLocationUpdateRequestBody {\n                entity_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                name: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/location/struct.Location.html#method.patch_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1memos/get/x-rust",
    "value": {
      "example": "/// List memos\n/// \n/// **Parameters:**\n/// \n/// - `card_id: Option<uuid::Uuid>`\n/// - `department_id: Option<uuid::Uuid>`\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`\n/// - `location_id: Option<uuid::Uuid>`\n/// - `manager_id: Option<uuid::Uuid>`\n/// - `merchant_id: Option<uuid::Uuid>`\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`\n/// - `user_id: Option<uuid::Uuid>`\nuse std::str::FromStr;\nasync fn example_memo_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiMemoResourceSchema = client\n        .memo()\n        .get_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/memo/struct.Memo.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1memos~1{transaction_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a transaction memo\n/// \n/// **Parameters:**\n/// \n/// - `transaction_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_memo_get_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Memo = client\n        .memo()\n        .get_single_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/memo/struct.Memo.html#method.get_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1memos~1{transaction_id}/post/x-rust",
    "value": {
      "example": "/// Upload a new memo for a transaction\n/// \n/// **Parameters:**\n/// \n/// - `transaction_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_memo_post_create_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Memo = client\n        .memo()\n        .post_create_single_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiMemoCreateRequestBody {\n                is_memo_recurring: false,\n                memo: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/memo/struct.Memo.html#method.post_create_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1merchants/get/x-rust",
    "value": {
      "example": "/// List merchants\n/// \n/// **Parameters:**\n/// \n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `transaction_from_date: Option<chrono::DateTime<chrono::Utc>>`\n/// - `transaction_to_date: Option<chrono::DateTime<chrono::Utc>>`\nuse std::str::FromStr;\nasync fn example_merchant_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiMerchantResourceSchema = client\n        .merchant()\n        .get_list_with_pagination(\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/merchant/struct.Merchant.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipt-integrations~1opt-out/get/x-rust",
    "value": {
      "example": "/// List emails opted out of receipt integrations\nuse std::str::FromStr;\nasync fn example_receipt_integrations_get_opted_out_emails_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiReceiptIntegrationOptedOutEmailResource = client\n        .receipt_integrations()\n        .get_opted_out_emails_list_resource(\n            &ramp_api::types::ApiReceiptIntegrationOptedOutEmailResourceRequestBody {\n                email: Some(\"email@example.com\".to_string()),\n                id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt_integrations/struct.ReceiptIntegrations.html#method.get_opted_out_emails_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipt-integrations~1opt-out/post/x-rust",
    "value": {
      "example": "/// Add a new email to receipt integrations opt-out list\nasync fn example_receipt_integrations_post_opted_out_emails_list_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiReceiptIntegrationOptedOutEmailResource = client\n        .receipt_integrations()\n        .post_opted_out_emails_list_resource(\n            &ramp_api::types::ApiReceiptIntegrationOptedOutEmailCreateRequestBody {\n                business_id: 4 as i64,\n                email: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt_integrations/struct.ReceiptIntegrations.html#method.post_opted_out_emails_list_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipt-integrations~1opt-out~1{mailbox_opted_out_email_uuid}/delete/x-rust",
    "value": {
      "example": "/// Remove an email from receipt integration opt-out list\n/// \n/// Successful request will opt-in email to receipt integrations.\n/// \n/// **Parameters:**\n/// \n/// - `mailbox_opted_out_email_uuid: &'astr` (required)\nasync fn example_receipt_integrations_delete_opted_out_emails_delete_resource() -> anyhow::Result<()>\n{\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .receipt_integrations()\n        .delete_opted_out_emails_delete_resource(\"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt_integrations/struct.ReceiptIntegrations.html#method.delete_opted_out_emails_delete_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipts/get/x-rust",
    "value": {
      "example": "/// List receipts\n/// \n/// **Parameters:**\n/// \n/// - `created_after: Option<chrono::DateTime<chrono::Utc>>`: Filter for receipts that were created after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\n/// - `created_before: Option<chrono::DateTime<chrono::Utc>>`: Filter for receipts that were created before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for receipts related to transactions which occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for receipts related to transactions which occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\nuse std::str::FromStr;\nasync fn example_receipt_get_list() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiReceiptResourceSchema = client\n        .receipt()\n        .get_list(\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt/struct.Receipt.html#method.get_list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipts/post/x-rust",
    "value": {
      "example": "/// Upload a receipt\n/// \n/// Must specify a transaction to which the uploaded receipt will be attached.\n/// \n/// This endpoint accepts the\n/// [multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)\n/// input format.\n/// \n/// The receipt image raw data should be included in a section with\n/// \"Content-Disposition: attachment\", and the form data should be included\n/// in sections with \"Content-Disposition: form-data\".\nuse std::str::FromStr;\nasync fn example_receipt_post_upload() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::LightReceipt = client\n        .receipt()\n        .post_upload(&ramp_api::types::ApiReceiptUploadRequestBody {\n            idempotency_key: \"some-string\".to_string(),\n            transaction_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            user_id: uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt/struct.Receipt.html#method.post_upload"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1receipts~1{receipt_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a receipt\n/// \n/// **Parameters:**\n/// \n/// - `receipt_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_receipt_get_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Receipt = client\n        .receipt()\n        .get_single_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/receipt/struct.Receipt.html#method.get_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1reimbursements/get/x-rust",
    "value": {
      "example": "/// List reimbursements\n/// \n/// **Parameters:**\n/// \n/// - `entity_id: Option<uuid::Uuid>`: Filter for reimbursements by business entity.\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for reimbursements that happens after the given date.\n/// - `has_no_sync_commits: Option<bool>`: Filter for reimbursements that have not been synced to ERP systems yet.\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `sync_ready: Option<bool>`: Filter for reimbursements that are coded with accounting fields and ready to sync to ERP systems.\n/// - `synced_after: Option<chrono::DateTime<chrono::Utc>>`: Filter for reimbursements that have been synced after the given date.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for reimbursements that happens before the given date.\n/// - `trip_id: Option<uuid::Uuid>`: Filter for reimbursements that are associated with a trip.\n/// - `updated_after: Option<chrono::DateTime<chrono::Utc>>`: Filter for reimbursements that have been updated after the given date.\n/// - `user_id: Option<uuid::Uuid>`\nuse std::str::FromStr;\nasync fn example_reimbursement_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiReimbursementResourceSchema = client\n        .reimbursement()\n        .get_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(false),\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/reimbursement/struct.Reimbursement.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1reimbursements~1{reimbursement_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a reimbursement\n/// \n/// **Parameters:**\n/// \n/// - `reimbursement_id: &'astr` (required)\nasync fn example_reimbursement_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Reimbursement =\n        client.reimbursement().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/reimbursement/struct.Reimbursement.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1spend-programs/get/x-rust",
    "value": {
      "example": "/// List spend programs\n/// \n/// **Parameters:**\n/// \n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_spend_program_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiSpendProgramResourceSchema = client\n        .spend_program()\n        .get_resource(\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/spend_program/struct.SpendProgram.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1spend-programs/post/x-rust",
    "value": {
      "example": "/// Create a spend program\nuse std::str::FromStr;\nasync fn example_spend_program_post_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiSpendProgramResource = client\n        .spend_program()\n        .post_resource(&ramp_api::types::ApiSpendProgramCreateRequestBody {\n            description: \"some-string\".to_string(),\n            display_name: \"some-string\".to_string(),\n            icon: ramp_api::types::ApiSpendProgramCreateRequestBodyIcon::WellnessIcon,\n            is_shareable: false,\n            issuance_rules: Some(\n                ramp_api::types::ApiSpendProgramCreateIssuanceRulesRequestBody {\n                    automatic: Some(ramp_api::types::ApiSpendProgramIssuanceRulesRequestBody {\n                        applies_to_all: false,\n                        department_ids: Some(vec![uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?]),\n                        location_ids: Some(vec![uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?]),\n                        user_custom_field_ids: Some(vec![uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?]),\n                    }),\n                    requestable: Some(ramp_api::types::ApiSpendProgramIssuanceRulesRequestBody {\n                        applies_to_all: false,\n                        department_ids: Some(vec![uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?]),\n                        location_ids: Some(vec![uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?]),\n                        user_custom_field_ids: Some(vec![uuid::Uuid::from_str(\n                            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                        )?]),\n                    }),\n                },\n            ),\n            issue_physical_card_if_needed: false,\n            permitted_spend_types: ramp_api::types::ApiPermittedSpendTypesRequestBody {\n                primary_card_enabled: false,\n                reimbursements_enabled: false,\n            },\n            spending_restrictions: ramp_api::types::ApiSpendingRestrictionsRequestBody {\n                allowed_categories: Some(vec![4 as i64]),\n                allowed_vendors: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                blocked_categories: Some(vec![4 as i64]),\n                blocked_mcc_codes: Some(vec![\"some-string\".to_string()]),\n                blocked_vendors: Some(vec![uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?]),\n                interval: ramp_api::types::Interval::Yearly,\n                limit: ramp_api::types::CurrencyAmountRequestBody {\n                    amount: 4 as i64,\n                    currency_code: Some(\"some-string\".to_string()),\n                },\n                lock_date: Some(chrono::Utc::now()),\n                transaction_amount_limit: Some(ramp_api::types::CurrencyAmountRequestBody {\n                    amount: 4 as i64,\n                    currency_code: Some(\"some-string\".to_string()),\n                }),\n            },\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/spend_program/struct.SpendProgram.html#method.post_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1spend-programs~1{spend_program_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a spend program\n/// \n/// **Parameters:**\n/// \n/// - `spend_program_id: &'astr` (required)\nasync fn example_spend_program_get_single_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::ApiSpendProgramResource = client\n        .spend_program()\n        .get_single_resource(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/spend_program/struct.SpendProgram.html#method.get_single_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1statements/get/x-rust",
    "value": {
      "example": "/// List statements\n/// \n/// **Parameters:**\n/// \n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`: Shows only statements with an end_date on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`: Shows only statements with an end_date on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601. Defaults to current datetime if not specified.\nuse std::str::FromStr;\nasync fn example_statement_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiStatementResourceSchema = client\n        .statement()\n        .get_list_with_pagination(\n            Some(chrono::Utc::now()),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/statement/struct.Statement.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1statements~1{statement_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a statement\n/// \n/// **Parameters:**\n/// \n/// - `statement_id: &'astr` (required)\nasync fn example_statement_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Statement = client.statement().get_resource(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/statement/struct.Statement.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1token/post/x-rust",
    "value": {
      "example": "/// Create a token\n/// \n/// Token is specific to app whose client credentials are passed. Please refer to our [request authorization docs](https://docs.ramp.com/developer-api/v1/authorization) for usage.\n/// \n/// Expects two headers:\n/// - Authorization header formed from base-64 encoded client credentials as `Authorization: Basic <base64-encoded client_id:client_secret>`\n/// - `Content-Type: application/x-www-form-urlencoded`\n/// \n/// Required content body depends on authorization type method, as defined by `grant_type`.\n/// - Authorization Code Grant (`grant_type=authorization_code`): `grant_type`, `code`, and `redirect_uri` are required. Request must happen after requested scopes have been approved and exchanged for authorization code.\n/// - Refresh Token Grant (`grant_type=refresh_token`): `grant_type` and `refresh_token` are required. User must have previously obtained refresh token in authorization code flow.\n/// - Client Credentials Grant (`grant_type=client_credentials`): `grant_type` and `scope` are required.\nasync fn example_token_post() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::TokenResponse = client\n        .token()\n        .post(&ramp_api::types::TokenRequestBody {\n            code: Some(\"some-string\".to_string()),\n            grant_type: ramp_api::types::GrantType::RefreshToken,\n            redirect_uri: Some(\"some-string\".to_string()),\n            refresh_token: Some(\"some-string\".to_string()),\n            scope: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/token/struct.Token.html#method.post"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1token~1revoke/post/x-rust",
    "value": {
      "example": "/// Revoke an access or refresh token\n/// \n/// Expects an authorization header formed from base-64 encoded client credentials as `Authorization: Basic <base64-encoded client_id:client_secret>`.\n/// \n/// Content body must be form-encoded. Example:\n/// ```ignore\n/// curl \\\n/// -X POST \\\n/// -H \"Authorization: Basic <base64-encoded client_id:client_secret>\" \\\n/// -H \"Content-Type: application/x-www-form-urlencoded\" \\\n/// --data-urlencode 'token=$RAMP_API_TOKEN' \\\n/// 'https://api.ramp.com/developer/v1/token/revoke'\n/// ```ignore\nasync fn example_token_post_revoke() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .token()\n        .post_revoke(&ramp_api::types::TokenRevokeRequestBody {\n            token: \"some-string\".to_string(),\n            token_type_hint: Some(ramp_api::types::TokenTypeHint::RefreshToken),\n        })\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/token/struct.Token.html#method.post_revoke"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1transactions/get/x-rust",
    "value": {
      "example": "/// List transactions\n/// \n/// This endpoint supports filtering and ordering. Note that setting multiple ordering parameters is unsupported.\n/// \n/// **Parameters:**\n/// \n/// - `card_id: Option<uuid::Uuid>`: Filter by physical card.\n/// - `department_id: Option<uuid::Uuid>`: Filter by department.\n/// - `entity_id: Option<uuid::Uuid>`: Filter transactions by business entity.\n/// - `expense_policy_interaction_has_alert: Option<serde_json::Value>`\n/// - `expense_policy_interaction_needs_review: Option<bool>`: Filter for transactions that require expense policy review.\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for transactions that happens after the given date.\n/// - `has_no_sync_commits: Option<bool>`: Filter for transactions that have not been synced to ERP systems yet.\n/// - `include_merchant_data: Option<bool>`: Include all purchase data provided by the merchant.\n/// - `limit_id: Option<uuid::Uuid>`: Filter by limit.\n/// - `location_id: Option<uuid::Uuid>`: Filter by location.\n/// - `manager_id: Option<serde_json::Value>`\n/// - `max_amount: Option<f64>`: Filter for transactions that have smaller amount that the given amount. This is a U.S. Dollar denominated amount.\n/// - `merchant_id: Option<uuid::Uuid>`: Filter by merchant.\n/// - `min_amount: Option<f64>`: Filter for transactions that have larger amount that the given amount. This is a U.S. Dollar denominated amount.\n/// - `order_by_amount_asc: Option<bool>`: Sort transactions by amount in ascending order.\n/// - `order_by_amount_desc: Option<bool>`: Sort transactions by amount in descending order.\n/// - `order_by_date_asc: Option<bool>`: Sort transactions by date in ascending order.\n/// - `order_by_date_desc: Option<bool>`: Sort transactions by date in descending order.\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `requires_memo: Option<bool>`: Filters for transactions which require a memo, but do not have one. This can only be set to true.\n/// - `sk_category_id: Option<String>`: Filter by a Ramp category code (integer).\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `state: Option<crate::types::GetTransactionsCanonicalListWithPaginationState>`: Filter by transaction state.\n/// - `statement_id: Option<uuid::Uuid>`: Filter by statement.\n/// - `sync_ready: Option<bool>`: Filter for transactions that are coded with accounting fields and ready to sync to ERP systems.\n/// - `synced_after: Option<chrono::DateTime<chrono::Utc>>`: Filter for transactions that have been synced after the given date.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for transactions that happens before the given date.\n/// - `trip_id: Option<uuid::Uuid>`: Filter for trip ID.\n/// - `user_id: Option<uuid::Uuid>`: Filter by user.\nuse std::str::FromStr;\nasync fn example_transaction_get_transactions_canonical_list_with_pagination() -> anyhow::Result<()>\n{\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiTransactionCanonicalSchema = client\n        .transaction()\n        .get_transactions_canonical_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(serde_json::Value::String(\"some-string\".to_string())),\n            Some(false),\n            Some(chrono::Utc::now()),\n            Some(false),\n            Some(false),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(serde_json::Value::String(\"some-string\".to_string())),\n            Some(3.14 as f64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(3.14 as f64),\n            Some(false),\n            Some(false),\n            Some(false),\n            Some(false),\n            Some(4 as i64),\n            Some(false),\n            Some(\"some-string\".to_string()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(ramp_api::types::GetTransactionsCanonicalListWithPaginationState::PendingInitiation),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(false),\n            Some(chrono::Utc::now()),\n            Some(chrono::Utc::now()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/transaction/struct.Transaction.html#method.get_transactions_canonical_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1transactions~1{transaction_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a transaction\n/// \n/// **Parameters:**\n/// \n/// - `include_merchant_data: Option<bool>`: Include all purchase data provided by the merchant\n/// - `transaction_id: &'astr` (required)\nasync fn example_transaction_get_canonical_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Transaction = client\n        .transaction()\n        .get_canonical_resource(Some(false), \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/transaction/struct.Transaction.html#method.get_canonical_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1transfers/get/x-rust",
    "value": {
      "example": "/// List transfer payments\n/// \n/// **Parameters:**\n/// \n/// - `entity_id: Option<uuid::Uuid>`: Filter by business entity.\n/// - `from_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for transfers that occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\n/// - `has_no_sync_commits: Option<bool>`: Filter for transfers that have no sync commits.\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\n/// - `statement_id: Option<uuid::Uuid>`: Filter for transfers that shows up in the specified statement\n/// - `status: Option<crate::types::GetTransferListWithPaginationStatus>`: Filter by transfer state.\n/// - `to_date: Option<chrono::DateTime<chrono::Utc>>`: Filter for transfers that occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00\nuse std::str::FromStr;\nasync fn example_transfer_payment_get_transfer_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiTransferResourceSchema = client\n        .transfer_payment()\n        .get_transfer_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(chrono::Utc::now()),\n            Some(false),\n            Some(4 as i64),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(ramp_api::types::GetTransferListWithPaginationStatus::Unnecessary),\n            Some(chrono::Utc::now()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/transfer_payment/struct.TransferPayment.html#method.get_transfer_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1transfers~1{transfer_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a transfer payment\n/// \n/// **Parameters:**\n/// \n/// - `transfer_id: &'astr` (required)\nasync fn example_transfer_payment_get_transfer_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::Transfer = client\n        .transfer_payment()\n        .get_transfer_resource(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/transfer_payment/struct.TransferPayment.html#method.get_transfer_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users/get/x-rust",
    "value": {
      "example": "/// List users\n/// \n/// **Parameters:**\n/// \n/// - `department_id: Option<uuid::Uuid>`: filter by department\n/// - `email: Option<String>`: filter by email\n/// - `entity_id: Option<uuid::Uuid>`: filter by business entity\n/// - `location_id: Option<uuid::Uuid>`: filter by location\n/// - `page_size: Option<i64>`: The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.\n/// - `role: Option<crate::types::GetListWithPaginationRole>`: Filter by user role\n/// - `start: Option<uuid::Uuid>`: The ID of the last entity of the previous page, used for pagination to get the next page.\nuse std::str::FromStr;\nasync fn example_user_get_list_with_pagination() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::PaginatedResponseApiUserResourceSchema = client\n        .user()\n        .get_list_with_pagination(\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(\"email@example.com\".to_string()),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            Some(4 as i64),\n            Some(ramp_api::types::GetListWithPaginationRole::ItAdmin),\n            Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.get_list_with_pagination"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1deferred/post/x-rust",
    "value": {
      "example": "/// Create a user invite\n/// \n/// Call this endpoint to trigger an async task to send out a user invite.\nuse std::str::FromStr;\nasync fn example_user_post_creation_deferred_task() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::DeferredTaskUUID = client\n        .user()\n        .post_creation_deferred_task(&ramp_api::types::ApiUserCreateRequestBody {\n            department_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            direct_manager_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            email: \"email@example.com\".to_string(),\n            employee_id: Some(\"some-string\".to_string()),\n            first_name: \"some-string\".to_string(),\n            idempotency_key: Some(\"some-string\".to_string()),\n            last_name: \"some-string\".to_string(),\n            location_id: Some(uuid::Uuid::from_str(\n                \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            )?),\n            role: ramp_api::types::Role::ItAdmin,\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.post_creation_deferred_task"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1deferred~1status~1{task_id}/get/x-rust",
    "value": {
      "example": "/// Fetch deferred task status\n/// \n/// **Parameters:**\n/// \n/// - `task_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_user_get_deferred_task_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::UserDeferredTask = client\n        .user()\n        .get_deferred_task_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.get_deferred_task_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1{user_id}/delete/x-rust",
    "value": {
      "example": "/// Delete a user\n/// \n/// This action terminates the user's cards. This action is not reversible; if you prefer to transfer the user's cards, you must do this before making the DELETE request.\n/// If the user you are terminating is currently in an approval chain, then you could choose to either replace the user with his/her direct manager in the approval chain or specify a replacement.  You could also choose to do nothing but it may lead to errors.\n/// \n/// **Parameters:**\n/// \n/// - `user_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_user_delete_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .user()\n        .delete_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiUserDeleteOptionRequestBody {\n                reassign_approvals_behavior: Some(\n                    ramp_api::types::ReassignApprovalsBehavior::ReplaceWithUser,\n                ),\n                replacement_approver_user_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.delete_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1{user_id}/get/x-rust",
    "value": {
      "example": "/// Fetch a user\n/// \n/// **Parameters:**\n/// \n/// - `user_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_user_get_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: ramp_api::types::User = client\n        .user()\n        .get_resource(uuid::Uuid::from_str(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )?)\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.get_resource"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1developer~1v1~1users~1{user_id}/patch/x-rust",
    "value": {
      "example": "/// Update a user\n/// \n/// **Parameters:**\n/// \n/// - `user_id: uuid::Uuid` (required)\nuse std::str::FromStr;\nasync fn example_user_patch_resource() -> anyhow::Result<()> {\n    let client =\n        ramp_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .user()\n        .patch_resource(\n            uuid::Uuid::from_str(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")?,\n            &ramp_api::types::ApiUserUpdateRequestBody {\n                auto_promote: Some(false),\n                department_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                direct_manager_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                employee_id: Some(\"some-string\".to_string()),\n                first_name: Some(\"some-string\".to_string()),\n                is_manager: Some(false),\n                last_name: Some(\"some-string\".to_string()),\n                location_id: Some(uuid::Uuid::from_str(\n                    \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n                )?),\n                role: Some(ramp_api::types::ApiUserUpdateRequestBodyRole::ItAdmin),\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/ramp-api/latest/ramp-api/user/struct.User.html#method.patch_resource"
    }
  }
]