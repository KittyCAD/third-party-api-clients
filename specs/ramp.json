{
  "servers": [
    {
      "description": "Production",
      "url": "https://api.ramp.com"
    }
  ],
  "paths": {
    "/developer/v1/accounting/accounts": {
      "get": {
        "operationId": "get_gl_account_list_resource",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_synced",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiAccountingGLAccountResourceSchema"
                }
              }
            },
            "description": "Accounts"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "List general ledger accounts",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "description": "You can upload up to 500 general ledger accounts in an all-or-nothing fashion. If a general ledger accounts within a batch is malformed or violates a database constraint, the entire batch containing that account will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the general ledger accounts that you are trying to upload do not already exist on Ramp.\nIf a general ledger account is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/accounts/{id} endpoint instead.",
        "operationId": "post_gl_account_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingGLAccountUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingTrackingCategoryUploadResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Upload general ledger accounts",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/accounting/accounts/{gl_account_id}": {
      "delete": {
        "operationId": "delete_gl_account_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete a general ledger account",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "get": {
        "operationId": "get_gl_account_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralLedgerAccount"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch a general ledger account",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "gl_account_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "description": "This endpoint can be used to update the name or code of a GL account;\nIt can also be used to associate a general ledger account with a list of subsidiaries.",
        "operationId": "patch_gl_account_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingGLAccountUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralLedgerAccount"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Update a general ledger account",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/accounting/connection": {
      "delete": {
        "operationId": "delete_accounting_connection_resouce",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "404": {
            "description": "raises NotFound"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete an accounting connection",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "get": {
        "operationId": "get_accounting_connection_resouce",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingProvider"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "description": "raises NotFound"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch an accounting connection",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "description": "A connection is required in order to use our accounting API functionality.\n\nThis endpoint provides the option to reactivate a deleted accounting connection\ninstead of creating a brand-new connection if the user passes the \"reactivate\" parameter.\nThis is useful if the user registered accounting fields in a previous connection\nand doesn't want to re-register those fields again.",
        "operationId": "post_accounting_connection_resouce",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingProviderAccessCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingProvider"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Register a new accounting connection",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/accounting/field-options": {
      "get": {
        "operationId": "get_custom_field_option_list_resource",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "field_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiAccountingCustomFieldOptionResourceSchema"
                }
              }
            },
            "description": "FieldOptions"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "List options for a given custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "description": "You can upload up to 500 new field options for a given custom accounting field in an all-or-nothing fashion. If a field option within a batch is malformed or violates a database constraint, the entire batch containing that field option will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the field options that you are trying to upload do not already exist on Ramp.\nIf a field option is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/field-options/{id} endpoint instead.",
        "operationId": "post_custom_field_option_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingCustomFieldOptionUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingTrackingCategoryUploadResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Upload new options",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/accounting/field-options/{field_option_id}": {
      "delete": {
        "operationId": "delete_custom_field_option_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete a custom accounting field option",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "get": {
        "operationId": "get_custom_field_option_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOption"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch a custom accounting field option",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "field_option_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_custom_field_option_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingCustomFieldOptionUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOption"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Update a custom accounting field option",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/accounting/fields": {
      "get": {
        "operationId": "get_custom_field_list_resource",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiAccountingCustomFieldResourceSchema"
                }
              }
            },
            "description": "Fields"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "List custom accounting fields",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "description": "If an custom field with the same id already exist on Ramp, then that existing one will be returned instead of creating a new one; If the existing custom field is inactive, it will be reactivated.\nIf you want to update the existing custom field, please use the PATCH developer/v1/accounting/fields/{id} endpoint instead.",
        "operationId": "post_custom_field_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingCustomFieldCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingCustomFieldResource"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Create a new custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/accounting/fields/{field_id}": {
      "delete": {
        "operationId": "delete_custom_field_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete a custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "get": {
        "operationId": "get_custom_field_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingCustomFieldResource"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch a custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "field_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_custom_field_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingCustomFieldUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingCustomFieldResource"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Update a custom accounting field",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/accounting/syncs": {
      "post": {
        "description": "This endpoint allows customers to notify Ramp of a list of sync results.\nAn idempotency key is required to ensure that subsequent requests are properly handled.",
        "operationId": "post_sync_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingSyncCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Post sync status",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false
      }
    },
    "/developer/v1/accounting/vendors": {
      "get": {
        "operationId": "get_vendor_list_resource",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "is_synced",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiAccountingVendorResourceSchema"
                }
              }
            },
            "description": "Vendors"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "List vendors",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "description": "You can upload up to 500 vendors in an all-or-nothing fashion. If a vendors within a batch is malformed or violates a database constraint, the entire batch containing that vendors will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the subsidiaries that you are trying to upload do not already exist on Ramp.\nIf a vendors is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/vendors/{id} endpoint instead.",
        "operationId": "post_vendor_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingVendorUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAccountingTrackingCategoryUploadResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Upload vendors",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/accounting/vendors/{vendor_id}": {
      "delete": {
        "operationId": "delete_vendor_resource",
        "responses": {
          "204": {
            "description": "Success, No content"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Delete a vendor",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "get": {
        "operationId": "get_vendor_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorAccount"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:read"]
          }
        ],
        "summary": "Fetch a vendor",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "vendor_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_vendor_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAccountingVendorUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorAccount"
                }
              }
            },
            "description": "Update vendor"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["accounting:write"]
          }
        ],
        "summary": "Update a vendor",
        "tags": ["Accounting"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/bills": {
      "get": {
        "operationId": "get_bill_list_with_pagination",
        "parameters": [
          {
            "description": "Filter bills by entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "List bills of the provided payment method.",
            "in": "query",
            "name": "payment_method",
            "required": false,
            "schema": {
              "enum": [
                "ACH",
                "CARD",
                "CHECK",
                "INTERNATIONAL",
                "ONE_TIME_CARD",
                "ONE_TIME_CARD_DELIVERY",
                "PAID_MANUALLY",
                "SWIFT",
                "UNSPECIFIED",
                "VENDOR_CREDIT"
              ],
              "type": "string"
            }
          },
          {
            "description": "List bills of the provided payment status.",
            "in": "query",
            "name": "payment_status",
            "required": false,
            "schema": {
              "enum": ["OPEN", "PAID"],
              "type": "string"
            }
          },
          {
            "description": "Only show bills that are ready to sync to ERP, if set to True",
            "in": "query",
            "name": "sync_ready",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Shows only bills with a due_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_due_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a due_at on or beofre this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_due_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a issued_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_issued_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only bills with a issued_at on or beofre this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "to_issued_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiBillResourceSchema"
                }
              }
            },
            "description": "Bill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:read"]
          }
        ],
        "summary": "List bills",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/bills/{bill_id}": {
      "get": {
        "operationId": "get_bill_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bill"
                }
              }
            },
            "description": "Bill"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["bills:read"]
          }
        ],
        "summary": "Fetch a bill",
        "tags": ["Bill"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "bill_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/business": {
      "get": {
        "operationId": "get_business_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Business"
                }
              }
            },
            "description": "Get business information"
          },
          "400": {
            "description": "raises BusinessInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["business:read"]
          }
        ],
        "summary": "Fetch the company information",
        "tags": ["Business"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/business/balance": {
      "get": {
        "operationId": "get_business_balance_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessBalance"
                }
              }
            },
            "description": "Get business balance information"
          }
        },
        "security": [
          {
            "oauth2": ["business:read"]
          }
        ],
        "summary": "Fetch the company balance information",
        "tags": ["Business"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/card-programs": {
      "get": {
        "deprecated": true,
        "operationId": "get_card_program_list_deprecated",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiCardProgramResourceSchema"
                }
              }
            },
            "description": "CardPrograms"
          }
        },
        "security": [
          {
            "oauth2": ["card_programs:read"]
          }
        ],
        "summary": "List card programs",
        "tags": ["Card Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-uses-read-replica": true
      },
      "post": {
        "deprecated": true,
        "operationId": "post_card_program_list_deprecated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardProgramCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCardProgramResource"
                }
              }
            },
            "description": "Create Card Program"
          }
        },
        "security": [
          {
            "oauth2": ["card_programs:write"]
          }
        ],
        "summary": "Create a card program",
        "tags": ["Card Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/card-programs/{card_program_id}": {
      "get": {
        "deprecated": true,
        "operationId": "get_card_program_resource_deprecated",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCardProgramResource"
                }
              }
            },
            "description": "Get single card program"
          }
        },
        "security": [
          {
            "oauth2": ["card_programs:read"]
          }
        ],
        "summary": "Fetch a card program",
        "tags": ["Card Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "card_program_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/cards": {
      "get": {
        "operationId": "get_card_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by card owner.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by card program.",
            "in": "query",
            "name": "card_program_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by display name.",
            "in": "query",
            "name": "display_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter only for activated cards. Defaults to True if not specified",
            "in": "query",
            "name": "is_activated",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filter only for terminated cards. Defaults to False if not specified",
            "in": "query",
            "name": "is_terminated",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiCardResourceSchema"
                }
              }
            },
            "description": "Cards"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:read"]
          }
        ],
        "summary": "List cards",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/cards/deferred/physical": {
      "post": {
        "description": "Call this endpoint to create an async task to request for new physical card.",
        "operationId": "post_physical_card",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPhysicalRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Create a physical card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/cards/deferred/status/{task_id}": {
      "get": {
        "operationId": "get_card_deferred_task_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDeferredTask"
                }
              }
            },
            "description": "Card deferred task status"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Fetch deferred task status",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "task_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/cards/deferred/virtual": {
      "post": {
        "description": "Call this endpoint to create an async task to request for new virtual card.",
        "operationId": "post_virtual_card",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Create a virtual card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/cards/{card_id}": {
      "get": {
        "operationId": "get_card_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            },
            "description": "Get single card"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:read"]
          }
        ],
        "summary": "Fetch a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "card_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "description": "This endpoint allow you update the owner, display name, and spend restrictions of a card.",
        "operationId": "patch_card_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Update a single card"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Update a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/cards/{card_id}/deferred/suspension": {
      "parameters": [
        {
          "in": "path",
          "name": "card_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "Call this endpoint to create an async task to suspend a card so that it is locked from use. The suspension is revertable.",
        "operationId": "post_card_suspension_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardDeferredUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Suspend a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/cards/{card_id}/deferred/termination": {
      "parameters": [
        {
          "in": "path",
          "name": "card_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "Call this endpoint to create an async task to terminate a card permanently. Please note that this action is irreversible.",
        "operationId": "post_card_termination_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardDeferredUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Terminate a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/cards/{card_id}/deferred/unsuspension": {
      "parameters": [
        {
          "in": "path",
          "name": "card_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "Call this endpoint to create an async task to remove a card's suspension so that it may be used again.",
        "operationId": "post_card_unsuspension_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCardDeferredUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          },
          "400": {
            "description": "raises CardInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cards:write"]
          }
        ],
        "summary": "Unlock a card",
        "tags": ["Card"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/cashbacks": {
      "get": {
        "operationId": "get_cashback_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by statement.",
            "in": "query",
            "name": "statement_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for cashback payments that are ready to be synced. These have no pending syncs and are completed",
            "in": "query",
            "name": "sync_ready",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter for cashback payments that occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for cashback payments that occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiCashbackResourceSchema"
                }
              }
            },
            "description": "Cashback"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cashbacks:read"]
          }
        ],
        "summary": "List cashback payments",
        "tags": ["Cashback"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/cashbacks/{cashback_id}": {
      "get": {
        "operationId": "get_cashback_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cashback"
                }
              }
            },
            "description": "Cashback"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["cashbacks:read"]
          }
        ],
        "summary": "Fetch a cashback payment",
        "tags": ["Cashback"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "cashback_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/departments": {
      "get": {
        "operationId": "get_department_list_with_pagination",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiDepartmentResourceSchema"
                }
              }
            },
            "description": "Departments"
          },
          "400": {
            "description": "raises DepartmentInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["departments:read"]
          }
        ],
        "summary": "List departments",
        "tags": ["Department"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "operationId": "post_department_list_with_pagination",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDepartmentCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            },
            "description": "Department"
          },
          "400": {
            "description": "raises DepartmentInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["departments:write"]
          }
        ],
        "summary": "Create a department",
        "tags": ["Department"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/departments/{department_id}": {
      "get": {
        "operationId": "get_department_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            },
            "description": "Department"
          }
        },
        "security": [
          {
            "oauth2": ["departments:read"]
          }
        ],
        "summary": "Fetch a department",
        "tags": ["Department"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "department_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_department_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDepartmentUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            },
            "description": "Department"
          }
        },
        "security": [
          {
            "oauth2": ["departments:write"]
          }
        ],
        "summary": "Update a department",
        "tags": ["Department"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/entities": {
      "get": {
        "operationId": "get_entity_list_with_pagination",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entity_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_primary",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntityResource"
                }
              }
            },
            "description": "Entities"
          }
        },
        "security": [
          {
            "oauth2": ["entities:read"]
          }
        ],
        "summary": "List business entities",
        "tags": ["Business Entities"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/entities/{entity_id}": {
      "get": {
        "operationId": "get_entity_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntityResource"
                }
              }
            },
            "description": "Entity"
          }
        },
        "security": [
          {
            "oauth2": ["entities:read"]
          }
        ],
        "summary": "Get a business entity",
        "tags": ["Business Entities"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "entity_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/leads": {
      "post": {
        "operationId": "post_sales_lead_creation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSalesLeadCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a single sales lead"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "oauth2": ["leads:write"]
          }
        ],
        "summary": "Create a sales lead",
        "tags": ["SalesLead"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false
      }
    },
    "/developer/v1/leads/{sales_lead_id}": {
      "get": {
        "operationId": "get_sales_lead_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lead"
                }
              }
            },
            "description": "Sales Lead"
          },
          "404": {
            "description": "Sales lead not found"
          }
        },
        "security": [
          {
            "oauth2": ["leads:read"]
          }
        ],
        "summary": "Fetch a sales lead",
        "tags": ["SalesLead"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "sales_lead_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/leads/{sales_lead_id}/upload_document": {
      "parameters": [
        {
          "in": "path",
          "name": "sales_lead_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "deprecated": true,
        "operationId": "post_sales_lead_document_upload_deprecated",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            },
            "description": "Document uploaded"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "oauth2": ["leads:write"]
          }
        ],
        "summary": "Upload documents required by financing application process",
        "tags": ["SalesLead"],
        "x-annotatedRequest": false,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/limits": {
      "get": {
        "operationId": "get_spend_limit_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by display name.",
            "in": "query",
            "name": "display_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for limits by associated business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for limits that are associated with the specified spend program",
            "in": "query",
            "name": "spend_program_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for limits that are owned by the user.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter only for terminated spend limits.",
            "in": "query",
            "name": "is_terminated",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiSpendLimitResourceSchema"
                }
              }
            },
            "description": "SpendLimits"
          }
        },
        "security": [
          {
            "oauth2": ["limits:read"]
          }
        ],
        "summary": "List limits",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/limits/deferred": {
      "post": {
        "description": "Limit may either be created with spend program id (can provide display name and spending restrictions, cannot provide payment restrictions) or without (must provide display name, spending restrictions, and payment restrictions).",
        "operationId": "post_spend_limit_creation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Create a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/limits/deferred/status/{task_id}": {
      "get": {
        "operationId": "get_spend_limit_deferred_task_status",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpendLimitDeferredTask"
                }
              }
            },
            "description": "Limit deferred task status"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Fetch deferred task status",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "task_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/limits/{spend_limit_id}": {
      "get": {
        "operationId": "get_spend_limit_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/limit"
                }
              }
            },
            "description": "Get a limit"
          }
        },
        "security": [
          {
            "oauth2": ["limits:read"]
          }
        ],
        "summary": "Fetch a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_spend_limit_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/limit"
                }
              }
            },
            "description": "Update a limit"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Update a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/limits/{spend_limit_id}/add-users": {
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "put": {
        "operationId": "put_spend_allocation_add_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitModifyUserAccessRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/limit"
                }
              }
            },
            "description": "Response indicating successful addition of users to the shared limit."
          },
          "403": {
            "description": "limit not shareable"
          },
          "404": {
            "description": "limit not found"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/limits/{spend_limit_id}/deferred/termination": {
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "description": "This endpoint creates an async task to terminate a limit permanently.",
        "operationId": "post_spend_limit_termination_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitDeferredUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Terminate a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/limits/{spend_limit_id}/delete-users": {
      "delete": {
        "operationId": "delete_spend_allocation_delete_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendLimitModifyUserAccessRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/limit"
                }
              }
            },
            "description": "Response indicating successful removal of users of the shared limit."
          },
          "403": {
            "description": "limit not shareable"
          },
          "404": {
            "description": "limit not found"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/limits/{spend_limit_id}/suspension": {
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_spend_limit_suspension_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/limit"
                }
              }
            },
            "description": "Response indicating successful suspension of the limit."
          },
          "404": {
            "description": "limit not found"
          },
          "422": {
            "description": "Invalid spend_limit_id"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Suspend a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/limits/{spend_limit_id}/unsuspension": {
      "parameters": [
        {
          "in": "path",
          "name": "spend_limit_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_spend_limit_unsuspension_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/limit"
                }
              }
            },
            "description": "Response indicating successful unsuspension of the limit."
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["limits:write"]
          }
        ],
        "summary": "Unsuspend a limit",
        "tags": ["Limit"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/locations": {
      "get": {
        "operationId": "get_location_list_resource",
        "parameters": [
          {
            "description": "Filter by associated business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiLocationResourceSchema"
                }
              }
            },
            "description": "Locations"
          },
          "400": {
            "description": "raises LocationInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["locations:read"]
          }
        ],
        "summary": "List locations",
        "tags": ["Location"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "operationId": "post_location_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            },
            "description": "Location"
          },
          "400": {
            "description": "raises LocationInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["locations:write"]
          }
        ],
        "summary": "Create a location",
        "tags": ["Location"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/locations/{location_id}": {
      "get": {
        "operationId": "get_location_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            },
            "description": "Location"
          }
        },
        "security": [
          {
            "oauth2": ["locations:read"]
          }
        ],
        "summary": "Fetch a location",
        "tags": ["Location"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "location_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_location_single_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLocationUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            },
            "description": "Location"
          }
        },
        "security": [
          {
            "oauth2": ["locations:write"]
          }
        ],
        "summary": "Update a location",
        "tags": ["Location"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/memos": {
      "get": {
        "operationId": "get_memo_list_with_pagination",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "card_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "department_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "location_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "manager_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiMemoResourceSchema"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "raises MemoInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["memos:read"]
          }
        ],
        "summary": "List memos",
        "tags": ["Memo"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/memos/{transaction_id}": {
      "get": {
        "operationId": "get_memo_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memo"
                }
              }
            },
            "description": "Memo"
          },
          "400": {
            "description": "raises MemoInvalidInput"
          },
          "404": {
            "description": "raises NotFound"
          }
        },
        "security": [
          {
            "oauth2": ["memos:read"]
          }
        ],
        "summary": "Fetch a transaction memo",
        "tags": ["Memo"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-uses-read-replica": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "transaction_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "post": {
        "operationId": "post_memo_create_single_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMemoCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memo"
                }
              }
            },
            "description": "Memo"
          },
          "400": {
            "description": "raises MemoInvalidInput"
          },
          "404": {
            "description": "raises NotFound"
          }
        },
        "security": [
          {
            "oauth2": ["memos:write"]
          }
        ],
        "summary": "Upload a new memo for a transaction",
        "tags": ["Memo"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/merchants": {
      "get": {
        "operationId": "get_merchant_list_with_pagination",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "transaction_from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "transaction_to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiMerchantResourceSchema"
                }
              }
            },
            "description": "Merchants"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["merchants:read"]
          }
        ],
        "summary": "List merchants",
        "tags": ["Merchant"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/receipt-integrations/opt-out": {
      "get": {
        "operationId": "get_receipt_integration_opted_out_emails_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReceiptIntegrationOptedOutEmailResourceRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReceiptIntegrationOptedOutEmailResource"
                }
              }
            },
            "description": "MailboxOptedOutEmail"
          }
        },
        "security": [
          {
            "oauth2": ["receipt_integrations:read"]
          }
        ],
        "summary": "List emails opted out of receipt integrations",
        "tags": ["Receipt Integrations"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "operationId": "post_receipt_integration_opted_out_emails_list_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReceiptIntegrationOptedOutEmailCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReceiptIntegrationOptedOutEmailResource"
                }
              }
            },
            "description": "MailboxOptedOutEmail"
          }
        },
        "security": [
          {
            "oauth2": ["receipt_integrations:write"]
          }
        ],
        "summary": "Add a new email to receipt integrations opt-out list",
        "tags": ["Receipt Integrations"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/receipt-integrations/opt-out/{mailbox_opted_out_email_uuid}": {
      "delete": {
        "description": "Successful request will opt-in email to receipt integrations.",
        "operationId": "delete_receipt_integration_opted_out_emails_delete_resource",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": ["receipt_integrations:write"]
          }
        ],
        "summary": "Remove an email from receipt integration opt-out list",
        "tags": ["Receipt Integrations"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false
      },
      "parameters": [
        {
          "in": "path",
          "name": "mailbox_opted_out_email_uuid",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/receipts": {
      "get": {
        "operationId": "get_receipt_list",
        "parameters": [
          {
            "description": "Filter for receipts related to transactions which occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for receipts related to transactions which occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for receipts that were created after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for receipts that were created before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiReceiptResourceSchema"
                }
              }
            },
            "description": "Receipts"
          },
          "400": {
            "description": "raises ReceiptInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["receipts:read"]
          }
        ],
        "summary": "List receipts",
        "tags": ["Receipt"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "description": "Must specify a transaction to which the uploaded receipt will be attached.\n\nThis endpoint accepts the\n[multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)\ninput format.\n\nThe receipt image raw data should be included in a section with\n\"Content-Disposition: attachment\", and the form data should be included\nin sections with \"Content-Disposition: form-data\".",
        "operationId": "post_receipt_upload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReceiptUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Light Receipt"
                }
              }
            },
            "description": "Uploaded receipt"
          },
          "400": {
            "description": "raises ReceiptInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["receipts:write"]
          }
        ],
        "summary": "Upload a receipt",
        "tags": ["Receipt"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/receipts/{receipt_id}": {
      "get": {
        "operationId": "get_receipt_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Receipt"
                }
              }
            },
            "description": "Receipt"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": ["receipts:read"]
          }
        ],
        "summary": "Fetch a receipt",
        "tags": ["Receipt"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "receipt_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/reimbursements": {
      "get": {
        "operationId": "get_reimbursement_list_with_pagination",
        "parameters": [
          {
            "description": "Filter for reimbursements by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for reimbursements that are associated with a trip.",
            "in": "query",
            "name": "trip_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for reimbursements that are coded with accounting fields and ready to sync to ERP systems.",
            "in": "query",
            "name": "sync_ready",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter for reimbursements that happens after the given date.",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for reimbursements that happens before the given date.",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for reimbursements that have been synced after the given date.",
            "in": "query",
            "name": "synced_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for reimbursements that have been updated after the given date.",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for reimbursements that have not been synced to ERP systems yet.",
            "in": "query",
            "name": "has_no_sync_commits",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiReimbursementResourceSchema"
                }
              }
            },
            "description": "Reimbursements"
          }
        },
        "security": [
          {
            "oauth2": ["reimbursements:read"]
          }
        ],
        "summary": "List reimbursements",
        "tags": ["Reimbursement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/reimbursements/{reimbursement_id}": {
      "get": {
        "operationId": "get_reimbursement_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reimbursement"
                }
              }
            },
            "description": "Reimbursement"
          }
        },
        "security": [
          {
            "oauth2": ["reimbursements:read"]
          }
        ],
        "summary": "Fetch a reimbursement",
        "tags": ["Reimbursement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "reimbursement_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/spend-programs": {
      "get": {
        "operationId": "get_spend_program_resource",
        "parameters": [
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiSpendProgramResourceSchema"
                }
              }
            },
            "description": "SpendPrograms"
          }
        },
        "security": [
          {
            "oauth2": ["spend_programs:read"]
          }
        ],
        "summary": "List spend programs",
        "tags": ["Spend Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "post": {
        "operationId": "post_spend_program_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSpendProgramCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpendProgramResource"
                }
              }
            },
            "description": "Create Spend Program"
          }
        },
        "security": [
          {
            "oauth2": ["spend_programs:write"]
          }
        ],
        "summary": "Create a spend program",
        "tags": ["Spend Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/spend-programs/{spend_program_id}": {
      "get": {
        "operationId": "get_spend_program_single_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSpendProgramResource"
                }
              }
            },
            "description": "Get a spend program"
          }
        },
        "security": [
          {
            "oauth2": ["spend_programs:read"]
          }
        ],
        "summary": "Fetch a spend program",
        "tags": ["Spend Program"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "spend_program_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/statements": {
      "get": {
        "operationId": "get_statement_list_with_pagination",
        "parameters": [
          {
            "description": "Shows only statements with an end_date on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "default": "1970-01-01T00:00:00+00:00",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Shows only statements with an end_date on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601. Defaults to current datetime if not specified.",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiStatementResourceSchema"
                }
              }
            },
            "description": "Statement"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["statements:read"]
          }
        ],
        "summary": "List statements",
        "tags": ["Statement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/statements/{statement_id}": {
      "get": {
        "operationId": "get_statement_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statement"
                }
              }
            },
            "description": "Statement"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["statements:read"]
          }
        ],
        "summary": "Fetch a statement",
        "tags": ["Statement"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "statement_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/token": {
      "post": {
        "description": "Token is specific to app whose client credentials are passed. Please refer to our [request authorization docs](https://docs.ramp.com/developer-api/v1/authorization) for usage.\n\nExpects two headers:\n- Authorization header formed from base-64 encoded client credentials as `Authorization: Basic <base64-encoded client_id:client_secret>`\n- `Content-Type: application/x-www-form-urlencoded`\n\nRequired content body depends on authorization type method, as defined by `grant_type`.\n- Authorization Code Grant (`grant_type=authorization_code`): `grant_type`, `code`, and `redirect_uri` are required. Request must happen after requested scopes have been approved and exchanged for authorization code.\n- Refresh Token Grant (`grant_type=refresh_token`): `grant_type` and `refresh_token` are required. User must have previously obtained refresh token in authorization code flow.\n- Client Credentials Grant (`grant_type=client_credentials`): `grant_type` and `scope` are required.",
        "operationId": "post_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "security": [],
        "summary": "Create a token",
        "tags": ["Token"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/token/revoke": {
      "post": {
        "description": "Expects an authorization header formed from base-64 encoded client credentials as `Authorization: Basic <base64-encoded client_id:client_secret>`.\n\nContent body must be form-encoded. Example:\n```\ncurl \\\n    -X POST \\\n    -H \"Authorization: Basic <base64-encoded client_id:client_secret>\" \\\n    -H \"Content-Type: application/x-www-form-urlencoded\" \\\n    --data-urlencode 'token=$RAMP_API_TOKEN' \\\n    'https://api.ramp.com/developer/v1/token/revoke'\n```",
        "operationId": "post_revoke_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRevokeRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Revoked token successfully"
          }
        },
        "security": [],
        "summary": "Revoke an access or refresh token",
        "tags": ["Token"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": false
      }
    },
    "/developer/v1/transactions": {
      "get": {
        "description": "This endpoint supports filtering and ordering. Note that setting multiple ordering parameters is unsupported.",
        "operationId": "get_transactions_canonical_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by a Ramp category code (integer).",
            "in": "query",
            "name": "sk_category_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by department.",
            "in": "query",
            "name": "department_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by limit.",
            "in": "query",
            "name": "limit_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by location.",
            "in": "query",
            "name": "location_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by merchant.",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by physical card.",
            "in": "query",
            "name": "card_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by statement.",
            "in": "query",
            "name": "statement_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by transaction state.",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "CLEARED",
                "COMPLETION",
                "DECLINED",
                "ERROR",
                "PENDING",
                "PENDING_INITIATION"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by user.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions that are coded with accounting fields and ready to sync to ERP systems.",
            "in": "query",
            "name": "sync_ready",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter for transactions that happens after the given date.",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions that happens before the given date.",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions that have been synced after the given date.",
            "in": "query",
            "name": "synced_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions that have larger amount that the given amount. This is a U.S. Dollar denominated amount.",
            "in": "query",
            "name": "min_amount",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "number"
                }
              ]
            }
          },
          {
            "description": "Filter for transactions that have not been synced to ERP systems yet.",
            "in": "query",
            "name": "has_no_sync_commits",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter for transactions that have smaller amount that the given amount. This is a U.S. Dollar denominated amount.",
            "in": "query",
            "name": "max_amount",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "number"
                }
              ]
            }
          },
          {
            "description": "Filter for transactions that require expense policy review.",
            "in": "query",
            "name": "expense_policy_interaction_needs_review",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter for trip ID.",
            "in": "query",
            "name": "trip_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter transactions by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filters for transactions which require a memo, but do not have one. This can only be set to true.",
            "in": "query",
            "name": "requires_memo",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include all purchase data provided by the merchant.",
            "in": "query",
            "name": "include_merchant_data",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort transactions by amount in ascending order.",
            "in": "query",
            "name": "order_by_amount_asc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort transactions by amount in descending order.",
            "in": "query",
            "name": "order_by_amount_desc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort transactions by date in ascending order.",
            "in": "query",
            "name": "order_by_date_asc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Sort transactions by date in descending order.",
            "in": "query",
            "name": "order_by_date_desc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "expense_policy_interaction_has_alert",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "manager_id",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiTransactionCanonicalSchema"
                }
              }
            },
            "description": "Transactions"
          },
          "400": {
            "description": "raises TransactionInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["transactions:read"]
          }
        ],
        "summary": "List transactions",
        "tags": ["Transaction"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true,
        "x-uses-read-replica": true
      }
    },
    "/developer/v1/transactions/{transaction_id}": {
      "get": {
        "operationId": "get_transaction_canonical_resource",
        "parameters": [
          {
            "description": "Include all purchase data provided by the merchant",
            "in": "query",
            "name": "include_merchant_data",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "Transaction"
          },
          "400": {
            "description": "raises TransactionInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["transactions:read"]
          }
        ],
        "summary": "Fetch a transaction",
        "tags": ["Transaction"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "transaction_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/transfers": {
      "get": {
        "operationId": "get_transfer_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by business entity.",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter by transfer state.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "ACH_CONFIRMED",
                "CANCELED",
                "COMPLETED",
                "ERROR",
                "INITIATED",
                "NOT_ACKED",
                "NOT_ENOUGH_FUNDS",
                "PROCESSING_BY_ODFI",
                "REJECTED_BY_ODFI",
                "RETURNED_BY_RDFI",
                "SUBMITTED_TO_FED",
                "SUBMITTED_TO_RDFI",
                "UNNECESSARY",
                "UPLOADED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter for transfers that have no sync commits.",
            "in": "query",
            "name": "has_no_sync_commits",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter for transfers that occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for transfers that occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter for transfers that shows up in the specified statement",
            "in": "query",
            "name": "statement_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiTransferResourceSchema"
                }
              }
            },
            "description": "Transfer"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["transfers:read"]
          }
        ],
        "summary": "List transfer payments",
        "tags": ["Transfer Payment"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/transfers/{transfer_id}": {
      "get": {
        "operationId": "get_transfer_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            },
            "description": "Transfer"
          },
          "400": {
            "description": "raises InvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["transfers:read"]
          }
        ],
        "summary": "Fetch a transfer payment",
        "tags": ["Transfer Payment"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "transfer_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/users": {
      "get": {
        "operationId": "get_user_list_with_pagination",
        "parameters": [
          {
            "description": "Filter by user role",
            "in": "query",
            "name": "role",
            "required": false,
            "schema": {
              "enum": [
                "ADVISOR_CONSOLE_ADMIN",
                "ADVISOR_CONSOLE_USER",
                "AUDITOR",
                "BILL_PAY_ADMIN",
                "BUSINESS_ADMIN",
                "BUSINESS_BOOKKEEPER",
                "BUSINESS_OWNER",
                "BUSINESS_USER",
                "DEVELOPER_ADMIN",
                "GUEST_USER",
                "IT_ADMIN",
                "VENDOR_NETWORK_ADMIN"
              ],
              "type": "string"
            }
          },
          {
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "description": "filter by business entity",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "filter by department",
            "in": "query",
            "name": "department_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "filter by email",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "format": "email",
              "type": "string"
            }
          },
          {
            "description": "filter by location",
            "in": "query",
            "name": "location_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseApiUserResourceSchema"
                }
              }
            },
            "description": "Users"
          },
          "400": {
            "description": "raises UserInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["users:read"]
          }
        ],
        "summary": "List users",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/users/deferred": {
      "post": {
        "description": "Call this endpoint to trigger an async task to send out a user invite.",
        "operationId": "post_user_creation_deferred_task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserCreateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeferredTaskUUID"
                }
              }
            },
            "description": "Response with the ID of the async task. Task status can be checked via a GET call to .../deferred/status/<task_id>"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Create a user invite",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    },
    "/developer/v1/users/deferred/status/{task_id}": {
      "get": {
        "operationId": "get_user_deferred_task_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeferredTask"
                }
              }
            },
            "description": "User deferred task status"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Fetch deferred task status",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "task_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/developer/v1/users/{user_id}": {
      "delete": {
        "description": "This action terminates the user's cards. This action is not reversible; if you prefer to transfer the user's cards, you must do this before making the DELETE request.\nIf the user you are terminating is currently in an approval chain, then you could choose to either replace the user with his/her direct manager in the approval chain or specify a replacement.  You could also choose to do nothing but it may lead to errors.",
        "operationId": "delete_user_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserDeleteOptionRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Delete user"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Delete a user",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "get": {
        "operationId": "get_user_resource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "User"
          },
          "400": {
            "description": "raises UserInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["users:read"]
          }
        ],
        "summary": "Fetch a user",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          },
          "style": "simple"
        }
      ],
      "patch": {
        "operationId": "patch_user_resource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserUpdateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Update user"
          },
          "400": {
            "description": "raises UserInvalidInput"
          }
        },
        "security": [
          {
            "oauth2": ["users:write"]
          }
        ],
        "summary": "Update a user",
        "tags": ["User"],
        "x-annotatedRequest": true,
        "x-annotatedResponse": true
      }
    }
  },
  "info": {
    "title": "Ramp API",
    "version": "v1"
  },
  "tags": [
    {
      "description": "Limit Operations",
      "name": "Limit"
    },
    {
      "description": "Operations related to accounting",
      "name": "Accounting"
    },
    {
      "description": "Operations related to bill pay",
      "name": "Bill"
    },
    {
      "description": "Operations related to business",
      "name": "Business"
    },
    {
      "description": "Operations related to card programs",
      "name": "Card Program"
    },
    {
      "description": "Operations related to cards",
      "name": "Card"
    },
    {
      "description": "Operations related to cashback",
      "name": "Cashback"
    },
    {
      "description": "Operations related to departments",
      "name": "Department"
    },
    {
      "description": "Operations related to entity",
      "name": "Business Entities"
    },
    {
      "description": "Operations related to external dimensions",
      "name": "External Dimensions"
    },
    {
      "description": "Operations related to location",
      "name": "Location"
    },
    {
      "description": "Operations related to memos",
      "name": "Memo"
    },
    {
      "description": "Operations related to merchant",
      "name": "Merchant"
    },
    {
      "description": "Operations related to receipt integrations.",
      "name": "Receipt Integrations"
    },
    {
      "description": "Operations related to receipts",
      "name": "Receipt"
    },
    {
      "description": "Operations related to reimbursements",
      "name": "Reimbursement"
    },
    {
      "description": "Operations related to sales leads",
      "name": "SalesLead"
    },
    {
      "description": "Operations related to statements",
      "name": "Statement"
    },
    {
      "description": "Operations related to token",
      "name": "Token"
    },
    {
      "description": "Operations related to transactions",
      "name": "Transaction"
    },
    {
      "description": "Operations related to transfer payments",
      "name": "Transfer Payment"
    },
    {
      "description": "Operations related to users",
      "name": "User"
    },
    {
      "description": "Operations related to vendors",
      "name": "Vendor"
    },
    {
      "description": "Spend Program Operations",
      "name": "Spend Program"
    }
  ],
  "openapi": "3.0.2",
  "components": {
    "schemas": {
      "AccountingProvider": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "remote_provider_name": {}
        },
        "type": "object"
      },
      "ApiAccountingCategory": {
        "properties": {
          "category_id": {
            "description": "User-selected category id for transaction.",
            "type": "string"
          },
          "category_name": {
            "description": "User-selected category name for transaction.",
            "type": "string"
          },
          "tracking_category_remote_id": {
            "type": "string"
          },
          "tracking_category_remote_name": {
            "type": "string"
          },
          "tracking_category_remote_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAccountingCustomFieldCreateRequestBody": {
        "example": {
          "id": "Department",
          "input_type": "SINGLE_CHOICE",
          "is_splittable": "True",
          "name": "Department"
        },
        "properties": {
          "id": {
            "description": "id of the custom accounting field.",
            "type": "string"
          },
          "input_type": {
            "description": "The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.",
            "enum": ["BOOLEAN", "FREE_FORM_TEXT", "SINGLE_CHOICE"],
            "type": "string"
          },
          "is_splittable": {
            "description": "If set to True, the accounting field can be used to annotate split line items.",
            "type": "boolean"
          },
          "name": {
            "description": "name of the custom accounting field.",
            "type": "string"
          }
        },
        "required": ["id", "input_type", "name"],
        "type": "object"
      },
      "ApiAccountingCustomFieldOptionUpdateRequestBody": {
        "example": {
          "reactivate": true,
          "value": "Sales & Marketing"
        },
        "properties": {
          "reactivate": {
            "description": "reactivate a deleted custom field option",
            "enum": [true],
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAccountingCustomFieldOptionUploadRequestBody": {
        "example": {
          "field_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
          "options": [
            {
              "id": "418",
              "value": "Engineering & Design"
            },
            {
              "id": "514",
              "value": "Sales & Marketing"
            }
          ]
        },
        "properties": {
          "field_id": {
            "description": "id to uniquely identify a custom accounting field within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "options": {
            "description": "A list of field options for a given custom accounting field.",
            "items": {
              "$ref": "#/components/schemas/FieldOption"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["field_id", "options"],
        "type": "object"
      },
      "ApiAccountingCustomFieldResource": {
        "example": {
          "created_at": "2019-08-28T14:15:22+00:00",
          "id": "Department",
          "input_type": "SINGLE_CHOICE",
          "is_active": true,
          "is_splittable": true,
          "name": "Department",
          "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
          "updated_at": "2020-08-28T14:40:12+00:00"
        },
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "input_type": {
            "description": "The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.",
            "enum": ["BOOLEAN", "FREE_FORM_TEXT", "SINGLE_CHOICE"],
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "is_splittable": {
            "type": "boolean"
          },
          "name": {
            "description": "name of the custom accounting field.",
            "type": "string"
          },
          "ramp_id": {
            "description": "id to uniquely identify a custom accounting field within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["input_type"],
        "type": "object"
      },
      "ApiAccountingCustomFieldUpdateRequestBody": {
        "example": {
          "is_splittable": "True",
          "name": "New Department"
        },
        "properties": {
          "is_splittable": {
            "description": "If set to True, the accounting field can be used to annotate split line items.",
            "type": "boolean"
          },
          "name": {
            "description": "name of the custom accounting field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiAccountingFailedSyncRequestBody": {
        "example": {
          "error": {
            "message": "The account period has closed and the account books cannot be updated."
          },
          "id": "bb037f47-c664-46f9-afa7-cc68cbcf5a23"
        },
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiAccountingSyncErrorRequestBody"
              }
            ],
            "description": "describes the reason why the sync object failed to sync."
          },
          "id": {
            "description": "ID that uniquely identifies a transaction/reimbursement in Ramp systems.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["error", "id"],
        "type": "object"
      },
      "ApiAccountingGLAccountUpdateRequestBody": {
        "example": {
          "code": "6410",
          "name": "Employees:Salaries & Wages",
          "reactivate": true,
          "subsidiaries": [
            "7979392e-8d41-4f97-815b-ccd7584802bf",
            "7979392e-8d41-4f97-815b-ccd7584802bf",
            "d471d830-2e73-4082-8a75-68540f83e86e",
            "d471d830-2e73-4082-8a75-68540f83e86e"
          ]
        },
        "properties": {
          "code": {
            "description": "code of the general ledger account; you could provide an empty string if you want to reset the remote code.",
            "type": "string"
          },
          "name": {
            "description": "name of the general ledger account",
            "type": "string"
          },
          "reactivate": {
            "description": "reactivate a deleted general ledger account",
            "enum": [true],
            "type": "boolean"
          },
          "subsidiaries": {
            "description": "IDs of a list of subsidiaries which a general ledger account can be used with. The Ramp-assigned IDs should be used here. you could provide an empty list if you want to reset the subsidiaries list for this general ledger account.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiAccountingGLAccountUploadRequestBody": {
        "example": {
          "gl_accounts": [
            {
              "classification": "EXPENSE",
              "code": "6410",
              "id": "514",
              "name": "Employees:Salaries & Wages"
            },
            {
              "classification": "EXPENSE",
              "id": "418",
              "name": "Office/Admin:Phone & Internet"
            },
            {
              "classification": "REVENUE",
              "id": "425",
              "name": "Sales"
            }
          ]
        },
        "properties": {
          "gl_accounts": {
            "description": "A list of general ledger accounts that you want to use to classify your Ramp transactions.",
            "items": {
              "$ref": "#/components/schemas/GLAccount"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["gl_accounts"],
        "type": "object"
      },
      "ApiAccountingProviderAccessCreateRequestBody": {
        "example": {
          "reactivate": false,
          "remote_provider_name": "ACCOUNTING_SEED"
        },
        "properties": {
          "reactivate": {
            "default": false,
            "description": "Set reactivate=True to try to find an existing deleted accounting connection instead of creating a new one.",
            "type": "boolean"
          },
          "remote_provider_name": {
            "description": "Name of the ERP system that you are using",
            "type": "string"
          }
        },
        "required": ["remote_provider_name"],
        "type": "object"
      },
      "ApiAccountingSuccessfulSyncRequestBody": {
        "example": {
          "id": "bb037f47-c664-46f9-afa7-cc68cbcf5a23",
          "reference_id": "83283a15-c0a0-4105-9724-2fcfefa9924f"
        },
        "properties": {
          "id": {
            "description": "ID that uniquely identifies the object to sync in Ramp systems.",
            "format": "uuid",
            "type": "string"
          },
          "reference_id": {
            "description": "ID that uniquely identifies the object to sync in remote ERP systems.",
            "type": "string"
          }
        },
        "required": ["id", "reference_id"],
        "type": "object"
      },
      "ApiAccountingSyncCreateRequestBody": {
        "example": {
          "failed_syncs": [
            {
              "error": {
                "message": "The account period has closed and the account books cannot be updated."
              },
              "id": "d471d830-2e73-4082-8a75-68540f83e86e"
            }
          ],
          "idempotency_key": "d471d830-2e73-4082-8a75-68540f83e86e",
          "successful_syncs": [
            {
              "id": "5a58eb94-a583-458f-810d-c794f32f2f90",
              "reference_id": "d8573713-a97d-4119-bdd7-b69c318df9bb"
            },
            {
              "id": "bb037f47-c664-46f9-afa7-cc68cbcf5a23",
              "reference_id": "83283a15-c0a0-4105-9724-2fcfefa9924f"
            }
          ],
          "sync_type": "TRANSACTION_SYNC"
        },
        "properties": {
          "failed_syncs": {
            "description": "A list of objects that failed to be synced.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingFailedSyncRequestBody"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "successful_syncs": {
            "description": "A list of successfully synced objects.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingSuccessfulSyncRequestBody"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "sync_type": {
            "description": "The type of object to sync.",
            "enum": [
              "BILL_SYNC",
              "REIMBURSEMENT_SYNC",
              "STATEMENT_CREDIT_SYNC",
              "TRANSACTION_SYNC",
              "TRANSFER_SYNC",
              "WALLET_TRANSFER_SYNC"
            ],
            "type": "string"
          }
        },
        "required": ["idempotency_key", "sync_type"],
        "type": "object"
      },
      "ApiAccountingSyncErrorRequestBody": {
        "example": {
          "message": "The account period has closed and the account books cannot be updated."
        },
        "properties": {
          "message": {
            "description": "an error message that explains the reason of the sync failure.",
            "type": "string"
          }
        },
        "required": ["message"],
        "type": "object"
      },
      "ApiAccountingTrackingCategoryUploadResponse": {
        "example": {
          "uploaded": [
            {
              "uuid": "459cf0e9-5cec-411b-935e-8b9b28ff63ba"
            },
            {
              "uuid": "733cf0e9-5cec-411b-935e-8b9b28ff63ba"
            }
          ]
        },
        "properties": {
          "uploaded": {
            "description": "A list of uuids from the uploaded objects.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiAccountingVendorUpdateRequestBody": {
        "example": {
          "code": "19566",
          "name": "Amazon",
          "reactivate": true,
          "subsidiaries": [
            "d4fb347a-e24d-46aa-bdbd-f51ee6f3938b",
            "dc9e25cd-15f9-4a90-9de7-d05207641300"
          ]
        },
        "properties": {
          "code": {
            "description": "Code of the vendor; you could provide an empty string to reset the remote code.",
            "type": "string"
          },
          "name": {
            "description": "Name of a vendor",
            "type": "string"
          },
          "reactivate": {
            "description": "reactivate a deleted vendor",
            "enum": [true],
            "type": "boolean"
          },
          "subsidiaries": {
            "description": "IDs of a list of subsidiaries associated with the vendor. The Ramp-assigned IDs should be used here. You could provide an empty list to reset the subsidiaries list.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiAccountingVendorUploadRequestBody": {
        "example": {
          "vendors": [
            {
              "id": "V-5500-0130",
              "name": "AirTable"
            },
            {
              "id": "V-5500-0135",
              "name": "Slack Technologies, LLC"
            },
            {
              "id": "V-5500-0142",
              "name": "Microsoft"
            }
          ]
        },
        "properties": {
          "vendors": {
            "description": "A list of vendors that you want to use to classify your Ramp transactions.",
            "items": {
              "$ref": "#/components/schemas/Vendor"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["vendors"],
        "type": "object"
      },
      "ApiBillAccountingCategory": {
        "properties": {
          "external_id": {
            "description": "external id of accounting field; It should uniquely identify an accounting field on the client end.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field",
            "type": "string"
          },
          "type": {
            "description": "accounting field type",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "required": ["external_id", "id", "name", "type"],
        "type": "object"
      },
      "ApiBillAccountingFieldSelection": {
        "properties": {
          "category_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillAccountingCategory"
              }
            ],
            "description": "information about the accounting category (or accounting field)."
          },
          "external_id": {
            "description": "external id of accounting field option; It should uniquely identify an accounting field option on the client end.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field option within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field option",
            "type": "string"
          }
        },
        "required": ["category_info", "external_id", "id", "name"],
        "type": "object"
      },
      "ApiBillLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the line item.",
            "items": {
              "$ref": "#/components/schemas/ApiBillAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item",
            "nullable": true
          },
          "memo": {
            "description": "Memo of the line item",
            "type": "string"
          }
        },
        "required": ["amount"],
        "type": "object"
      },
      "ApiBillOwner": {
        "properties": {
          "first_name": {
            "description": "Bill owner's first name.",
            "type": "string"
          },
          "id": {
            "description": "Bill owner's ID.",
            "format": "uuid",
            "type": "string"
          },
          "last_name": {
            "description": "Bill owner's last name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiBillPayment": {
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the bill."
          },
          "effective_date": {
            "description": "The date the payment is actually initiated",
            "format": "date-time",
            "type": "string"
          },
          "payment_date": {
            "description": "The date the payment is scheduled to be initiated.",
            "format": "date-time",
            "type": "string"
          },
          "payment_method": {
            "enum": [
              "ACH",
              "CARD",
              "CHECK",
              "INTERNATIONAL",
              "ONE_TIME_CARD",
              "ONE_TIME_CARD_DELIVERY",
              "PAID_MANUALLY",
              "SWIFT",
              "UNSPECIFIED",
              "VENDOR_CREDIT"
            ],
            "type": "string"
          }
        },
        "required": ["amount"],
        "type": "object"
      },
      "ApiBillVendor": {
        "properties": {
          "remote_id": {
            "description": "ID that uniquely identifies the vendor on the client's side.",
            "type": "string"
          },
          "remote_name": {
            "description": "Name of the vendor.",
            "type": "string"
          },
          "type": {
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "type": "string"
          }
        },
        "required": ["remote_id", "remote_name", "type"],
        "type": "object"
      },
      "ApiCardAccountingRulesDataRequestBody": {
        "properties": {
          "tracking_category_id": {
            "format": "uuid",
            "type": "string"
          },
          "tracking_category_option_id": {
            "format": "uuid",
            "type": "string"
          },
          "tracking_category_option_remote_name": {
            "type": "string"
          }
        },
        "required": [
          "tracking_category_id",
          "tracking_category_option_id",
          "tracking_category_option_remote_name"
        ],
        "type": "object"
      },
      "ApiCardDeferredTaskContext": {
        "properties": {
          "acting_user_id": {
            "description": "Unique identifier of the acting user that initiated the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "card_id": {
            "description": "Unique identifier of the subject card in the deferred task.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCardDeferredTaskData": {
        "properties": {
          "card_id": {
            "description": "Unique identifier of the subject card in the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "error": {
            "description": "An error message if the deferred task fails.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCardDeferredUpdateRequestBody": {
        "properties": {
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          }
        },
        "required": ["idempotency_key"],
        "type": "object"
      },
      "ApiCardFulfillment": {
        "properties": {
          "card_personalization": {
            "$ref": "#/components/schemas/CardPersonalization"
          },
          "cardholder_uuid": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "fulfillment_status": {
            "description": "Fulfillment status of the card",
            "enum": ["DELIVERED", "DIGITALLY_PRESENTED", "ISSUED", "ORDERED", "REJECTED", "SHIPPED"],
            "type": "string"
          },
          "shipping": {
            "$ref": "#/components/schemas/CardShipping"
          },
          "shipping_date": {
            "description": "Date on which the card is shipped out, presented in ISO8601 format",
            "format": "date-time",
            "type": "string"
          },
          "shipping_eta": {
            "description": "Estimated arrival time, presented in ISO8601 format",
            "format": "date-time",
            "type": "string"
          },
          "shipping_tracking_url": {
            "description": "Tracking url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCardProgramCreateRequestBody": {
        "example": {
          "description": "Offer a yearly stipend for conferences and courses.",
          "display_name": "Education Stipend",
          "icon": "EducationStipendIcon",
          "is_default": false,
          "is_physical": false,
          "spending_restrictions": {
            "amount": 750,
            "categories": [33],
            "interval": "YEARLY",
            "lock_date": "2024-08-20T00:00:00+00:00"
          }
        },
        "properties": {
          "acting_user_id": {
            "type": "integer"
          },
          "business_id": {
            "type": "integer"
          },
          "description": {
            "description": "Description of the card program.",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the card program.",
            "type": "string"
          },
          "icon": {
            "enum": [
              "AdvertisingIcon",
              "CardIcon",
              "EducationStipendIcon",
              "LunchOrderingIcon",
              "OnboardingIcon",
              "PerDiemCardIcon",
              "SaasSubscriptionIcon",
              "SoftwareTrialIcon",
              "TravelExpensesIcon",
              "WellnessIcon"
            ],
            "type": "string"
          },
          "is_default": {
            "description": "Whether this card program is used as default card program.",
            "type": "boolean"
          },
          "is_physical": {
            "description": "Whether this card program is used for physical cards.",
            "type": "boolean"
          },
          "policy_id": {
            "type": "integer"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Spending restrictions associated with the card program."
          }
        },
        "required": [
          "acting_user_id",
          "business_id",
          "description",
          "display_name",
          "is_default",
          "is_physical",
          "policy_id",
          "spending_restrictions"
        ],
        "type": "object"
      },
      "ApiCardProgramResource": {
        "example": {
          "description": "Offer a yearly stipend for conferences and courses.",
          "display_name": "Education Stipend",
          "icon": "EducationStipendIcon",
          "id": "97ad0c67-c318-4591-9b0e-202ecceb8016",
          "is_default": false,
          "is_physical": false,
          "spending_restrictions": {
            "amount": 750,
            "categories": [33],
            "interval": "YEARLY",
            "lock_date": "2024-08-20T00:00:00+00:00",
            "transaction_amount_limit": 200
          }
        },
        "properties": {
          "description": {
            "description": "Card program description.",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the card program.",
            "type": "string"
          },
          "icon": {
            "enum": [
              "AdvertisingIcon",
              "CardIcon",
              "EducationStipendIcon",
              "LunchOrderingIcon",
              "OnboardingIcon",
              "PerDiemCardIcon",
              "SaasSubscriptionIcon",
              "SoftwareTrialIcon",
              "TravelExpensesIcon",
              "WellnessIcon"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifer of the card program.",
            "format": "uuid",
            "type": "string"
          },
          "is_default": {
            "description": "Whether this card program is used as default card program.",
            "type": "boolean"
          },
          "is_physical": {
            "description": "Whether this card program is used for physical cards.",
            "type": "boolean"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardProgramSpendingRestrictions"
              }
            ],
            "description": "Spending restrictions associated with the card program."
          }
        },
        "required": ["icon"],
        "type": "object"
      },
      "ApiCardProgramSpendingRestrictions": {
        "properties": {
          "amount": {
            "description": "Amount limit total per interval.",
            "type": "number"
          },
          "categories": {
            "description": "List of Ramp Category Codes this card is restricted to.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "lock_date": {
            "description": "Date to automatically lock the card.",
            "format": "date-time",
            "type": "string"
          },
          "transaction_amount_limit": {
            "description": "Max amount limit per transaction.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiCardRequestBody": {
        "example": {
          "display_name": "T&E",
          "entity_id": "7051bc66-a8cb-4e68-81c4-caf6459ac168",
          "idempotency_key": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
          "spending_restrictions": {
            "amount": 5000,
            "categories": [],
            "currency": "USD",
            "interval": "MONTHLY",
            "transaction_amount_limit": 100
          },
          "user_id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731"
        },
        "properties": {
          "card_program_id": {
            "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "Cosmetic display name of the card.",
            "type": "string"
          },
          "entity_id": {
            "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location.",
            "format": "uuid",
            "type": "string"
          },
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "is_physical": {
            "default": false,
            "description": "Set to true to create a physical card",
            "type": "boolean"
          },
          "is_temporary": {
            "default": false,
            "description": "Set to true to create a temporary card",
            "type": "boolean"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Specifies the spend restrictions on a Ramp card. One of spending_restrictions or card_program_id must be provided."
          },
          "user_id": {
            "description": "Unique identifier of the card owner.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "user_id"],
        "type": "object"
      },
      "ApiCardSpendingRestrictionsDump": {
        "properties": {
          "amount": {
            "description": "Amount limit total per interval.",
            "type": "number"
          },
          "auto_lock_date": {
            "description": "Date to automatically lock the card. Note that this is different from the actual card expiration date. It conforms to ISO8601 format",
            "format": "date-time",
            "type": "string"
          },
          "blocked_categories": {
            "description": "List of Ramp Category Codes blocked for this card.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories": {
            "description": "List of Ramp Category Codes this card is restricted to.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "suspended": {
            "description": "Whether the card has been locked.",
            "type": "boolean"
          },
          "transaction_amount_limit": {
            "description": "Max amount limit per transaction.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiCardSpendingRestrictionsRequestBody": {
        "properties": {
          "amount": {
            "description": "Amount limit total per interval.",
            "minimum": 0,
            "oneOf": [
              {
                "type": "number"
              }
            ]
          },
          "blocked_mcc_codes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "card_accounting_rules": {
            "items": {
              "$ref": "#/components/schemas/ApiCardAccountingRulesDataRequestBody"
            },
            "type": "array"
          },
          "categories": {
            "description": "List of Ramp Category Codes this card is restricted to.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories_blacklist": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories_whitelist": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "currency": {
            "description": "Currency in which the amount is specified.",
            "type": "string"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "lock_date": {
            "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card. Note that this is different from the actual card expiration date. This date need to conforms to ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "transaction_amount_limit": {
            "description": "Max amount limit per transaction.",
            "minimum": 0,
            "oneOf": [
              {
                "type": "number"
              }
            ]
          },
          "vendor_blacklist": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "vendor_whitelist": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["amount", "interval"],
        "type": "object"
      },
      "ApiCardUpdateRequestBody": {
        "example": {
          "card_program_id": "ebe71e80-84d3-4e4b-be4d-70d05fb20934",
          "display_name": "WFH Spending Card",
          "entity_id": "a7cb9187-4dc8-412a-b5ca-0974d7f07a0b",
          "has_notifications_enabled": true,
          "new_user_id": "506a7096-98c0-4ab5-86ef-20c884a78e74",
          "spending_restrictions": {
            "amount": 500,
            "interval": "DAILY"
          }
        },
        "properties": {
          "card_program_id": {
            "description": "Specify a card program to link with.\n            This will override the card's spending restrictions with those of the card program.\n            Pass card_program_id = None to detach the card's current card program.\n\n            If the card_program_id field is specified, then the card program's changes will override any other changes.\n            For example, if both spending_restrictions and card_program_id are passed, then the new spending restrictions\n            will match those of the card program (not the passed spending restrictions).\n            ",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "display_name": {
            "description": "Cosmetic display name of the card.",
            "type": "string"
          },
          "entity_id": {
            "description": "Specify id to update associated business entity.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "has_notifications_enabled": {
            "description": "Flag to set to enable or disable notifications.",
            "type": "boolean"
          },
          "new_user_id": {
            "description": "Specify id for new card owner.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartialApiCardSpendingRestrictionsUpdateRequestBody"
              }
            ],
            "description": "Modify spending restrictions. Only the fields to be modified need to be passed (so fields that will stay the same do not have to be passed)."
          }
        },
        "type": "object"
      },
      "ApiDepartmentCreateRequestBody": {
        "additionalProperties": false,
        "example": {
          "name": "Engineering"
        },
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiDepartmentUpdateRequestBody": {
        "example": {
          "name": "HR"
        },
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object"
      },
      "ApiEntityResource": {
        "properties": {
          "accounts": {
            "description": "Information about the entity's active accounts",
            "items": {
              "$ref": "#/components/schemas/EntityProviderAccount"
            },
            "type": "array"
          },
          "currency": {
            "type": "string"
          },
          "entity_name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_primary": {
            "type": "boolean"
          },
          "location_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["id"],
        "type": "object"
      },
      "ApiLocationCreateRequestBody": {
        "example": {
          "entity_id": "140af3ce-b00a-4c0e-adaa-ac83b65e2e18",
          "name": "Miami, FL"
        },
        "properties": {
          "entity_id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiLocationUpdateRequestBody": {
        "example": {
          "entity_id": "bb25a7e8-cc2f-4ba7-9bf4-7730ffe152bb",
          "name": "New York City, NY"
        },
        "properties": {
          "entity_id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "ApiMemoCreateRequestBody": {
        "properties": {
          "is_memo_recurring": {
            "default": false,
            "type": "boolean"
          },
          "memo": {
            "type": "string"
          }
        },
        "required": ["memo"],
        "type": "object"
      },
      "ApiMerchantLocation": {
        "properties": {
          "city": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["city", "country", "postal_code", "state"],
        "type": "object"
      },
      "ApiPermittedSpendTypesDump": {
        "properties": {
          "primary_card_enabled": {
            "description": "Indicates whether the user's physical card can be linked to this limit.",
            "type": "boolean"
          },
          "reimbursements_enabled": {
            "description": "Indicates whether reimbursements can be submitted against this limit.",
            "type": "boolean"
          }
        },
        "required": ["primary_card_enabled", "reimbursements_enabled"],
        "type": "object"
      },
      "ApiPermittedSpendTypesRequestBody": {
        "properties": {
          "primary_card_enabled": {
            "description": "Dictates whether the user's physical card can be linked to this limit.",
            "type": "boolean"
          },
          "reimbursements_enabled": {
            "description": "Dictates whether reimbursements can be submitted against this limit.",
            "type": "boolean"
          }
        },
        "required": ["primary_card_enabled", "reimbursements_enabled"],
        "type": "object"
      },
      "ApiPhysicalRequestBody": {
        "example": {
          "display_name": "T&E",
          "fulfillment": {
            "shipping": {
              "recipient_address": {
                "address1": "123 Main St",
                "city": "New York City",
                "country": "US",
                "first_name": "Cardholder's first name",
                "last_name": "Cardholder's last name",
                "postal_code": "10003",
                "state": "NY"
              }
            }
          },
          "idempotency_key": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
          "spending_restrictions": {
            "amount": 5000,
            "categories": [],
            "currency": "USD",
            "interval": "MONTHLY",
            "transaction_amount_limit": 100
          },
          "user_id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731"
        },
        "properties": {
          "card_program_id": {
            "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.",
            "format": "uuid",
            "type": "string"
          },
          "display_name": {
            "description": "Cosmetic display name of the card.",
            "type": "string"
          },
          "entity_id": {
            "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location.",
            "format": "uuid",
            "type": "string"
          },
          "fulfillment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardFulfillmentRequestBody"
              }
            ],
            "description": "Fulfillment details of a Ramp card. For physical cards only."
          },
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "is_physical": {
            "default": false,
            "description": "Set to true to create a physical card",
            "type": "boolean"
          },
          "is_temporary": {
            "default": false,
            "description": "Set to true to create a temporary card",
            "type": "boolean"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Specifies the spend restrictions on a Ramp card. One of spending_restrictions or card_program_id must be provided."
          },
          "user_id": {
            "description": "Unique identifier of the card owner.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "user_id"],
        "type": "object"
      },
      "ApiReceiptIntegrationOptedOutEmailCreateRequestBody": {
        "properties": {
          "business_id": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          }
        },
        "required": ["business_id", "email"],
        "type": "object"
      },
      "ApiReceiptIntegrationOptedOutEmailResource": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReceiptIntegrationOptedOutEmailResourceRequestBody": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReceiptUploadRequestBody": {
        "example": {
          "idempotency_key": "0a0ed428-0250-4993-96ad-94cd77bc86b6",
          "transaction_id": "01b7dc97-5b67-45a2-8b05-e4e078f3a722",
          "user_id": "30ffb5d0-3021-4438-8253-25819d480237"
        },
        "properties": {
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "transaction_id": {
            "description": "Transaction to be attached with the uploaded receipt",
            "format": "uuid",
            "type": "string"
          },
          "user_id": {
            "description": "User to be associated with the uploaded receipt. Transactions from the receipt's user will be prioritized for selection when performing receipt matching.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "transaction_id", "user_id"],
        "type": "object"
      },
      "ApiReimbursementAccountingCategoryInfo": {
        "properties": {
          "external_id": {
            "description": "external id of accounting field; It should uniquely identify an accounting field on the ERP.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field",
            "type": "string"
          },
          "type": {
            "description": "accounting field type",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReimbursementAccountingFieldSelection": {
        "properties": {
          "category_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiReimbursementAccountingCategoryInfo"
              }
            ],
            "description": "information about the accounting category (or accounting field)."
          },
          "external_code": {
            "description": "external code of accounting field option; Code field displayed on the ERP.",
            "type": "string"
          },
          "external_id": {
            "description": "external id of accounting field option; It should uniquely identify an accounting field option on the ERP.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field option within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field option",
            "type": "string"
          },
          "type": {
            "description": "Accounting field type",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReimbursementLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the line item.",
            "items": {
              "$ref": "#/components/schemas/ApiReimbursementAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item",
            "nullable": true
          },
          "memo": {
            "description": "Memo for the line item.",
            "type": "string"
          }
        },
        "required": ["amount"],
        "type": "object"
      },
      "ApiSalesLeadBusinessDump": {
        "example": {
          "business_description": "We are in the empire business",
          "business_name_dba": "White & Pinkman Inc.",
          "business_name_legal": "White & Pinkman Inc.",
          "business_name_website": "www.whiteandpinkman.com",
          "date_of_incorporation": "2004-01-01",
          "ein_number": "12-3456789",
          "entity_type": "CORPORATION",
          "estimated_monthly_spend": "10,000",
          "industry": "Food Products",
          "industry_group": "Food, Beverage & Tobacco",
          "office_address": {
            "office_city": "Albuquerque",
            "office_country": "US",
            "office_postal_code": "100022",
            "office_state": "New Mexico",
            "office_street_address": "100 Main Street"
          },
          "sector": "Consumer Staples",
          "state_of_incorporation": "New Mexico"
        },
        "properties": {
          "business_description": {
            "description": "A short description of the business.",
            "type": "string"
          },
          "business_name_dba": {
            "description": "Doing business as (DBA)",
            "type": "string"
          },
          "business_name_legal": {
            "description": "Legal name of the business.",
            "type": "string"
          },
          "business_name_website": {
            "description": "Business's website.",
            "type": "string"
          },
          "date_of_incorporation": {
            "description": "Business's incorporation date.",
            "format": "date",
            "type": "string"
          },
          "ein_number": {
            "description": "Employer Identification Number (EIN).",
            "type": "string"
          },
          "entity_type": {
            "description": "Type of incorporation.",
            "enum": ["COOPERATIVE", "CORPORATION", "LLC", "OTHER", "PARTNERSHIP", "SOLE_PROPRIETORSHIP"],
            "type": "string"
          },
          "estimated_monthly_spend": {
            "description": "Estimated monthly spend.",
            "type": "string"
          },
          "industry": {
            "description": "Business's industry",
            "type": "string"
          },
          "industry_group": {
            "description": "Business's industry group",
            "type": "string"
          },
          "office_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSalesLeadOfficeAddress"
              }
            ],
            "description": "Office's address."
          },
          "office_phone_number": {
            "description": "Office phone number. Must include country code.",
            "type": "string"
          },
          "sector": {
            "description": "Business's sector",
            "type": "string"
          },
          "state_of_incorporation": {
            "description": "The state in which the business is incorporated.",
            "type": "string"
          },
          "sub_industry": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSalesLeadBusinessRequestBody": {
        "example": {
          "business_description": "We are in the empire business",
          "business_name_dba": "White & Pinkman Inc.",
          "business_name_legal": "White & Pinkman Inc.",
          "business_name_website": "www.whiteandpinkman.com",
          "date_of_incorporation": "2004-01-01",
          "ein_number": "12-3456789",
          "entity_type": "CORPORATION",
          "estimated_monthly_spend": "10,000",
          "industry": "Food Products",
          "industry_group": "Food, Beverage & Tobacco",
          "office_address": {
            "office_city": "Albuquerque",
            "office_country": "US",
            "office_postal_code": "100022",
            "office_state": "New Mexico",
            "office_street_address": "100 Main Street"
          },
          "sector": "Consumer Staples",
          "state_of_incorporation": "New Mexico"
        },
        "properties": {
          "business_description": {
            "description": "A short description of the business.",
            "type": "string"
          },
          "business_name_dba": {
            "description": "Doing business as (DBA)",
            "maxLength": 255,
            "type": "string"
          },
          "business_name_legal": {
            "description": "Legal name of the business.",
            "maxLength": 255,
            "type": "string"
          },
          "business_name_website": {
            "description": "Business's website.",
            "type": "string"
          },
          "date_of_incorporation": {
            "description": "Business's incorporation date.",
            "format": "date",
            "type": "string"
          },
          "ein_number": {
            "description": "Employer Identification Number (EIN).",
            "type": "string"
          },
          "entity_type": {
            "description": "Type of incorporation.",
            "enum": ["COOPERATIVE", "CORPORATION", "LLC", "OTHER", "PARTNERSHIP", "SOLE_PROPRIETORSHIP"],
            "type": "string"
          },
          "estimated_monthly_spend": {
            "description": "Estimated monthly spend.",
            "type": "string"
          },
          "industry": {
            "description": "Business's industry",
            "type": "string"
          },
          "industry_group": {
            "description": "Business's industry group",
            "type": "string"
          },
          "office_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSalesLeadOfficeAddressRequestBody"
              }
            ],
            "description": "Office's address."
          },
          "office_phone_number": {
            "description": "Office phone number. Must include country code.",
            "type": "string"
          },
          "sector": {
            "description": "Business's sector",
            "type": "string"
          },
          "state_of_incorporation": {
            "description": "The state in which the business is incorporated.",
            "type": "string"
          },
          "sub_industry": {
            "description": "Business's subindustry",
            "type": "string"
          }
        },
        "required": ["business_name_dba", "business_name_legal"],
        "type": "object"
      },
      "ApiSalesLeadCreateRequestBody": {
        "example": {
          "business_info": {
            "business_description": "We are in the empire business",
            "business_name_dba": "White & Pinkman Inc.",
            "business_name_legal": "White & Pinkman Inc.",
            "business_name_website": "www.whiteandpinkman.com",
            "date_of_incorporation": "2004-01-01",
            "ein_number": "12-3456789",
            "entity_type": "CORPORATION",
            "estimated_monthly_spend": "10,000",
            "industry": "Food Products",
            "industry_group": "Food, Beverage & Tobacco",
            "office_address": {
              "office_city": "Albuquerque",
              "office_country": "US",
              "office_postal_code": "100022",
              "office_state": "New Mexico",
              "office_street_address": "100 Main Street"
            },
            "sector": "Consumer Staples",
            "state_of_incorporation": "New Mexico"
          },
          "email": "lead@whiteandpinkman.com",
          "external_id": "f26bfdb5-beei-4875-a9b5-a29f8af6f381",
          "first_name": "Walter",
          "last_name": "White",
          "redirect_uri": "https://app.whiteandpinkman.com/ramp/callback",
          "source": "White & Pinkman",
          "state": "f26bfdb5-7ecf-4875-a9b5-a29f8af6f381"
        },
        "properties": {
          "business_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSalesLeadBusinessRequestBody"
              }
            ],
            "description": ""
          },
          "email": {
            "description": "",
            "type": "string"
          },
          "external_id": {
            "description": "",
            "type": "string"
          },
          "first_name": {
            "description": "",
            "maxLength": 40,
            "type": "string"
          },
          "last_name": {
            "description": "",
            "maxLength": 40,
            "type": "string"
          },
          "phone": {
            "description": "",
            "type": "string"
          },
          "redirect_uri": {
            "description": "",
            "type": "string"
          },
          "source": {
            "description": "",
            "enum": ["AngelList", "Quanta"],
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "external_id",
          "first_name",
          "last_name",
          "redirect_uri",
          "source",
          "state"
        ],
        "type": "object"
      },
      "ApiSalesLeadOfficeAddress": {
        "properties": {
          "office_apt_suite": {
            "type": "string"
          },
          "office_city": {
            "type": "string"
          },
          "office_country": {
            "type": "string"
          },
          "office_postal_code": {
            "type": "string"
          },
          "office_state": {
            "type": "string"
          },
          "office_street_address": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSalesLeadOfficeAddressRequestBody": {
        "properties": {
          "office_apt_suite": {
            "type": "string"
          },
          "office_city": {
            "type": "string"
          },
          "office_country": {
            "type": "string"
          },
          "office_postal_code": {
            "type": "string"
          },
          "office_state": {
            "type": "string"
          },
          "office_street_address": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSpendAllocationBalance": {
        "properties": {
          "cleared": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Cleared amount on this limit."
          },
          "pending": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Pending amount towards this limit."
          },
          "total": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Total amount spent on this limit."
          }
        },
        "type": "object"
      },
      "ApiSpendLimitCardResource": {
        "properties": {
          "card_id": {
            "description": "Unique identifier of the card.",
            "format": "uuid",
            "type": "string"
          },
          "is_ap_card": {
            "description": "Card created manually by Ramp for high velocity spend",
            "type": "boolean"
          },
          "via_new_product_or_service": {
            "description": "Card created by 'New Product or Service' option",
            "type": "boolean"
          }
        },
        "required": ["is_ap_card", "via_new_product_or_service"],
        "type": "object"
      },
      "ApiSpendLimitCreateRequestBody": {
        "example": {
          "display_name": "T&E",
          "fulfillment": {
            "shipping": {
              "recipient_address": {
                "address1": "123 Main St",
                "city": "New York City",
                "country": "US",
                "first_name": "Julie",
                "last_name": "Phillip",
                "postal_code": "10003",
                "state": "NY"
              }
            },
            "shipping_date": null,
            "shipping_eta": null,
            "shipping_tracking_url": null
          },
          "idempotency_key": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
          "is_shareable": false,
          "permitted_spend_types": {
            "primary_card_enabled": false,
            "reimbursements_enabled": false
          },
          "spending_restrictions": {
            "auto_lock_date": null,
            "categories": [],
            "interval": "MONTHLY",
            "limit": {
              "amount": 500000,
              "currency_code": "USD"
            },
            "transaction_amount_limit": {
              "amount": 10000,
              "currency_code": "USD"
            }
          },
          "user_id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731"
        },
        "properties": {
          "display_name": {
            "description": "Cosmetic display name of the limit.",
            "type": "string"
          },
          "fulfillment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardFulfillmentRequestBody"
              }
            ],
            "description": "Fulfillment details of the limit's card."
          },
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "is_shareable": {
            "description": "Dictates whether the spend limit is shareable among multiple users.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesRequestBody"
              }
            ],
            "description": "Specifies the permitted spend types."
          },
          "spend_program_id": {
            "description": "The id of the associated spend program.",
            "format": "uuid",
            "type": "string"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Specifies the spending restrictions."
          },
          "user_id": {
            "description": "Unique identifier of the limit owner.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["idempotency_key", "user_id"],
        "type": "object"
      },
      "ApiSpendLimitDeferredTaskContext": {
        "properties": {
          "acting_user_id": {
            "description": "Unique identifier of the acting user that initiated the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "spend_limit_id": {
            "description": "Unique identifier of the subject limit in the deferred task.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSpendLimitDeferredTaskData": {
        "properties": {
          "error": {
            "description": "An error message if the deferred task fails.",
            "type": "string"
          },
          "spend_limit_id": {
            "description": "Unique identifier of the subject limit in the deferred task.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSpendLimitDeferredUpdateRequestBody": {
        "properties": {
          "idempotency_key": {
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          }
        },
        "required": ["idempotency_key"],
        "type": "object"
      },
      "ApiSpendLimitMember": {
        "properties": {
          "user_id": {
            "description": "The unique identifier of the limit owner.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiSpendLimitModifyUserAccessRequestBody": {
        "properties": {
          "user_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSpendLimitUpdateRequestBody": {
        "example": {
          "display_name": "New Display Name",
          "is_shareable": true,
          "new_user_id": "b9627abf-6b7e-47bc-a475-7493a8fa9cb4",
          "permitted_spend_types": {
            "primary_card_enabled": false,
            "reimbursements_enabled": true
          },
          "spending_restrictions": {
            "amount": 500,
            "interval": "DAILY"
          }
        },
        "properties": {
          "display_name": {
            "description": "Change the display name of the limit",
            "type": "string"
          },
          "is_shareable": {
            "description": "Dictates whether the spend limit is shareable among multiple users.",
            "type": "boolean"
          },
          "new_user_id": {
            "description": "Change the user of the limit",
            "format": "uuid",
            "type": "string"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesRequestBody"
              }
            ],
            "description": "Modify permitted spend types. All fields of permitted_spend_types must be given."
          },
          "spend_program_id": {
            "description": "Specify a spend program to link with.\n            This will override the limit's spending restrictions and permitted spend types with those of the spend program.\n            Pass spend_program_id = None to detach the limit's current spend program.\n            If the spend_program_id field is specified, no other fields may be passed.\n            ",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsRequestBody"
              }
            ],
            "description": "Modify spending restrictions. If this field is passed, the entire set of new spending restrictions must be passed (i.e. the given spending restrictions will override all existing spending restrictions)."
          }
        },
        "type": "object"
      },
      "ApiSpendProgramCreateIssuanceRulesRequestBody": {
        "properties": {
          "automatic": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendProgramIssuanceRulesRequestBody"
              }
            ],
            "description": "Set of rules for having spend programs issued by default to users",
            "nullable": true
          },
          "requestable": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendProgramIssuanceRulesRequestBody"
              }
            ],
            "description": "Set of rules for users requesting spend programs.",
            "nullable": true
          }
        },
        "type": "object"
      },
      "ApiSpendProgramCreateRequestBody": {
        "properties": {
          "description": {
            "description": "Description of the spend program.",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the spend program.",
            "type": "string"
          },
          "icon": {
            "description": "The template icon for the spend program.",
            "enum": [
              "AccountingServicesIcon",
              "AdvertisingIcon",
              "CONTRACTORS_AND_PROFESSIONAL_SERVICES",
              "CUSTOM",
              "CardIcon",
              "EducationStipendIcon",
              "EmployeeRewardsIcon",
              "GroundTransportationIcon",
              "LegalFeesIcon",
              "LodgingIcon",
              "LunchOrderingIcon",
              "OnboardingIcon",
              "PerDiemCardIcon",
              "SOFTWARE",
              "SaasSubscriptionIcon",
              "SoftwareTrialIcon",
              "SuppliesIcon",
              "TeamSocialIcon",
              "TravelExpensesIcon",
              "VirtualEventIcon",
              "WellnessIcon",
              "WorkFromHomeIcon"
            ],
            "type": "string"
          },
          "is_shareable": {
            "default": false,
            "description": "Dictates whether the spend program is shareable among multiple users.",
            "type": "boolean"
          },
          "issuance_rules": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendProgramCreateIssuanceRulesRequestBody"
              }
            ],
            "default": null,
            "description": "Spend Program Issuance Rules can be set for requests or default issuance of Limits from a program. Set whether a program is requestable or issued by default for a given set of users and their attributes (department, locations, and custom fields). If you'd like to give these permissions to all employees, you can set `applies_to_all` to `True`. Feel free to ignore this if you don't want any custom requestability or issuance logic.",
            "nullable": true
          },
          "issue_physical_card_if_needed": {
            "default": false,
            "description": "Dictates whether the spend program should issue a physical card if the user does not have one.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesRequestBody"
              }
            ],
            "description": "Specifies the permitted spend types for the spend program."
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsRequestBody"
              }
            ],
            "description": "A set of restrictions imposed on the spend program."
          }
        },
        "required": [
          "description",
          "display_name",
          "icon",
          "permitted_spend_types",
          "spending_restrictions"
        ],
        "type": "object"
      },
      "ApiSpendProgramIssuanceRulesRequestBody": {
        "properties": {
          "applies_to_all": {
            "default": false,
            "description": "Dictates whether this rule should apply to all employees or not (if True, location_ids, department_ids, and user_custom_field_ids should be null).",
            "type": "boolean"
          },
          "department_ids": {
            "description": "List of departments whose users are able to request or be issued this spend program.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "location_ids": {
            "description": "List of locations whose users are able to request or be issued this spend program.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "user_custom_field_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSpendProgramResource": {
        "example": {
          "description": "Offer a yearly stipend for conferences and courses.",
          "display_name": "Education Stipend",
          "icon": "EducationStipendIcon",
          "id": "796dab75-a23f-4e2a-984e-20da003c38ef",
          "is_shareable": true,
          "issue_physical_card_if_needed": false,
          "permitted_spend_types": {
            "primary_card_enabled": true,
            "reimbursements_enabled": true
          },
          "restrictions": {
            "allowed_categories": [33],
            "allowed_vendors": [],
            "auto_lock_date": "2025-10-28T00:00:00+00:00",
            "blocked_categories": [],
            "blocked_vendors": [],
            "interval": "YEARLY",
            "limit": {
              "amount": 75000,
              "currency_code": "USD"
            },
            "next_interval_reset": "2024-01-01T00:00:00+00:00",
            "start_of_interval": "2023-01-01T00:00:00+00:00",
            "temporary_limit": null,
            "transaction_amount_limit": null
          }
        },
        "properties": {
          "description": {
            "description": "Description of the spend program.",
            "type": "string"
          },
          "display_name": {
            "description": "Display name of the spend program.",
            "type": "string"
          },
          "icon": {
            "description": "The template icon for the spend program.",
            "enum": [
              "AccountingServicesIcon",
              "AdvertisingIcon",
              "CONTRACTORS_AND_PROFESSIONAL_SERVICES",
              "CUSTOM",
              "CardIcon",
              "EducationStipendIcon",
              "EmployeeRewardsIcon",
              "GroundTransportationIcon",
              "LegalFeesIcon",
              "LodgingIcon",
              "LunchOrderingIcon",
              "OnboardingIcon",
              "PerDiemCardIcon",
              "SOFTWARE",
              "SaasSubscriptionIcon",
              "SoftwareTrialIcon",
              "SuppliesIcon",
              "TeamSocialIcon",
              "TravelExpensesIcon",
              "VirtualEventIcon",
              "WellnessIcon",
              "WorkFromHomeIcon"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the spend program.",
            "format": "uuid",
            "type": "string"
          },
          "is_shareable": {
            "description": "Whether this spend program is shareable.",
            "type": "boolean"
          },
          "issue_physical_card_if_needed": {
            "description": "Indicates whether the spend program should issue a physical card if the user does not have one.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesDump"
              }
            ],
            "description": "Permitted spend types for the spend program."
          },
          "restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpendIntentApiSpendingRestrictionsDump"
              }
            ],
            "description": "A set of restrictions imposed on the spend program."
          }
        },
        "required": ["id"],
        "type": "object"
      },
      "ApiSpendingRestrictionsDump": {
        "properties": {
          "allowed_categories": {
            "description": " List of Ramp category codes allowed for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "allowed_vendors": {
            "description": "List of merchants allowed for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "auto_lock_date": {
            "description": "Date to automatically to lock the limit.",
            "format": "date-time",
            "type": "string"
          },
          "blocked_categories": {
            "description": "List of Ramp category codes blocked for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "blocked_vendors": {
            "description": "List of merchants  blocked for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval the limit is applied on.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount limit total per interval denominated in cents. Currency is USD.",
            "nullable": true
          },
          "next_interval_reset": {
            "description": "Date and time for the next interval reset.",
            "format": "date-time",
            "type": "string"
          },
          "start_of_interval": {
            "description": "Date and time for the start of the current interval.",
            "format": "date-time",
            "type": "string"
          },
          "temporary_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Temporary limit total per interval."
          },
          "transaction_amount_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Max amount allowed on a single transaction."
          }
        },
        "type": "object"
      },
      "ApiSpendingRestrictionsRequestBody": {
        "properties": {
          "allowed_categories": {
            "description": " List of Ramp category codes allowed for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "allowed_vendors": {
            "description": "List of merchants allowed for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "blocked_categories": {
            "description": "List of Ramp category codes blocked for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "blocked_mcc_codes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blocked_vendors": {
            "description": "List of merchants  blocked for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmountRequestBody"
              }
            ],
            "description": "Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents."
          },
          "lock_date": {
            "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
            "format": "date-time",
            "type": "string"
          },
          "transaction_amount_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmountRequestBody"
              }
            ],
            "description": "Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents."
          }
        },
        "required": ["interval", "limit"],
        "type": "object"
      },
      "ApiStatementItem": {
        "properties": {
          "cleared_at": {
            "description": "This field is only present for transactions, and it represents the time when the transaction was cleared. If the transaction is not cleared, this field will be null.",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "description": "For transactions, this field will represent the time when the card is swiped. For transfers / cashbacks, this will represent creation time.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": ["CARD_TRANSACTION", "CASHBACK", "TRANSFER_PAYMENT"],
            "type": "string"
          }
        },
        "required": ["created_at"],
        "type": "object"
      },
      "ApiSuspensionDump": {
        "properties": {
          "acting_user_id": {
            "description": "Unique identifier of the user who placed the suspension.",
            "format": "uuid",
            "type": "string"
          },
          "inserted_at": {
            "description": "Date and time at which suspension was placed.",
            "format": "date-time",
            "type": "string"
          },
          "suspended_by_ramp": {
            "description": "Whether the suspension is placed by Ramp.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiTransactionAccountingCategoryInfo": {
        "properties": {
          "external_id": {
            "description": "external id of accounting field; It should uniquely identify an accounting field on the ERP.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field",
            "type": "string"
          },
          "type": {
            "description": "accounting field type",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionAccountingFieldSelection": {
        "properties": {
          "category_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionAccountingCategoryInfo"
              }
            ],
            "description": "information about the accounting category (or accounting field)."
          },
          "external_code": {
            "description": "external code of accounting field option; Code field displayed on the ERP.",
            "type": "string"
          },
          "external_id": {
            "description": "external id of accounting field option; It should uniquely identify an accounting field option on the ERP.",
            "type": "string"
          },
          "id": {
            "description": "ID that uniquely identifies an accounting field option within Ramp",
            "type": "string"
          },
          "name": {
            "description": "name of accounting field option",
            "type": "string"
          },
          "type": {
            "description": "Accounting field type",
            "enum": [
              "AMORTIZATION_TEMPLATE",
              "BILLABLE",
              "COST_CENTER",
              "CUSTOMERS_JOBS",
              "DEFERRAL_CODE",
              "EXPENSE_ENTITY",
              "GL_ACCOUNT",
              "INVENTORY_ITEM",
              "JOURNAL",
              "MERCHANT",
              "OTHER",
              "PROJECT",
              "REPORTING_TAG",
              "SUBSIDIARY",
              "TAX_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionCardHolder": {
        "properties": {
          "department_id": {
            "description": "ID of the card holder's department.",
            "type": "string"
          },
          "department_name": {
            "description": "Name of the card holder's deparment.",
            "type": "string"
          },
          "first_name": {
            "description": "Card holder's first name.",
            "type": "string"
          },
          "last_name": {
            "description": "Card holder's last name.",
            "type": "string"
          },
          "location_id": {
            "description": "ID of the card holder's location.",
            "type": "string"
          },
          "location_name": {
            "description": "Name of the card holder's location.",
            "type": "string"
          },
          "user_id": {
            "description": "Card holder's ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionDeclineDetails": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "reason": {
            "enum": [
              "AUTHORIZER",
              "AUTHORIZER_AP_CARD_VELOCITY_LIMIT",
              "AUTHORIZER_BUSINESS_LIMIT",
              "AUTHORIZER_BUSINESS_VENDOR_BLACKLIST",
              "AUTHORIZER_CARD_AUTO_LOCK_DATE",
              "AUTHORIZER_CARD_CATEGORY_BLACKLIST",
              "AUTHORIZER_CARD_CATEGORY_WHITELIST",
              "AUTHORIZER_CARD_LIMIT",
              "AUTHORIZER_CARD_MCC_BLACKLIST",
              "AUTHORIZER_CARD_MISSING_POLICY_ITEMS",
              "AUTHORIZER_CARD_NOT_ACTIVATED",
              "AUTHORIZER_CARD_START_DATE",
              "AUTHORIZER_CARD_SUSPENDED",
              "AUTHORIZER_CARD_VENDOR_BLACKLIST",
              "AUTHORIZER_CARD_VENDOR_WHITELIST",
              "AUTHORIZER_COMMANDO_MODE",
              "AUTHORIZER_FRAUD",
              "AUTHORIZER_GLOBAL_MCC_BLACKLIST",
              "AUTHORIZER_NON_AP_CARD_VELOCITY_LIMIT",
              "AUTHORIZER_OOB_BLOCKED_MERCHANT",
              "AUTHORIZER_OOB_DAILY_BUSINESS_BALANCE",
              "AUTHORIZER_OOB_DAILY_CARD_SPEND",
              "AUTHORIZER_TRANSACTION_AMOUNT_LIMIT",
              "AUTHORIZER_USER_LIMIT",
              "AUTHORIZER_USER_SUSPENDED",
              "BLOCKED_COUNTRY",
              "CARD_EXPIRED",
              "CARD_TERMINATED",
              "CHIP_FAILLURE",
              "FORBIDDEN_CATEGORY",
              "INSECURE_AUTHORIZATION_METHOD",
              "MOBILE_WALLET_FAILURE",
              "NOT_ACTIVE",
              "NOT_ALLOWED",
              "NO_AUTO_ROUTED_LIMITS_AVAILABLE",
              "NO_LINKED_SPEND_ALLOCATION",
              "OFAC_VERIFICATION_NEEDED",
              "OPEN_TO_BUY_LIMIT",
              "OTHER",
              "PIN_BLOCKED",
              "PROCESSOR_CAP",
              "QUASI_CASH",
              "STRIPE_WEBHOOK_TIMEOUT",
              "SUSPECTED_BIN_ATTACK",
              "SUSPECTED_FRAUD",
              "USER_BLOCKED",
              "USER_TERMINATED",
              "WRONG_ADDRESS",
              "WRONG_CVV",
              "WRONG_EXPIRATION",
              "WRONG_POSTAL_CODE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionDispute": {
        "properties": {
          "created_at": {
            "description": "Time at which the dispute is created, presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Uniquely identifies a transaction dispute.",
            "format": "uuid",
            "type": "string"
          },
          "memo": {
            "description": "Free form text regarding the dispute.",
            "type": "string"
          },
          "type": {
            "description": "The dispute type; It could be one of the following values: RESOLVED_BY_RAMP, CANCELLED_BY_CUSTOMER, CANCELLED_BY_RAMP, CREATED_MERCHANT_ERROR and CREATED_UNRECOGNIZED_CHARGE.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionLineItem": {
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the line item.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the line item, denominated in the currency that the transaction was settled in.",
            "nullable": true
          },
          "memo": {
            "description": "Memo associated with the line item.",
            "type": "string"
          }
        },
        "required": ["amount"],
        "type": "object"
      },
      "ApiTransactionPolicyViolation": {
        "properties": {
          "created_at": {
            "description": "Time at which the policy violation is created, presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Uniquely identifies a policy violation.",
            "format": "uuid",
            "type": "string"
          },
          "memo": {
            "description": "Free form text regarding the policy violation.",
            "type": "string"
          },
          "type": {
            "description": "Type of the policy violation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTransactionPurchaseAutoRental": {
        "properties": {
          "check_out": {
            "type": "string"
          },
          "days": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiTransactionPurchaseData": {
        "properties": {
          "auto_rental": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseAutoRental"
              }
            ],
            "description": "Auto rental purchase data provided by the merchant",
            "nullable": true
          },
          "flight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseFlightData"
              }
            ],
            "description": "Flight purchase data provided by the merchant",
            "nullable": true
          },
          "lodging": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseLodging"
              }
            ],
            "description": "Lodging purchase data provided by the merchant",
            "nullable": true
          },
          "receipt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseReceipt"
              }
            ],
            "description": "Receipt purchase data provided by the merchant",
            "nullable": true
          },
          "reference": {
            "description": "Purchase data reference ID provided by the merchant",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["auto_rental", "flight", "lodging", "receipt", "reference"],
        "type": "object"
      },
      "ApiTransactionPurchaseFlightData": {
        "properties": {
          "departure_date": {
            "nullable": true,
            "type": "string"
          },
          "passenger_name": {
            "type": "string"
          },
          "segments": {
            "items": {
              "$ref": "#/components/schemas/ApiTransactionPurchaseFlightSegment"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": ["departure_date", "segments"],
        "type": "object"
      },
      "ApiTransactionPurchaseFlightSegment": {
        "properties": {
          "arrival_airport_code": {
            "type": "string"
          },
          "carrier": {
            "type": "string"
          },
          "departure_airport_code": {
            "type": "string"
          },
          "flight_number": {
            "type": "string"
          },
          "service_class": {
            "type": "string"
          },
          "stopover_allowed": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ApiTransactionPurchaseLodging": {
        "properties": {
          "check_in": {
            "type": "string"
          },
          "nights": {
            "nullable": true,
            "type": "integer"
          }
        },
        "required": ["nights"],
        "type": "object"
      },
      "ApiTransactionPurchaseReceipt": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApiTransactionPurchaseReceiptLineItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiTransactionPurchaseReceiptLineItem": {
        "properties": {
          "commodity_code": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discount": {
            "nullable": true,
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "tax": {
            "nullable": true,
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "unit_cost": {
            "type": "number"
          }
        },
        "required": ["commodity_code", "discount", "tax"],
        "type": "object"
      },
      "ApiUserCreateRequestBody": {
        "example": {
          "department_id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "direct_manager_id": "ccc5d4cc-337f-49a5-86b3-5df128233f2c",
          "email": "cardholder_7@company.com",
          "first_name": "Linda",
          "idempotency_key": "d471d830-2e73-4082-8a75-68540f83e86e",
          "last_name": "Gu",
          "location_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
          "role": "BUSINESS_USER"
        },
        "properties": {
          "department_id": {
            "description": "Unique identifier of the employee's department",
            "format": "uuid",
            "type": "string"
          },
          "direct_manager_id": {
            "description": "Unique identifier of the employee's direct manager",
            "format": "uuid",
            "type": "string"
          },
          "email": {
            "description": "The employee's email address",
            "format": "email",
            "type": "string"
          },
          "employee_id": {
            "description": "An alternative identifier for an employee, coming from external systems, which can be used in place of an email.",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the employee",
            "maxLength": 255,
            "type": "string"
          },
          "idempotency_key": {
            "description": "an idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the employee",
            "maxLength": 255,
            "type": "string"
          },
          "location_id": {
            "description": "Unique identifier of the employee's location",
            "format": "uuid",
            "type": "string"
          },
          "role": {
            "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a invitable role.",
            "enum": [
              "ADVISOR_CONSOLE_ADMIN",
              "ADVISOR_CONSOLE_USER",
              "AUDITOR",
              "BILL_PAY_ADMIN",
              "BUSINESS_ADMIN",
              "BUSINESS_BOOKKEEPER",
              "BUSINESS_OWNER",
              "BUSINESS_USER",
              "DEVELOPER_ADMIN",
              "GUEST_USER",
              "IT_ADMIN",
              "VENDOR_NETWORK_ADMIN"
            ],
            "type": "string"
          }
        },
        "required": ["email", "first_name", "last_name", "role"],
        "type": "object"
      },
      "ApiUserCustomField": {
        "properties": {
          "name": {
            "description": "Name of the custom field",
            "type": "string"
          },
          "value": {
            "description": "Value of the custom field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserDeferredTaskContext": {
        "properties": {
          "acting_user_id": {
            "description": "Unique identifier of the acting user that initiated the deferred task.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserDeferredTaskData": {
        "properties": {
          "error": {
            "description": "An error message if the deferred task fails",
            "type": "string"
          },
          "user_id": {
            "description": "The subject employee's ID of the deferred task.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserDeleteOptionRequestBody": {
        "properties": {
          "reassign_approvals_behavior": {
            "default": "REPLACE_WITH_MANAGER",
            "description": "Determine whether to either, reassign pending user approvals to their manager, reassign them to a specified user, or fail if there are approvals.",
            "enum": ["DO_NOT_REPLACE", "REPLACE_WITH_MANAGER", "REPLACE_WITH_USER"],
            "type": "string"
          },
          "replacement_approver_user_id": {
            "description": "Unique identifier of the replacement user. This user is going to replace the deleted user in the approval chain.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiUserUpdateRequestBody": {
        "example": {
          "department_id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "direct_manager_id": "ccc5d4cc-337f-49a5-86b3-5df128233f2c",
          "first_name": "Jeremy",
          "is_manager": true,
          "last_name": "Smith",
          "location_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
          "role": "BUSINESS_ADMIN"
        },
        "properties": {
          "auto_promote": {
            "description": "Whether to automatically promote the users manager to manager.",
            "type": "boolean"
          },
          "department_id": {
            "description": "Unique identifier of the employee's department",
            "format": "uuid",
            "type": "string"
          },
          "direct_manager_id": {
            "description": "Unique identifier of the employee's direct manager",
            "format": "uuid",
            "type": "string"
          },
          "employee_id": {
            "minLength": 1,
            "type": "string"
          },
          "first_name": {
            "minLength": 1,
            "type": "string"
          },
          "is_manager": {
            "description": "Whether the employee is a manager",
            "type": "boolean"
          },
          "last_name": {
            "minLength": 1,
            "type": "string"
          },
          "location_id": {
            "description": "Unique identifier of the employee's location",
            "format": "uuid",
            "type": "string"
          },
          "role": {
            "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a permissible value.",
            "enum": [
              "ADVISOR_CONSOLE_ADMIN",
              "ADVISOR_CONSOLE_USER",
              "AUDITOR",
              "BILL_PAY_ADMIN",
              "BUSINESS_ADMIN",
              "BUSINESS_BOOKKEEPER",
              "BUSINESS_OWNER",
              "BUSINESS_USER",
              "DEVELOPER_ADMIN",
              "GUEST_USER",
              "IT_ADMIN",
              "VENDOR_NETWORK_ADMIN"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Bill": {
        "example": {
          "accounting_field_selections": [],
          "amount": {
            "amount": 96993,
            "currency_code": "USD"
          },
          "created_at": "2024-05-12T01:37:27+00:00",
          "deep_link_url": null,
          "due_at": "2022-12-31T00:00:00+00:00",
          "entity_id": "5bcc3734-f03a-4756-bc4b-afeb52d738ad",
          "id": "6e3816e3-0e53-42ae-b075-bdb0adff10c4",
          "invoice_number": "432",
          "invoice_urls": ["https://receipts.ramp.com/some-url"],
          "issued_at": "2022-12-31T00:00:00+00:00",
          "line_items": [
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 1998,
                "currency_code": "USD"
              },
              "memo": "Telephone Headset"
            },
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 94995,
                "currency_code": "USD"
              },
              "memo": "2-Drawer Lateral File Cabinet Steel White"
            }
          ],
          "payment": {
            "amount": {
              "amount": 96993,
              "currency_code": "USD"
            },
            "effective_date": "2024-05-13T00:00:00+00:00",
            "payment_date": "2024-05-13T00:00:00+00:00",
            "payment_method": "ACH"
          },
          "remote_id": null,
          "status": "OPEN",
          "user": {
            "first_name": "John",
            "id": "96bb7007-eec5-430f-8d09-e033cbc000c2",
            "last_name": "Doe"
          },
          "vendor": {
            "remote_id": "Amazon",
            "remote_name": "Amazon",
            "type": "BUSINESS"
          }
        },
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting field options selected to code the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiBillAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the bill."
          },
          "bill_owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillOwner"
              }
            ],
            "description": "Information about the bill owner."
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "deep_link_url": {
            "type": "string"
          },
          "due_at": {
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity.",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "invoice_number": {
            "description": "The invoice number on the bill.",
            "type": "string"
          },
          "invoice_urls": {
            "description": "Pre-signed urls to download invoice files.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issued_at": {
            "format": "date-time",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items related to the bill.",
            "items": {
              "$ref": "#/components/schemas/ApiBillLineItem"
            },
            "type": "array"
          },
          "matching_transaction_id": {
            "description": "Retrieve the most likely matching transaction ID for a bill, applicable only if paid with a Ramp card.",
            "format": "uuid",
            "type": "string"
          },
          "memo": {
            "description": "Memo of the bill.",
            "type": "string"
          },
          "payment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillPayment"
              }
            ],
            "description": "Payment information of the bill.",
            "nullable": true
          },
          "remote_id": {
            "description": "An ID that identifies the bill on client's side.",
            "type": "string"
          },
          "status": {
            "enum": ["OPEN", "PAID"],
            "type": "string"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiBillVendor"
              }
            ],
            "description": "Vendor information of the bill."
          }
        },
        "required": ["amount", "created_at", "due_at", "id", "issued_at", "status", "vendor"],
        "type": "object"
      },
      "Business": {
        "example": {
          "active": true,
          "billing_address": {
            "address1": "123 Main St",
            "city": "New York City",
            "country": "US",
            "postal_code": "10003",
            "state": "NY"
          },
          "business_name_legal": "Sushi Luncheonette",
          "business_name_on_card": "Sushi Luncheonette",
          "created_time": "2022-08-20T16:54:29+00:00",
          "enforce_sso": false,
          "id": "9abffcf0-dd7d-42f0-b806-ce0502ab6496",
          "initial_approved_limit": 2000000,
          "is_integrated_with_slack": false,
          "limit_locked": false,
          "phone": "8014441234",
          "website": "www.ramp.com"
        },
        "properties": {
          "active": {
            "type": "boolean"
          },
          "billing_address": {
            "$ref": "#/components/schemas/CardShippingAddress"
          },
          "business_name_legal": {
            "type": "string"
          },
          "business_name_on_card": {
            "type": "string"
          },
          "created_time": {
            "format": "date-time",
            "type": "string"
          },
          "enforce_sso": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "initial_approved_limit": {
            "type": "integer"
          },
          "is_integrated_with_slack": {
            "type": "boolean"
          },
          "is_reimbursements_enabled": {
            "type": "boolean"
          },
          "limit_locked": {
            "type": "boolean"
          },
          "phone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        },
        "required": ["is_reimbursements_enabled"],
        "type": "object"
      },
      "BusinessBalance": {
        "example": {
          "available_card_limit": 2000000,
          "available_flex_limit": 0,
          "balance_including_pending": 6271.22,
          "card_balance_excluding_pending": 4941.29,
          "card_balance_including_pending": 6271.22,
          "card_limit": 2000000,
          "flex_balance": 0,
          "flex_limit": 0,
          "float_balance_excluding_pending": 0,
          "global_limit": 2000000,
          "max_balance": 2000000,
          "next_billing_date": "09/17/2022",
          "prev_billing_date": "08/21/2022",
          "statement_balance": 4941.29
        },
        "properties": {
          "available_card_limit": {
            "type": "number"
          },
          "available_flex_limit": {
            "type": "number"
          },
          "balance_including_pending": {
            "type": "number"
          },
          "card_balance_excluding_pending": {
            "type": "number"
          },
          "card_balance_including_pending": {
            "type": "number"
          },
          "card_limit": {
            "type": "number"
          },
          "flex_balance": {
            "type": "number"
          },
          "flex_limit": {
            "type": "number"
          },
          "float_balance_excluding_pending": {
            "type": "number"
          },
          "global_limit": {
            "type": "number"
          },
          "max_balance": {
            "type": "number"
          },
          "next_billing_date": {
            "type": "string"
          },
          "prev_billing_date": {
            "type": "string"
          },
          "statement_balance": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "Card": {
        "example": {
          "card_program_id": null,
          "cardholder_id": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
          "cardholder_name": "Julie Phillip",
          "created_at": "2022-05-04T00:00:00+00:00",
          "display_name": "T&E",
          "entity_id": "c6c61be9-f278-47bc-a814-f98a7fc2dfdc",
          "expiration": "0227",
          "fulfillment": {
            "fulfillment_status": "ISSUED",
            "shipping": {
              "recipient_address": {
                "address1": "123 Main St",
                "city": "New York City",
                "country": "US",
                "first_name": "Julie",
                "last_name": "Phillip",
                "postal_code": "10003",
                "state": "NY"
              }
            },
            "shipping_date": null,
            "shipping_eta": null,
            "shipping_tracking_url": null
          },
          "has_program_overridden": false,
          "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
          "is_physical": false,
          "last_four": "3751",
          "spending_restrictions": {
            "amount": 5000,
            "auto_lock_date": null,
            "blocked_categories": [],
            "categories": [],
            "interval": "MONTHLY",
            "suspended": false,
            "transaction_amount_limit": null
          },
          "state": "ACTIVE"
        },
        "properties": {
          "card_program_id": {
            "description": "Unique identifier of the card program.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "cardholder_id": {
            "description": "Unique identifier of the card holder.",
            "format": "uuid",
            "type": "string"
          },
          "cardholder_name": {
            "description": "Card holder's full name.",
            "type": "string"
          },
          "created_at": {
            "description": "Date time at which the card is created. It conforms to ISO8601 format",
            "format": "date-time",
            "type": "string"
          },
          "display_name": {
            "description": "Cosmetic display name of the card.",
            "type": "string"
          },
          "entity_id": {
            "description": "Unique identifier of the associated business entity.",
            "format": "uuid",
            "type": "string"
          },
          "expiration": {
            "description": "Expiration date in the format of MMYY.",
            "type": "string"
          },
          "fulfillment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardFulfillment"
              }
            ],
            "description": "Fulfillment details of a Ramp card. For physical cards only."
          },
          "has_program_overridden": {
            "description": "Whether the card has overridden the default settings from its card program.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier of the card.",
            "format": "uuid",
            "type": "string"
          },
          "is_physical": {
            "type": "boolean"
          },
          "last_four": {
            "description": "Last four digits of the card number.",
            "type": "string"
          },
          "spending_restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardSpendingRestrictionsDump"
              }
            ],
            "description": "Specifies the spend restrictions on a Ramp card."
          },
          "state": {
            "description": "State of the card",
            "enum": ["ACTIVE", "CHIP_LOCKED", "SUSPENDED", "TERMINATED", "UNACTIVATED"],
            "type": "string"
          }
        },
        "required": ["card_program_id"],
        "type": "object"
      },
      "CardDeferredTask": {
        "example": {
          "context": {
            "acting_user_id": "c45f22e0-4c15-4a64-8580-3819e89baf6d"
          },
          "data": {
            "card_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee"
          },
          "id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "status": "SUCCESS"
        },
        "properties": {
          "context": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardDeferredTaskContext"
              }
            ],
            "description": "Further context for the deferred task."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiCardDeferredTaskData"
              }
            ],
            "description": "Detailed data of the deferred task."
          },
          "id": {
            "description": "Unique identifier of the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "description": "Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardFulfillmentRequestBody": {
        "properties": {
          "card_personalization": {
            "$ref": "#/components/schemas/CardPersonalizationRequestBody"
          },
          "cardholder_uuid": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "shipping": {
            "$ref": "#/components/schemas/CardShippingRequestBody"
          }
        },
        "type": "object"
      },
      "CardPersonalization": {
        "properties": {
          "text": {
            "$ref": "#/components/schemas/CardPersonalizationText"
          }
        },
        "type": "object"
      },
      "CardPersonalizationNameLine": {
        "properties": {
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardPersonalizationNameLineRequestBody": {
        "properties": {
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CardPersonalizationRequestBody": {
        "properties": {
          "text": {
            "$ref": "#/components/schemas/CardPersonalizationTextRequestBody"
          }
        },
        "type": "object"
      },
      "CardPersonalizationText": {
        "properties": {
          "name_line_1": {
            "$ref": "#/components/schemas/CardPersonalizationNameLine"
          },
          "name_line_2": {
            "$ref": "#/components/schemas/CardPersonalizationNameLine"
          }
        },
        "type": "object"
      },
      "CardPersonalizationTextRequestBody": {
        "properties": {
          "name_line_1": {
            "$ref": "#/components/schemas/CardPersonalizationNameLineRequestBody"
          },
          "name_line_2": {
            "$ref": "#/components/schemas/CardPersonalizationNameLineRequestBody"
          }
        },
        "type": "object"
      },
      "CardShipping": {
        "properties": {
          "method": {
            "nullable": true,
            "type": "string"
          },
          "recipient_address": {
            "$ref": "#/components/schemas/CardShippingAddress"
          },
          "recipient_address_verification_state": {
            "enum": ["NOT_VERIFIED", "OVERRIDEN", "VERIFIED"],
            "nullable": true,
            "type": "string"
          },
          "return_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardShippingAddress"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "CardShippingAddress": {
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "nullable": true,
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["address1", "city", "country", "first_name", "last_name", "postal_code"],
        "type": "object"
      },
      "CardShippingAddressRequestBody": {
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "nullable": true,
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["address1", "city", "country", "first_name", "last_name", "postal_code"],
        "type": "object"
      },
      "CardShippingRequestBody": {
        "properties": {
          "method": {
            "nullable": true,
            "type": "string"
          },
          "recipient_address": {
            "$ref": "#/components/schemas/CardShippingAddressRequestBody"
          },
          "recipient_address_verification_state": {
            "enum": ["NOT_VERIFIED", "OVERRIDEN", "VERIFIED"],
            "nullable": true,
            "type": "string"
          },
          "return_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardShippingAddressRequestBody"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "Cashback": {
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Dollar amount of the cashback payment."
          },
          "created_at": {
            "description": "Timestamp at which the cash payment is made. Presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "description": "Unique identifier of the associated business entity.",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the cashback payment.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CurrencyAmount": {
        "properties": {
          "amount": {
            "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.",
            "type": "integer"
          },
          "currency_code": {
            "default": "USD",
            "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars",
            "type": "string"
          }
        },
        "required": ["amount", "currency_code"],
        "type": "object"
      },
      "CurrencyAmountRequestBody": {
        "properties": {
          "amount": {
            "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.",
            "type": "integer"
          },
          "currency_code": {
            "default": "USD",
            "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars",
            "type": "string"
          }
        },
        "required": ["amount"],
        "type": "object"
      },
      "CustomFieldOption": {
        "example": {
          "created_at": "2019-08-28T14:15:22+00:00",
          "id": "123",
          "is_active": true,
          "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
          "remote_code": "20001",
          "updated_at": "2020-08-28T14:40:12+00:00",
          "value": "Office/Admin:Phone & Internet"
        },
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "ramp_id": {
            "description": "id to uniquely identify a custom field option within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "remote_code": {
            "description": "A unique identifier for the custom field option in the remote ERP system.",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "A vendor is a person or business that provides goods or services",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeferredTaskUUID": {
        "properties": {
          "id": {
            "description": "ID of the deferred task.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["id"],
        "type": "object"
      },
      "Department": {
        "example": {
          "id": "c16b6ee1-2f5d-45e9-9fb4-c1c541a9ea70",
          "name": "Bookkeeping"
        },
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object"
      },
      "DeveloperAPINestedPage": {
        "example": {
          "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
        },
        "properties": {
          "next": {
            "description": "the query to get to the next page; it is in the format of <BASE_URL>?<new_params>",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["next"],
        "type": "object"
      },
      "EntityProviderAccount": {
        "properties": {
          "classification": {
            "enum": ["ASSET", "CREDCARD", "EQUITY", "EXPENSE", "LIABILITY", "REVENUE", "UNKNOWN"],
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "external_id": {
            "description": "External ID of the account",
            "type": "string"
          },
          "external_name": {
            "description": "External name of the account",
            "type": "string"
          },
          "internal_id": {
            "description": "Internal ID of the account, when applicable",
            "type": "string"
          },
          "usage_type": {
            "enum": [
              "BILL_PAY_ACCOUNTS_PAYABLE_ACCOUNT",
              "BILL_PAY_BANK_ACCOUNT",
              "BILL_PAY_FX_GAIN_LOSS_ACCOUNT",
              "CARD_LIABILITY_ACCOUNT",
              "CARD_TRANSACTION_BILLS_ACCOUNTS_PAYABLE_ACCOUNT",
              "CASHBACK_ACCOUNT",
              "CASH_ACCOUNT",
              "INTERCOMPANY_ACCOUNTS_PAYABLE_ACCOUNT",
              "INTERCOMPANY_ACCOUNTS_RECEIVABLE_ACCOUNT",
              "INTERCOMPANY_TRANSFER_CLEARING_ACCOUNT",
              "REIMBURSEMENT_ACCOUNTS_PAYABLE_ACCOUNT",
              "REIMBURSEMENT_BANK_ACCOUNT",
              "TRANSFER_BANK_ACCOUNT",
              "WALLET_ACCOUNT",
              "WALLET_BANK_ACCOUNT",
              "WALLET_YIELD_ACCOUNT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldOption": {
        "example": {
          "id": "514",
          "value": "Employees:Salaries & Wages"
        },
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "description": "e.g. Employees:Salaries & Wages",
            "type": "string"
          }
        },
        "required": ["id", "value"],
        "type": "object"
      },
      "GLAccount": {
        "example": {
          "classification": "EXPENSE",
          "code": "6410",
          "id": "514",
          "name": "Employees:Salaries & Wages"
        },
        "properties": {
          "classification": {
            "enum": ["ASSET", "CREDCARD", "EQUITY", "EXPENSE", "LIABILITY", "REVENUE", "UNKNOWN"],
            "type": "string"
          },
          "code": {
            "description": "e.g. 400-100.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "e.g. Travel : Travel - Lodging.",
            "type": "string"
          }
        },
        "required": ["classification", "id", "name"],
        "type": "object"
      },
      "GeneralLedgerAccount": {
        "example": {
          "classification": "EXPENSE",
          "code": "6410",
          "created_at": "2019-08-28T14:15:22+00:00",
          "id": "514",
          "is_active": true,
          "name": "Employees:Salaries & Wages",
          "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
          "updated_at": "2020-08-28T14:40:12+00:00"
        },
        "properties": {
          "classification": {
            "enum": ["ASSET", "CREDCARD", "EQUITY", "EXPENSE", "LIABILITY", "REVENUE", "UNKNOWN"],
            "type": "string"
          },
          "code": {
            "description": "e.g. 400-100.",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "name": {
            "description": "e.g. Travel : Travel - Lodging.",
            "type": "string"
          },
          "ramp_id": {
            "description": "id to uniquely identify a general ledger account within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Lead": {
        "example": {
          "business_info": {
            "business_description": "We are in the empire business",
            "business_name_dba": "White & Pinkman Inc.",
            "business_name_legal": "White & Pinkman Inc.",
            "business_name_website": "www.whiteandpinkman.com",
            "date_of_incorporation": "2004-01-01",
            "ein_number": "12-3456789",
            "entity_type": "CORPORATION",
            "estimated_monthly_spend": "10,000",
            "industry": "Food Products",
            "industry_group": "Food, Beverage & Tobacco",
            "office_address": {
              "office_city": "Albuquerque",
              "office_country": "US",
              "office_postal_code": "100022",
              "office_state": "New Mexico",
              "office_street_address": "100 Main Street"
            },
            "sector": "Consumer Staples",
            "state_of_incorporation": "New Mexico"
          },
          "created_at": "",
          "email": "lead@whiteandpinkman.com",
          "external_id": "f26bfdb5-beei-4875-a9b5-a29f8af6f381",
          "first_name": "Walter",
          "id": "97ad0c67-c318-4591-9b0e-202ecceb8016",
          "last_name": "White",
          "source": "White & Pinkman",
          "updated_at": ""
        },
        "properties": {
          "business_info": {
            "$ref": "#/components/schemas/ApiSalesLeadBusinessDump"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "financing_application_status": {
            "enum": [
              "ALLOY_COMPLETE",
              "Admin Approved",
              "DELETED",
              "DOCUMENTS_REQUIRED",
              "DOCUMENTS_SUBMITTED",
              "KYC Approved",
              "OPS_REVIEW",
              "Pending",
              "Rejected",
              "Submitted",
              "Withdrawn"
            ],
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "source": {
            "enum": ["AngelList", "Quanta"],
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["external_id", "source"],
        "type": "object"
      },
      "Light Receipt": {
        "example": {
          "id": "0a0ed428-0250-4993-96ad-94cd77bc86b6"
        },
        "properties": {
          "id": {
            "description": "Unique identifier of the receipt.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Location": {
        "example": {
          "entity_id": "bb25a7e8-cc2f-4ba7-9bf4-7730ffe152bb",
          "id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
          "name": "New York City, NY"
        },
        "properties": {
          "entity_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object"
      },
      "Memo": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "memo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Merchant": {
        "example": {
          "id": "d38a988c-377a-421b-9017-0c8f40a4304e",
          "merchant_name": "Google",
          "sk_category_name": "Advertising"
        },
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "merchant_name": {
            "type": "string"
          },
          "sk_category_name": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["sk_category_name"],
        "type": "object"
      },
      "NestedPage": {
        "properties": {
          "next": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["next"],
        "type": "object"
      },
      "PaginatedResponseApiAccountingCustomFieldOptionResourceSchema": {
        "example": {
          "data": [
            {
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "123",
              "is_active": true,
              "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
              "remote_code": "20001",
              "updated_at": "2020-08-28T14:40:12+00:00",
              "value": "Office/Admin:Phone & Internet"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CustomFieldOption"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiAccountingCustomFieldResourceSchema": {
        "example": {
          "data": [
            {
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "Department",
              "input_type": "SINGLE_CHOICE",
              "is_active": true,
              "is_splittable": true,
              "name": "Department",
              "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
              "updated_at": "2020-08-28T14:40:12+00:00"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiAccountingCustomFieldResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiAccountingGLAccountResourceSchema": {
        "example": {
          "data": [
            {
              "classification": "EXPENSE",
              "code": "6410",
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "514",
              "is_active": true,
              "name": "Employees:Salaries & Wages",
              "ramp_id": "46910cc3-ab41-4b80-b4a7-94dab9f1b795",
              "updated_at": "2020-08-28T14:40:12+00:00"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/GeneralLedgerAccount"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiAccountingVendorResourceSchema": {
        "example": {
          "data": [
            {
              "code": "19566",
              "created_at": "2019-08-28T14:15:22+00:00",
              "id": "123",
              "is_active": true,
              "is_synced": true,
              "name": "Amazon",
              "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
              "updated_at": "2020-08-28T14:40:12+00:00"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/VendorAccount"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiBillResourceSchema": {
        "example": {
          "data": [
            {
              "accounting_field_selections": [],
              "amount": {
                "amount": 96993,
                "currency_code": "USD"
              },
              "created_at": "2024-05-12T01:37:27+00:00",
              "deep_link_url": null,
              "due_at": "2022-12-31T00:00:00+00:00",
              "entity_id": "5bcc3734-f03a-4756-bc4b-afeb52d738ad",
              "id": "6e3816e3-0e53-42ae-b075-bdb0adff10c4",
              "invoice_number": "432",
              "invoice_urls": ["https://receipts.ramp.com/some-url"],
              "issued_at": "2022-12-31T00:00:00+00:00",
              "line_items": [
                {
                  "accounting_field_selections": [],
                  "amount": {
                    "amount": 1998,
                    "currency_code": "USD"
                  },
                  "memo": "Telephone Headset"
                },
                {
                  "accounting_field_selections": [],
                  "amount": {
                    "amount": 94995,
                    "currency_code": "USD"
                  },
                  "memo": "2-Drawer Lateral File Cabinet Steel White"
                }
              ],
              "payment": {
                "amount": {
                  "amount": 96993,
                  "currency_code": "USD"
                },
                "effective_date": "2024-05-13T00:00:00+00:00",
                "payment_date": "2024-05-13T00:00:00+00:00",
                "payment_method": "ACH"
              },
              "remote_id": null,
              "status": "OPEN",
              "user": {
                "first_name": "John",
                "id": "96bb7007-eec5-430f-8d09-e033cbc000c2",
                "last_name": "Doe"
              },
              "vendor": {
                "remote_id": "Amazon",
                "remote_name": "Amazon",
                "type": "BUSINESS"
              }
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Bill"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiCardProgramResourceSchema": {
        "example": {
          "data": [
            {
              "description": "Offer a yearly stipend for conferences and courses.",
              "display_name": "Education Stipend",
              "icon": "EducationStipendIcon",
              "id": "97ad0c67-c318-4591-9b0e-202ecceb8016",
              "is_default": false,
              "is_physical": false,
              "spending_restrictions": {
                "amount": 750,
                "categories": [33],
                "interval": "YEARLY",
                "lock_date": "2024-08-20T00:00:00+00:00",
                "transaction_amount_limit": 200
              }
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiCardProgramResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiCardResourceSchema": {
        "example": {
          "data": [
            {
              "card_program_id": null,
              "cardholder_id": "3a5b1f62-988f-4190-bf31-b7ae87c5df42",
              "cardholder_name": "Julie Phillip",
              "created_at": "2022-05-04T00:00:00+00:00",
              "display_name": "T&E",
              "entity_id": "c6c61be9-f278-47bc-a814-f98a7fc2dfdc",
              "expiration": "0227",
              "fulfillment": {
                "fulfillment_status": "ISSUED",
                "shipping": {
                  "recipient_address": {
                    "address1": "123 Main St",
                    "city": "New York City",
                    "country": "US",
                    "first_name": "Julie",
                    "last_name": "Phillip",
                    "postal_code": "10003",
                    "state": "NY"
                  }
                },
                "shipping_date": null,
                "shipping_eta": null,
                "shipping_tracking_url": null
              },
              "has_program_overridden": false,
              "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
              "is_physical": false,
              "last_four": "3751",
              "spending_restrictions": {
                "amount": 5000,
                "auto_lock_date": null,
                "blocked_categories": [],
                "categories": [],
                "interval": "MONTHLY",
                "suspended": false,
                "transaction_amount_limit": null
              },
              "state": "ACTIVE"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Card"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiCashbackResourceSchema": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Cashback"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiDepartmentResourceSchema": {
        "example": {
          "data": [
            {
              "id": "c16b6ee1-2f5d-45e9-9fb4-c1c541a9ea70",
              "name": "Bookkeeping"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Department"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiLocationResourceSchema": {
        "example": {
          "data": [
            {
              "entity_id": "bb25a7e8-cc2f-4ba7-9bf4-7730ffe152bb",
              "id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
              "name": "New York City, NY"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiMemoResourceSchema": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Memo"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiMerchantResourceSchema": {
        "example": {
          "data": [
            {
              "id": "d38a988c-377a-421b-9017-0c8f40a4304e",
              "merchant_name": "Google",
              "sk_category_name": "Advertising"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Merchant"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiReceiptResourceSchema": {
        "example": {
          "data": [
            {
              "created_at": "2022-08-20T20:33:46+00:00",
              "id": "0a0ed428-0250-4993-96ad-94cd77bc86b6",
              "receipt_url": "https://receipts.ramp.com/sales_demo_instance/amazon_business_receipt.png?Expires=1661130671",
              "transaction_id": "065916d9-7bdf-4aae-a46a-9b82225f2a20",
              "user_id": "ea0d554a-78bb-4402-a3e9-2d4bc138502f"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Receipt"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiReimbursementResourceSchema": {
        "example": {
          "data": [
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "Category",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
                  "name": "Category",
                  "type": "GL_ACCOUNT"
                }
              ],
              "amount": 484.46,
              "created_at": "2023-08-20T:00:00+00:00",
              "currency": "USD",
              "direction": "BUSINESS_TO_USER",
              "distance": 55,
              "entity_id": "4bec9dc1-710e-4781-b254-fc606c76a241",
              "id": "d47ba06e-14ac-4a7b-89b4-4775412ba545",
              "line_items": [
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Category",
                        "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                        "name": "Category",
                        "type": "GL_ACCOUNT"
                      },
                      "external_id": "425",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                      "name": "Ramp LP",
                      "type": "Subsidiary"
                    }
                  ],
                  "amount": {
                    "amount": 43446,
                    "currency_code": "USD"
                  }
                },
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Category",
                        "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                        "name": "Category",
                        "type": "GL_ACCOUNT"
                      },
                      "external_id": "426",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                      "name": "Ramp BV",
                      "type": "Subsidiary"
                    }
                  ],
                  "amount": {
                    "amount": 5000,
                    "currency_code": "USD"
                  }
                }
              ],
              "memo": "Airfare for business travel",
              "merchant": "Delta Airlines",
              "original_reimbursement_amount": {
                "amount": 48446,
                "currency_code": "USD"
              },
              "payee_amount": {
                "amount": 48446,
                "currency_code": "USD"
              },
              "payment_id": "NDPHKHCN6G",
              "receipts": [],
              "spend_limit_id": "92a68991-8374-4c0a-b5c0-5180c41b5148",
              "state": "REIMBURSED",
              "synced_at": "2023-08-21T:00:00+00:00",
              "transaction_date": "2022-08-19",
              "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
              "type": "OUT_OF_POCKET",
              "updated_at": "2023-08-22T:00:00+00:00",
              "user_email": "dwight@dundermilflin.com",
              "user_full_name": "Dwight Schrute",
              "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Reimbursement"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiSpendLimitResourceSchema": {
        "example": {
          "data": [
            {
              "balance": {
                "cleared": 65.0,
                "pending": 35.0,
                "total": 100.0
              },
              "cards": [
                {
                  "card_id": "a40a6ce8-70d4-4d06-91e1-0728ad9bbe39"
                }
              ],
              "display_name": "T&E",
              "entity_id": "c18d9d2e-964f-476d-8bb3-9ac078f00e11",
              "has_program_overridden": false,
              "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
              "is_shareable": true,
              "permitted_spend_types": {
                "primary_card_enabled": true,
                "reimbursements_enabled": false
              },
              "restrictions": {
                "auto_lock_date": null,
                "categories_whitelist": [35],
                "interval": "MONTHLY",
                "limit": 500,
                "next_interval_reset": "2022-12-01T00:00:00+00:00",
                "start_of_interval_date": "2022-11-01T00:00:00+00:00",
                "temporary_limit": null,
                "transaction_amount_limit": 200,
                "vendor_blacklist": [61]
              },
              "spend_program_id": "3a5b1f62-988f-4190-bf31-b7ae87c5dfee",
              "state": "ACTIVE",
              "suspension": {
                "acting_user_id": "e9186c3a-4650-48ef-aee4-56b77f5019bd",
                "inserted_at": "2022-11-03T00:00:00+00:00",
                "suspended_by_ramp": false
              },
              "users": [
                {
                  "user_id": "2ba219ba-5867-453f-bec2-b8d0414b7f75"
                }
              ]
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/limit"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiSpendProgramResourceSchema": {
        "example": {
          "data": [
            {
              "description": "Offer a yearly stipend for conferences and courses.",
              "display_name": "Education Stipend",
              "icon": "EducationStipendIcon",
              "id": "796dab75-a23f-4e2a-984e-20da003c38ef",
              "is_shareable": true,
              "issue_physical_card_if_needed": false,
              "permitted_spend_types": {
                "primary_card_enabled": true,
                "reimbursements_enabled": true
              },
              "restrictions": {
                "allowed_categories": [33],
                "allowed_vendors": [],
                "auto_lock_date": "2025-10-28T00:00:00+00:00",
                "blocked_categories": [],
                "blocked_vendors": [],
                "interval": "YEARLY",
                "limit": {
                  "amount": 75000,
                  "currency_code": "USD"
                },
                "next_interval_reset": "2024-01-01T00:00:00+00:00",
                "start_of_interval": "2023-01-01T00:00:00+00:00",
                "temporary_limit": null,
                "transaction_amount_limit": null
              }
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApiSpendProgramResource"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiStatementResourceSchema": {
        "example": {
          "data": [
            {
              "balance_sections": [
                {
                  "charges": {
                    "amount": 180061925,
                    "currency_code": "USD"
                  },
                  "credits": {
                    "amount": 0,
                    "currency_code": "USD"
                  },
                  "ending_balance": {
                    "amount": 178098867,
                    "currency_code": "USD"
                  },
                  "entity_id": "9d8abf0f-389c-4a18-816e-a6e1c5784624",
                  "id": "6ff695fd-b09b-4529-a622-545d6c059129",
                  "opening_balance": {
                    "amount": 0,
                    "currency_code": "USD"
                  },
                  "payments": {
                    "amount": 1963058,
                    "currency_code": "USD"
                  }
                }
              ],
              "charges": {
                "amount": 180061925,
                "currency_code": "USD"
              },
              "credits": {
                "amount": 0,
                "currency_code": "USD"
              },
              "end_date": "2023-05-08T08:39:37+00:00",
              "ending_balance": {
                "amount": 178098867,
                "currency_code": "USD"
              },
              "id": "df44006c-410b-420e-80a2-1522a2e5b722",
              "opening_balance": {
                "amount": 0,
                "currency_code": "USD"
              },
              "payments": {
                "amount": 1963058,
                "currency_code": "USD"
              },
              "start_date": "2023-05-06T08:51:57+00:00",
              "statement_lines": [
                {
                  "id": "06a09605-b0b8-4c89-b29f-d12c6aabac58",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "0f01bc2d-04cf-407a-8442-bcbdaf1c07f8",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "2682717d-8231-46f2-9e02-c0f4f7ef410a",
                  "type": "TRANSFER_PAYMENT"
                },
                {
                  "id": "415fe9fb-1608-4cd6-ac8b-d2fbb85bdc11",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "4c7700b6-1ff9-4228-9b13-73b38d5a7623",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "61b89311-f0b3-4689-91ee-8edb72054de4",
                  "type": "CARD_TRANSACTION"
                },
                {
                  "id": "78c9eac8-67ae-443d-998a-f416e959225c",
                  "type": "CASHBACK"
                },
                {
                  "id": "af87a6bd-929a-4de6-85f3-0105a046a608",
                  "type": "CARD_TRANSACTION"
                }
              ]
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Statement"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiTransactionCanonicalSchema": {
        "example": {
          "data": [
            {
              "accounting_categories": [],
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "Category",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
                  "name": "Category",
                  "type": "GL_ACCOUNT"
                }
              ],
              "amount": 90.0,
              "card_holder": {
                "department_id": "d471d830-2e73-4082-8a75-68540f83e86e",
                "department_name": "Executive",
                "first_name": "Patrick",
                "last_name": "Robinson",
                "location_id": "4fcf3423-a2e6-42f6-8dd8-9b3a8c51e069",
                "location_name": "San Francisco",
                "user_id": "a26c82c9-6b7d-4022-bc4b-a55b4c4743c7"
              },
              "card_id": "6bc41b14-f853-4862-bae5-4f122f123f6e",
              "currency_code": "USD",
              "disputes": [],
              "entity_id": "24850cdb-1b3f-4eb9-bf20-967ca9f97605",
              "id": "fd14cd6a-846e-4994-9315-5a59e6bb465f",
              "line_items": [
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Subsidiary",
                        "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                        "name": "Subsidiary",
                        "type": "SUBSIDIARY"
                      },
                      "external_id": "425",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                      "name": "Ramp LP",
                      "type": "Subsidiary"
                    }
                  ],
                  "amount": {
                    "amount": 4000,
                    "currency_code": "USD"
                  }
                },
                {
                  "accounting_field_selections": [
                    {
                      "category_info": {
                        "external_id": "Subsidiary",
                        "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                        "name": "Subsidiary",
                        "type": "SUBSIDIARY"
                      },
                      "external_id": "426",
                      "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                      "name": "Ramp BV",
                      "type": "SUBSIDIARY"
                    }
                  ],
                  "amount": {
                    "amount": 5000,
                    "currency_code": "USD"
                  }
                }
              ],
              "memo": null,
              "merchant_category_code": null,
              "merchant_category_code_description": null,
              "merchant_data": {
                "auto_rental": null,
                "flight": null,
                "fuel": null,
                "lodging": null,
                "receipt": [
                  {
                    "commodity_code": null,
                    "description": "Vanta Automated Compliance",
                    "discount": null,
                    "quantity": 1,
                    "tax": null,
                    "total": 5000,
                    "unit_cost": 5000
                  },
                  {
                    "commodity_code": null,
                    "description": "Vanta Risk Management",
                    "discount": null,
                    "quantity": 1,
                    "tax": null,
                    "total": 4000,
                    "unit_cost": 4000
                  }
                ],
                "reference": "343165593943"
              },
              "merchant_descriptor": "VANTA",
              "merchant_id": "2907e304-cac2-4abf-84c4-b3b454ae3b8c",
              "merchant_location": {
                "city": "SAN FRANCISCO",
                "country": "USA",
                "postal_code": "941050000",
                "state": "06"
              },
              "merchant_name": "Vanta",
              "original_transaction_amount": {
                "amount": 9000,
                "currency_code": "EUR"
              },
              "policy_violations": [],
              "receipts": [],
              "settlement_date": "2022-05-03T00:00:00+00:00",
              "sk_category_id": "40,41",
              "sk_category_name": "SaaS / Software",
              "state": "CLEARED",
              "synced_at": "2022-05-04T00:00:00+00:00",
              "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
              "trip_name": "Trip to Europe",
              "user_transaction_time": "2022-04-28T00:00:00+00:00"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiTransferResourceSchema": {
        "example": {
          "data": [{}],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Transfer"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PaginatedResponseApiUserResourceSchema": {
        "example": {
          "data": [
            {
              "business_id": "9abffcf0-dd7d-42f0-b806-ce0502ab6496",
              "custom_fields": [
                {
                  "name": "Cost Center",
                  "value": "R&D - Data"
                },
                {
                  "name": "Employee ID",
                  "value": "f4efe11c-337f-49a5-86b3-5df128233f2c"
                },
                {
                  "name": "Region",
                  "value": "EMEA"
                },
                {
                  "name": "Team",
                  "value": "Core Platform"
                }
              ],
              "department_id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
              "email": "cardholder_7@company.com",
              "employee_id": "f4efe11c-337f-49a5-86b3-5df128233f2c",
              "entity_id": "0e90959a-28ba-4f7d-a75b-9c241f384b9a",
              "first_name": "Linda",
              "id": "bde8334e-042e-4f39-9a5d-355ae17342e6",
              "is_manager": false,
              "last_name": "Gu",
              "location_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
              "manager_id": "ccc5d4cc-337f-49a5-86b3-5df128233f2c",
              "phone": 8004559999,
              "role": "BUSINESS_USER",
              "status": "USER_ACTIVE"
            }
          ],
          "page": {
            "next": "https://api.ramp.com/developer/v1/<resources>?<new_params>"
          }
        },
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/DeveloperAPINestedPage"
          }
        },
        "required": ["data", "page"],
        "type": "object"
      },
      "PartialApiCardSpendingRestrictionsUpdateRequestBody": {
        "properties": {
          "amount": {
            "description": "Amount limit total per interval.",
            "minimum": 0,
            "oneOf": [
              {
                "type": "number"
              }
            ]
          },
          "blocked_mcc_codes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "categories": {
            "description": "List of Ramp Category Codes this card is restricted to.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories_blacklist": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "categories_whitelist": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "currency": {
            "description": "Currency in which the amount is specified.",
            "type": "string"
          },
          "interval": {
            "description": "Time interval to apply limit to.",
            "enum": ["ANNUAL", "DAILY", "MONTHLY", "QUARTERLY", "TERTIARY", "TOTAL", "WEEKLY", "YEARLY"],
            "type": "string"
          },
          "lock_date": {
            "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "transaction_amount_limit": {
            "description": "Max amount limit per transaction.",
            "minimum": 0,
            "oneOf": [
              {
                "type": "number"
              }
            ]
          },
          "vendor_blacklist": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "vendor_whitelist": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Receipt": {
        "example": {
          "created_at": "2022-08-20T20:33:46+00:00",
          "id": "0a0ed428-0250-4993-96ad-94cd77bc86b6",
          "receipt_url": "https://receipts.ramp.com/sales_demo_instance/amazon_business_receipt.png?Expires=1661130671",
          "transaction_id": "065916d9-7bdf-4aae-a46a-9b82225f2a20",
          "user_id": "ea0d554a-78bb-4402-a3e9-2d4bc138502f"
        },
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the receipt.",
            "format": "uuid",
            "type": "string"
          },
          "receipt_url": {
            "description": "Pre-signed url to download receipt image.",
            "type": "string"
          },
          "transaction_id": {
            "description": "Unique identifier of the associated transaction.",
            "format": "uuid",
            "type": "string"
          },
          "user_id": {
            "description": "Unique identifier of the person who made the transaction.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Reimbursement": {
        "example": {
          "accounting_field_selections": [
            {
              "category_info": {
                "external_id": "Category",
                "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                "name": "Category",
                "type": "GL_ACCOUNT"
              },
              "external_id": "Category",
              "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
              "name": "Category",
              "type": "GL_ACCOUNT"
            }
          ],
          "amount": 484.46,
          "created_at": "2023-08-20T:00:00+00:00",
          "currency": "USD",
          "direction": "BUSINESS_TO_USER",
          "distance": 55,
          "entity_id": "4bec9dc1-710e-4781-b254-fc606c76a241",
          "id": "d47ba06e-14ac-4a7b-89b4-4775412ba545",
          "line_items": [
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "425",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                  "name": "Ramp LP",
                  "type": "Subsidiary"
                }
              ],
              "amount": {
                "amount": 43446,
                "currency_code": "USD"
              }
            },
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Category",
                    "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                    "name": "Category",
                    "type": "GL_ACCOUNT"
                  },
                  "external_id": "426",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                  "name": "Ramp BV",
                  "type": "Subsidiary"
                }
              ],
              "amount": {
                "amount": 5000,
                "currency_code": "USD"
              }
            }
          ],
          "memo": "Airfare for business travel",
          "merchant": "Delta Airlines",
          "original_reimbursement_amount": {
            "amount": 48446,
            "currency_code": "USD"
          },
          "payee_amount": {
            "amount": 48446,
            "currency_code": "USD"
          },
          "payment_id": "NDPHKHCN6G",
          "receipts": [],
          "spend_limit_id": "92a68991-8374-4c0a-b5c0-5180c41b5148",
          "state": "REIMBURSED",
          "synced_at": "2023-08-21T:00:00+00:00",
          "transaction_date": "2022-08-19",
          "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
          "type": "OUT_OF_POCKET",
          "updated_at": "2023-08-22T:00:00+00:00",
          "user_email": "dwight@dundermilflin.com",
          "user_full_name": "Dwight Schrute",
          "user_id": "7979392e-8d41-4f97-815b-ccd7584802bf"
        },
        "properties": {
          "accounting_field_selections": {
            "description": "List of accounting fields selected to code the reimbursement.",
            "items": {
              "$ref": "#/components/schemas/ApiReimbursementAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "description": "The amount that the payor pays.",
            "type": "number"
          },
          "approved_at": {
            "description": "Time at which the reimbursement is approved. Presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "description": "Time at which the reimbursement is created. Presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The currency that the payor pays with.",
            "type": "string"
          },
          "direction": {
            "description": "The direction of the reimbursement. It could be either BUSINESS_TO_USER or USER_TO_BUSINESS.",
            "enum": ["BUSINESS_TO_USER", "USER_TO_BUSINESS"],
            "type": "string"
          },
          "distance": {
            "description": "The distance of the reimbursement in miles, for mileage reimbursements.",
            "nullable": true,
            "type": "number"
          },
          "entity_id": {
            "description": "Unique identifier of the associated business entity.",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the reimbursement.",
            "format": "uuid",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items related to the reimbursement.",
            "items": {
              "$ref": "#/components/schemas/ApiReimbursementLineItem"
            },
            "type": "array"
          },
          "memo": {
            "description": "Reimbursement memo",
            "type": "string"
          },
          "merchant": {
            "type": "string"
          },
          "original_reimbursement_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Original reimbursement amount before the currency conversion.",
            "nullable": true
          },
          "payee_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount and currency received by the payee.",
            "nullable": true
          },
          "payment_id": {
            "description": "The unique identifier of the payment batch that the reimbursement is associated with, once paid.",
            "nullable": true,
            "type": "string"
          },
          "receipts": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "spend_limit_id": {
            "description": "Spend limit to which the reimbursement is attributed, if it exists.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "current state of the reimbursement.",
            "enum": [
              "APPROVED",
              "AWAITING_PAYMENT",
              "CANCELED",
              "DELETED",
              "DRAFT",
              "FAILED_REIMBURSEMENT",
              "INIT",
              "MANUALLY_REIMBURSED",
              "MISSING_ACH",
              "PENDING",
              "PROCESSING",
              "REIMBURSED",
              "REJECTED"
            ],
            "type": "string"
          },
          "synced_at": {
            "description": "Time when reimbursement has been synced. Will be None if the reimbursement is not synced.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_date": {
            "format": "date",
            "type": "string"
          },
          "trip_id": {
            "description": "Trip ID associated with the reimbursement if a Trip ID is available.",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "The type of the reimbursement.",
            "enum": ["MILEAGE", "OUT_OF_POCKET", "PAYBACK_FULL", "PAYBACK_PARTIAL"],
            "type": "string"
          },
          "updated_at": {
            "description": "Time at which the reimbursement was last updated. Presented in ISO8601 format.",
            "format": "date-time",
            "type": "string"
          },
          "user_email": {
            "description": "Email of the person who made the reimbursement.",
            "type": "string"
          },
          "user_full_name": {
            "description": "Full name of the person who made the reimbursement.",
            "type": "string"
          },
          "user_id": {
            "description": "Unique identifier of the person who made the reimbursement.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "currency",
          "direction",
          "distance",
          "id",
          "original_reimbursement_amount",
          "payee_amount",
          "payment_id",
          "spend_limit_id",
          "state",
          "synced_at",
          "type",
          "user_email",
          "user_full_name",
          "user_id"
        ],
        "type": "object"
      },
      "SpendIntentApiSpendingRestrictionsDump": {
        "properties": {
          "allowed_categories": {
            "description": " List of Ramp category codes allowed for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "allowed_vendors": {
            "description": "List of merchants allowed for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "auto_lock_date": {
            "description": "Date to automatically to lock the limit.",
            "format": "date-time",
            "type": "string"
          },
          "blocked_categories": {
            "description": "List of Ramp category codes blocked for the limit.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "blocked_vendors": {
            "description": "List of merchants  blocked for the limit.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "interval": {
            "description": "Time interval the limit is applied on.",
            "enum": [
              "ANNUAL",
              "CUSTOM",
              "DAILY",
              "MONTHLY",
              "QUARTERLY",
              "TERTIARY",
              "TOTAL",
              "WEEKLY",
              "YEARLY"
            ],
            "type": "string"
          },
          "limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount limit total per interval denominated in cents. Currency is USD.",
            "nullable": true
          },
          "next_interval_reset": {
            "description": "Date and time for the next interval reset.",
            "format": "date-time",
            "type": "string"
          },
          "start_of_interval": {
            "description": "Date and time for the start of the current interval.",
            "format": "date-time",
            "type": "string"
          },
          "temporary_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Temporary limit total per interval."
          },
          "transaction_amount_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Max amount allowed on a single transaction."
          }
        },
        "type": "object"
      },
      "SpendLimitDeferredTask": {
        "example": {
          "context": {
            "acting_user_id": "c45f22e0-4c15-4a64-8580-3819e89baf6d"
          },
          "data": {
            "spend_limit_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee"
          },
          "id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "status": "SUCCESS"
        },
        "properties": {
          "context": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendLimitDeferredTaskContext"
              }
            ],
            "description": "Further context for the deferred task."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendLimitDeferredTaskData"
              }
            ],
            "description": "Detailed data of the deferred task."
          },
          "id": {
            "description": "Unique identifier of the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "description": "Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Statement": {
        "example": {
          "balance_sections": [
            {
              "charges": {
                "amount": 180061925,
                "currency_code": "USD"
              },
              "credits": {
                "amount": 0,
                "currency_code": "USD"
              },
              "ending_balance": {
                "amount": 178098867,
                "currency_code": "USD"
              },
              "entity_id": "9d8abf0f-389c-4a18-816e-a6e1c5784624",
              "id": "6ff695fd-b09b-4529-a622-545d6c059129",
              "opening_balance": {
                "amount": 0,
                "currency_code": "USD"
              },
              "payments": {
                "amount": 1963058,
                "currency_code": "USD"
              }
            }
          ],
          "charges": {
            "amount": 180061925,
            "currency_code": "USD"
          },
          "credits": {
            "amount": 0,
            "currency_code": "USD"
          },
          "end_date": "2023-05-08T08:39:37+00:00",
          "ending_balance": {
            "amount": 178098867,
            "currency_code": "USD"
          },
          "id": "df44006c-410b-420e-80a2-1522a2e5b722",
          "opening_balance": {
            "amount": 0,
            "currency_code": "USD"
          },
          "payments": {
            "amount": 1963058,
            "currency_code": "USD"
          },
          "start_date": "2023-05-06T08:51:57+00:00",
          "statement_lines": [
            {
              "id": "06a09605-b0b8-4c89-b29f-d12c6aabac58",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "0f01bc2d-04cf-407a-8442-bcbdaf1c07f8",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "2682717d-8231-46f2-9e02-c0f4f7ef410a",
              "type": "TRANSFER_PAYMENT"
            },
            {
              "id": "415fe9fb-1608-4cd6-ac8b-d2fbb85bdc11",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "4c7700b6-1ff9-4228-9b13-73b38d5a7623",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "61b89311-f0b3-4689-91ee-8edb72054de4",
              "type": "CARD_TRANSACTION"
            },
            {
              "id": "78c9eac8-67ae-443d-998a-f416e959225c",
              "type": "CASHBACK"
            },
            {
              "id": "af87a6bd-929a-4de6-85f3-0105a046a608",
              "type": "CARD_TRANSACTION"
            }
          ]
        },
        "properties": {
          "balance_sections": {
            "description": "Breakdown of statement balances by entity and currency.",
            "items": {
              "$ref": "#/components/schemas/Statement"
            },
            "type": "array"
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Total charges incurred during the statement period"
          },
          "credits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Total credits accumulated during the statement period"
          },
          "end_date": {
            "format": "date-time",
            "type": "string"
          },
          "ending_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Balance at the end of the statement period"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "opening_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Balance at the beginning of the statement period"
          },
          "payments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "deprecated": true,
            "description": "Total payments made during the statement period"
          },
          "preceding_statement_id": {
            "format": "uuid",
            "type": "string"
          },
          "start_date": {
            "format": "date-time",
            "type": "string"
          },
          "statement_lines": {
            "description": "Statement lines encompass all the financial activities, including card transactions, transfers, and other charges or credits that have taken place within a specific period.",
            "items": {
              "$ref": "#/components/schemas/ApiStatementItem"
            },
            "type": "array"
          }
        },
        "required": [
          "balance_sections",
          "charges",
          "credits",
          "end_date",
          "ending_balance",
          "id",
          "opening_balance",
          "payments",
          "start_date",
          "statement_lines"
        ],
        "type": "object"
      },
      "TokenRequestBody": {
        "example": {
          "code": "wUvTfJmrDiTogz3dRNsUJdBRtSl658ibsH8xLKwKQ2PbttRr",
          "grant_type": "authorization_code",
          "redirect_uri": "https://www.yourawesomeapp.com",
          "refresh_token": "ramp_tok_IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk",
          "scope": "users:read users:write"
        },
        "properties": {
          "code": {
            "description": "Authorization code obtained from request to https://app.ramp.com/v1/authorize, to be exchanged for access token. Field is required if grant_type=authorization_code.",
            "type": "string"
          },
          "grant_type": {
            "description": "Grant type, must be one of: ['authorization_code', 'client_credentials', 'refresh_token']. Refresh token and client credentials grants must be added to app's permitted Grant Types.",
            "enum": ["authorization_code", "client_credentials", "refresh_token"],
            "type": "string"
          },
          "redirect_uri": {
            "description": "The redirect URI previously used in the authorization request, used to verify app. Field is required if grant_type=authorization_code.",
            "type": "string"
          },
          "refresh_token": {
            "description": "The refresh token issued to you to get a new access token.",
            "type": "string"
          },
          "scope": {
            "description": "Space-separated list of scopes to be granted to the returned token. These must be a subset (including full set) of the app's allowed scopes. Field is required if grant_type=client_credentials.",
            "type": "string"
          }
        },
        "required": ["grant_type"],
        "type": "object"
      },
      "TokenResponse": {
        "example": {
          "access_token": "ramp_tok_o4bfbrfhDBdXcjjTBMD1iTTXdprRuHdcmne8gR5zfSV78uPe",
          "expires_in": 3600,
          "refresh_token": "ramp_tok_IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk",
          "scope": "business:read transactions:read",
          "token_type": "Bearer"
        },
        "properties": {
          "access_token": {
            "description": "The access token string. Prefixed with ramp_tok_.",
            "type": "string"
          },
          "expires_in": {
            "description": "The duration of which the token is valid, measured in seconds.",
            "type": "integer"
          },
          "refresh_token": {
            "description": "Refresh token can be used to get a new access token. Note that refresh token won't appear in the response for client_credentials grant type. Prefixed with ramp_tok_.",
            "type": "string"
          },
          "scope": {
            "description": "Space-separated list of scopes of the access token.",
            "type": "string"
          },
          "token_type": {
            "description": "The type of the token. This should always be 'Bearer'. ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenRevokeRequestBody": {
        "example": {
          "token": "ramp_tok_IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk",
          "token_type_hint": "refresh_token"
        },
        "properties": {
          "token": {
            "description": "Access token or refresh token to be revoked.",
            "type": "string"
          },
          "token_type_hint": {
            "description": "Type of the token to be revoked.",
            "enum": ["access_token", "refresh_token"],
            "type": "string"
          }
        },
        "required": ["token"],
        "type": "object"
      },
      "Transaction": {
        "example": {
          "accounting_categories": [],
          "accounting_field_selections": [
            {
              "category_info": {
                "external_id": "Category",
                "id": "0c0d0bcc-8716-4e05-a651-4ad5e64d2b3e",
                "name": "Category",
                "type": "GL_ACCOUNT"
              },
              "external_id": "Category",
              "id": "07b4ce4d-2750-412e-aef4-6b7815f1411c",
              "name": "Category",
              "type": "GL_ACCOUNT"
            }
          ],
          "amount": 90.0,
          "card_holder": {
            "department_id": "d471d830-2e73-4082-8a75-68540f83e86e",
            "department_name": "Executive",
            "first_name": "Patrick",
            "last_name": "Robinson",
            "location_id": "4fcf3423-a2e6-42f6-8dd8-9b3a8c51e069",
            "location_name": "San Francisco",
            "user_id": "a26c82c9-6b7d-4022-bc4b-a55b4c4743c7"
          },
          "card_id": "6bc41b14-f853-4862-bae5-4f122f123f6e",
          "currency_code": "USD",
          "disputes": [],
          "entity_id": "24850cdb-1b3f-4eb9-bf20-967ca9f97605",
          "id": "fd14cd6a-846e-4994-9315-5a59e6bb465f",
          "line_items": [
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Subsidiary",
                    "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                    "name": "Subsidiary",
                    "type": "SUBSIDIARY"
                  },
                  "external_id": "425",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411b",
                  "name": "Ramp LP",
                  "type": "Subsidiary"
                }
              ],
              "amount": {
                "amount": 4000,
                "currency_code": "USD"
              }
            },
            {
              "accounting_field_selections": [
                {
                  "category_info": {
                    "external_id": "Subsidiary",
                    "id": "15e9565d-7e73-40d8-9fbc-5f6f89b1c075",
                    "name": "Subsidiary",
                    "type": "SUBSIDIARY"
                  },
                  "external_id": "426",
                  "id": "07b4ce4d-2750-412e-aef4-6b7815f1411a",
                  "name": "Ramp BV",
                  "type": "SUBSIDIARY"
                }
              ],
              "amount": {
                "amount": 5000,
                "currency_code": "USD"
              }
            }
          ],
          "memo": null,
          "merchant_category_code": null,
          "merchant_category_code_description": null,
          "merchant_data": {
            "auto_rental": null,
            "flight": null,
            "fuel": null,
            "lodging": null,
            "receipt": [
              {
                "commodity_code": null,
                "description": "Vanta Automated Compliance",
                "discount": null,
                "quantity": 1,
                "tax": null,
                "total": 5000,
                "unit_cost": 5000
              },
              {
                "commodity_code": null,
                "description": "Vanta Risk Management",
                "discount": null,
                "quantity": 1,
                "tax": null,
                "total": 4000,
                "unit_cost": 4000
              }
            ],
            "reference": "343165593943"
          },
          "merchant_descriptor": "VANTA",
          "merchant_id": "2907e304-cac2-4abf-84c4-b3b454ae3b8c",
          "merchant_location": {
            "city": "SAN FRANCISCO",
            "country": "USA",
            "postal_code": "941050000",
            "state": "06"
          },
          "merchant_name": "Vanta",
          "original_transaction_amount": {
            "amount": 9000,
            "currency_code": "EUR"
          },
          "policy_violations": [],
          "receipts": [],
          "settlement_date": "2022-05-03T00:00:00+00:00",
          "sk_category_id": "40,41",
          "sk_category_name": "SaaS / Software",
          "state": "CLEARED",
          "synced_at": "2022-05-04T00:00:00+00:00",
          "trip_id": "ec6aae2b-38c6-4eeb-adf0-80f25dbf9aad",
          "trip_name": "Trip to Europe",
          "user_transaction_time": "2022-04-28T00:00:00+00:00"
        },
        "properties": {
          "accounting_categories": {
            "deprecated": true,
            "description": "[Deprecated - use accounting_field_selections instead] Accounting categories related to the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiAccountingCategory"
            },
            "readOnly": true,
            "type": "array"
          },
          "accounting_field_selections": {
            "description": "List of accounting fields selected to code the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionAccountingFieldSelection"
            },
            "type": "array"
          },
          "amount": {
            "description": "Settled amount of the transaction.",
            "type": "number"
          },
          "card_holder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionCardHolder"
              }
            ],
            "description": "Information about the card holder."
          },
          "card_id": {
            "description": "Identifier of the physical or virtual card associated with the transaction.",
            "format": "uuid",
            "type": "string"
          },
          "currency_code": {
            "description": "Currency that the transaction is settled in.",
            "type": "string"
          },
          "decline_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionDeclineDetails"
              }
            ],
            "description": "Details about a transaction decline."
          },
          "disputes": {
            "description": "A list of disputes sorted in descending order by their creation time.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionDispute"
            },
            "readOnly": true,
            "type": "array"
          },
          "entity_id": {
            "description": "Unique identifier of business entity associated with the transaction.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "limit_id": {
            "description": "Unique identifier of the spend limit associated with the transaction",
            "format": "uuid",
            "type": "string"
          },
          "line_items": {
            "description": "List of line items related to the transaction.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionLineItem"
            },
            "type": "array"
          },
          "memo": {
            "maxLength": 255,
            "nullable": true,
            "type": "string"
          },
          "merchant_category_code": {
            "description": "Merchant category code is a four-digit number in ISP 18245 used to classify a business by the types of goods and services it provides.",
            "type": "string"
          },
          "merchant_category_code_description": {
            "description": "Description about the merchant category code.",
            "type": "string"
          },
          "merchant_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiTransactionPurchaseData"
              }
            ],
            "description": "Purchase data associated related to a transaction provided by the merchant"
          },
          "merchant_descriptor": {
            "description": "A merchant descriptor is the name that appears on a customer's bank statement when they make a purchase from that merchant.",
            "type": "string"
          },
          "merchant_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "merchant_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiMerchantLocation"
              }
            ],
            "description": "Card acceptor data such as country, city, state, and postal code if available."
          },
          "merchant_name": {
            "nullable": true,
            "type": "string"
          },
          "original_transaction_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "the original transaction amount before the currency conversion.",
            "nullable": true
          },
          "policy_violations": {
            "description": "A list of policy violations sorted in descending order by their creation time.",
            "items": {
              "$ref": "#/components/schemas/ApiTransactionPolicyViolation"
            },
            "readOnly": true,
            "type": "array"
          },
          "receipts": {
            "description": "Receipts listed in ascending order by their creation time, related to the transaction.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "settlement_date": {
            "description": "Time when funds were moved for a transaction.",
            "format": "date-time",
            "type": "string"
          },
          "sk_category_id": {
            "description": "Ramp-internal category id.",
            "nullable": true,
            "type": "integer"
          },
          "sk_category_name": {
            "description": "Ramp-internal category name.",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "transaction state.",
            "enum": [
              "ALL",
              "CLEARED",
              "COMPLETION",
              "DECLINED",
              "ERROR",
              "PENDING",
              "PENDING_INITIATION"
            ],
            "type": "string"
          },
          "statement_id": {
            "description": "Statement ID associated with the transaction if one is available.",
            "format": "uuid",
            "type": "string"
          },
          "synced_at": {
            "description": "Time when transaction has been synced. Will be None if the transaction is not synced.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "trip_id": {
            "description": "Trip ID associated with the transaction if one is available.",
            "format": "uuid",
            "type": "string"
          },
          "trip_name": {
            "description": "Trip name associated with the transaction if one is available.",
            "type": "string"
          },
          "user_transaction_time": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "entity_id",
          "merchant_id",
          "merchant_name",
          "original_transaction_amount",
          "sk_category_id",
          "sk_category_name",
          "synced_at"
        ],
        "type": "object"
      },
      "Transfer": {
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyAmount"
              }
            ],
            "description": "Amount of the transfer payment."
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "entity_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "ACH_CONFIRMED",
              "CANCELED",
              "COMPLETED",
              "ERROR",
              "INITIATED",
              "NOT_ACKED",
              "NOT_ENOUGH_FUNDS",
              "PROCESSING_BY_ODFI",
              "REJECTED_BY_ODFI",
              "RETURNED_BY_RDFI",
              "SUBMITTED_TO_FED",
              "SUBMITTED_TO_RDFI",
              "UNNECESSARY",
              "UPLOADED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Upload": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "document_type": {
            "type": "string"
          },
          "sales_lead_id": {
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "example": {
          "business_id": "9abffcf0-dd7d-42f0-b806-ce0502ab6496",
          "custom_fields": [
            {
              "name": "Cost Center",
              "value": "R&D - Data"
            },
            {
              "name": "Employee ID",
              "value": "f4efe11c-337f-49a5-86b3-5df128233f2c"
            },
            {
              "name": "Region",
              "value": "EMEA"
            },
            {
              "name": "Team",
              "value": "Core Platform"
            }
          ],
          "department_id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "email": "cardholder_7@company.com",
          "employee_id": "f4efe11c-337f-49a5-86b3-5df128233f2c",
          "entity_id": "0e90959a-28ba-4f7d-a75b-9c241f384b9a",
          "first_name": "Linda",
          "id": "bde8334e-042e-4f39-9a5d-355ae17342e6",
          "is_manager": false,
          "last_name": "Gu",
          "location_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee",
          "manager_id": "ccc5d4cc-337f-49a5-86b3-5df128233f2c",
          "phone": 8004559999,
          "role": "BUSINESS_USER",
          "status": "USER_ACTIVE"
        },
        "properties": {
          "business_id": {
            "description": "Unique identifier of the company that the employee's working for.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_fields": {
            "description": "A list of custom fields of the user.",
            "items": {
              "$ref": "#/components/schemas/ApiUserCustomField"
            },
            "type": "array"
          },
          "department_id": {
            "description": "Unique identifier of the employee's department",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "description": "The employee's email address",
            "type": "string"
          },
          "employee_id": {
            "description": "An alternative identifier for an employee, coming from external systems, which can be used in place of an email.",
            "type": "string"
          },
          "entity_id": {
            "description": "Unique identifier of business entity user is associated with.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "first_name": {
            "description": "First name of the employee",
            "type": "string"
          },
          "id": {
            "description": "Unique employee identifier",
            "format": "uuid",
            "type": "string"
          },
          "is_manager": {
            "description": "Whether the employee is a manager",
            "type": "boolean"
          },
          "last_name": {
            "description": "Last name of the employee",
            "type": "string"
          },
          "location_id": {
            "description": "Unique identifier of the employee's location",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "manager_id": {
            "description": "Unique identifier of the employee's manager",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "phone": {
            "description": "The employee's phone number",
            "type": "string"
          },
          "role": {
            "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Owner, Bookkeeper",
            "type": "string"
          },
          "status": {
            "description": "The employee's status; It could be one of the following values: INVITE_PENDING, INVITE_DELETED, INVITE_EXPIRED, USER_ONBOARDING, USER_ACTIVE and USER_SUSPENDED",
            "enum": [
              "INVITE_DELETED",
              "INVITE_EXPIRED",
              "INVITE_PENDING",
              "USER_ACTIVE",
              "USER_ONBOARDING",
              "USER_SUSPENDED"
            ],
            "type": "string"
          }
        },
        "required": [
          "business_id",
          "custom_fields",
          "department_id",
          "entity_id",
          "location_id",
          "manager_id"
        ],
        "type": "object"
      },
      "UserDeferredTask": {
        "example": {
          "context": {
            "acting_user_id": "c45f22e0-4c15-4a64-8580-3819e89baf6d"
          },
          "data": {
            "user_id": "f4efe11c-221f-4b49-a1e4-33eaf96a49ee"
          },
          "id": "2d68eb67-f6eb-4284-8683-7d530c77a5a6",
          "status": "SUCCESS"
        },
        "properties": {
          "context": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiUserDeferredTaskContext"
              }
            ],
            "description": "Further context for the deferred task."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiUserDeferredTaskData"
              }
            ],
            "description": "Detailed data of the deferred task."
          },
          "id": {
            "description": "Unique identifier of the deferred task.",
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "description": "Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Vendor": {
        "example": {
          "id": "V-5500-0135",
          "name": "Slack Technologies, LLC"
        },
        "properties": {
          "id": {
            "description": "id of the vendor.",
            "type": "string"
          },
          "name": {
            "description": "name of the vendor",
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object"
      },
      "VendorAccount": {
        "example": {
          "code": "19566",
          "created_at": "2019-08-28T14:15:22+00:00",
          "id": "123",
          "is_active": true,
          "is_synced": true,
          "name": "Amazon",
          "ramp_id": "649b6731-33c6-4ff5-8a5d-2333fcc90ace",
          "updated_at": "2020-08-28T14:40:12+00:00"
        },
        "properties": {
          "code": {
            "description": "e.g. 19566",
            "type": "string"
          },
          "created_at": {
            "description": "Date time at which the vendor account was created on Ramp.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "description": "Whether this vendor account is active on Ramp",
            "type": "boolean"
          },
          "is_synced": {
            "description": "Whether this vendor has been synced to remote ERP.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the vendor.",
            "type": "string"
          },
          "ramp_id": {
            "description": "id to uniquely identify a vendor account within Ramp system",
            "format": "uuid",
            "type": "string"
          },
          "updated_at": {
            "description": "Date time at which the vendor account was most recently updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["created_at", "is_active", "is_synced", "name", "ramp_id", "updated_at"],
        "type": "object"
      },
      "limit": {
        "example": {
          "balance": {
            "cleared": 65.0,
            "pending": 35.0,
            "total": 100.0
          },
          "cards": [
            {
              "card_id": "a40a6ce8-70d4-4d06-91e1-0728ad9bbe39"
            }
          ],
          "display_name": "T&E",
          "entity_id": "c18d9d2e-964f-476d-8bb3-9ac078f00e11",
          "has_program_overridden": false,
          "id": "d8135cfe-0396-4b2d-b2cf-ad809fb04731",
          "is_shareable": true,
          "permitted_spend_types": {
            "primary_card_enabled": true,
            "reimbursements_enabled": false
          },
          "restrictions": {
            "auto_lock_date": null,
            "categories_whitelist": [35],
            "interval": "MONTHLY",
            "limit": 500,
            "next_interval_reset": "2022-12-01T00:00:00+00:00",
            "start_of_interval_date": "2022-11-01T00:00:00+00:00",
            "temporary_limit": null,
            "transaction_amount_limit": 200,
            "vendor_blacklist": [61]
          },
          "spend_program_id": "3a5b1f62-988f-4190-bf31-b7ae87c5dfee",
          "state": "ACTIVE",
          "suspension": {
            "acting_user_id": "e9186c3a-4650-48ef-aee4-56b77f5019bd",
            "inserted_at": "2022-11-03T00:00:00+00:00",
            "suspended_by_ramp": false
          },
          "users": [
            {
              "user_id": "2ba219ba-5867-453f-bec2-b8d0414b7f75"
            }
          ]
        },
        "properties": {
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendAllocationBalance"
              }
            ],
            "description": "Details about the current balance of the limit."
          },
          "cards": {
            "description": "List of cards linked to this limit.",
            "items": {
              "$ref": "#/components/schemas/ApiSpendLimitCardResource"
            },
            "type": "array"
          },
          "display_name": {
            "description": "Display name of the limit.",
            "type": "string"
          },
          "entity_id": {
            "description": "Associated business entity of the limit.",
            "format": "uuid",
            "type": "string"
          },
          "has_program_overridden": {
            "description": "Indicates if the limit's settings override those of its Spend Program.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier of the limit.",
            "format": "uuid",
            "type": "string"
          },
          "is_shareable": {
            "description": "Whether this spend limit is shareable.",
            "type": "boolean"
          },
          "permitted_spend_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiPermittedSpendTypesDump"
              }
            ],
            "description": "Specifies the permitted spend types of the limit."
          },
          "restrictions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSpendingRestrictionsDump"
              }
            ],
            "description": "Restrictions imposed on this limit."
          },
          "spend_program_id": {
            "description": "Unique identifier of the associated Spend Program.",
            "format": "uuid",
            "type": "string"
          },
          "state": {
            "description": "Current state of the limit.",
            "enum": ["ACTIVE", "RAMP_TERMINATED", "SUSPENDED", "TERMINATED"],
            "type": "string"
          },
          "suspension": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiSuspensionDump"
              }
            ],
            "description": "Suspension (lock) on the limit.",
            "nullable": true
          },
          "users": {
            "description": "Members who can spend from the limit.",
            "items": {
              "$ref": "#/components/schemas/ApiSpendLimitMember"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.ramp.com/v1/authorize",
            "scopes": {
              "accounting:read": "Grant read access to accounting",
              "accounting:write": "Grant write access to accounting",
              "bills:read": "Grant read access to bills",
              "business:read": "Grant read access to business",
              "cards:read": "Grant read access to cards",
              "cards:read_vault": "Grant read_vault access to cards",
              "cards:write": "Grant write access to cards",
              "cashbacks:read": "Grant read access to cashbacks",
              "departments:read": "Grant read access to departments",
              "departments:write": "Grant write access to departments",
              "entities:read": "Grant read access to entities",
              "leads:read": "Grant read access to leads",
              "leads:write": "Grant write access to leads",
              "limits:read": "Grant read access to limits",
              "limits:write": "Grant write access to limits",
              "locations:read": "Grant read access to locations",
              "locations:write": "Grant write access to locations",
              "memos:read": "Grant read access to memos",
              "memos:write": "Grant write access to memos",
              "merchants:read": "Grant read access to merchants",
              "receipt_integrations:read": "Grant read access to receipt_integrations",
              "receipt_integrations:write": "Grant write access to receipt_integrations",
              "receipts:read": "Grant read access to receipts",
              "receipts:write": "Grant write access to receipts",
              "reimbursements:read": "Grant read access to reimbursements",
              "spend_programs:read": "Grant read access to spend_programs",
              "spend_programs:write": "Grant write access to spend_programs",
              "statements:read": "Grant read access to statements",
              "transactions:read": "Grant read access to transactions",
              "transfers:read": "Grant read access to transfers",
              "users:read": "Grant read access to users",
              "users:write": "Grant write access to users",
              "vendors:read": "Grant read access to vendors",
              "vendors:write": "Grant write access to vendors"
            },
            "tokenUrl": "https://api.ramp.com/developer/v1/token"
          },
          "clientCredentials": {
            "scopes": {
              "accounting:read": "Grant read access to accounting",
              "accounting:write": "Grant write access to accounting",
              "bills:read": "Grant read access to bills",
              "business:read": "Grant read access to business",
              "cards:read": "Grant read access to cards",
              "cards:read_vault": "Grant read_vault access to cards",
              "cards:write": "Grant write access to cards",
              "cashbacks:read": "Grant read access to cashbacks",
              "departments:read": "Grant read access to departments",
              "departments:write": "Grant write access to departments",
              "entities:read": "Grant read access to entities",
              "leads:read": "Grant read access to leads",
              "leads:write": "Grant write access to leads",
              "limits:read": "Grant read access to limits",
              "limits:write": "Grant write access to limits",
              "locations:read": "Grant read access to locations",
              "locations:write": "Grant write access to locations",
              "memos:read": "Grant read access to memos",
              "memos:write": "Grant write access to memos",
              "merchants:read": "Grant read access to merchants",
              "receipt_integrations:read": "Grant read access to receipt_integrations",
              "receipt_integrations:write": "Grant write access to receipt_integrations",
              "receipts:read": "Grant read access to receipts",
              "receipts:write": "Grant write access to receipts",
              "reimbursements:read": "Grant read access to reimbursements",
              "spend_programs:read": "Grant read access to spend_programs",
              "spend_programs:write": "Grant write access to spend_programs",
              "statements:read": "Grant read access to statements",
              "transactions:read": "Grant read access to transactions",
              "transfers:read": "Grant read access to transfers",
              "users:read": "Grant read access to users",
              "users:write": "Grant write access to users",
              "vendors:read": "Grant read access to vendors",
              "vendors:write": "Grant write access to vendors"
            },
            "tokenUrl": "https://api.ramp.com/developer/v1/token"
          }
        },
        "type": "oauth2"
      }
    }
  }
}
