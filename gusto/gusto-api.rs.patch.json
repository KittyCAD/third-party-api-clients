[
  {
    "op": "add",
    "path": "/info/x-rust",
    "value": {
      "client": "// Authenticate.\nlet client = gusto-api::Client::new(\n     String::from(\"client-id\"),\n     String::from(\"client-secret\"),\n     String::from(\"redirect-uri\"),\n     String::from(\"token\"),\n     String::from(\"refresh-token\"),\n);\n\n// - OR -\n\n// Authenticate with your credentials parsed from the environment variables:\n// - `GUSTO_CLIENT_ID`\n// - `let client = gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));_CLIENT_SECRET`\n// - `let client = gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));_REDIRECT_URI`\nlet client = gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));",
      "install": "[dependencies]\ngusto-api = \"2.1.17\""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1benefits/get/x-rust",
    "value": {
      "example": "/// Get all benefits supported by Gusto\n/// \n/// Returns all benefits supported by Gusto.\n/// \n/// The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.\nasync fn example_benefits_get() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::SupportedBenefit> = client.benefits().get().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1benefits~1{benefit_id}/get/x-rust",
    "value": {
      "example": "/// Get a supported benefit by ID\n/// \n/// Returns a benefit supported by Gusto.\n/// \n/// The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.\n/// \n/// **Parameters:**\n/// \n/// - `benefit_id: &'astr`: The ID of the benefit (required)\nasync fn example_benefits_get_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::SupportedBenefit = client.benefits().get_id(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.get_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}/get/x-rust",
    "value": {
      "example": "/// Get a company\n/// \n/// Get a company.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_companies_get() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Company = client.companies().get(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/companies/struct.Companies.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1bank_accounts/get/x-rust",
    "value": {
      "example": "/// Get all company bank accounts\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Returns all company bank accounts\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_company_bank_accounts_beta_get_companies_company_id_bank_accounts(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::CompanyBankAccount> = client\n        .company_bank_accounts_beta()\n        .get_companies_company_id_bank_accounts(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/company_bank_accounts_beta/struct.CompanyBankAccountsBeta.html#method.get_companies_company_id_bank_accounts"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1bank_accounts/post/x-rust",
    "value": {
      "example": "/// Create a company bank account\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Create a company bank account. The new bank account will replace an existing bank account as the default company funding method.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_company_bank_accounts_beta_post_companies_company_id_bank_accounts(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::CompanyBankAccount = client\n        .company_bank_accounts_beta()\n        .post_companies_company_id_bank_accounts(\n            \"some-string\",\n            &gusto_api::types::PostCompaniesCompanyIdBankAccountsRequestBody {\n                routing_number: Some(\"some-string\".to_string()),\n                account_number: Some(\"some-string\".to_string()),\n                account_type: Some(\n                    gusto_api::types::PostCompaniesCompanyIdBankAccountsRequestBodyAccountType::Savings,\n                ),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/company_bank_accounts_beta/struct.CompanyBankAccountsBeta.html#method.post_companies_company_id_bank_accounts"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1bank_accounts~1{bank_account_uuid}~1verify/put/x-rust",
    "value": {
      "example": "/// Verify a company bank account\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter.\n/// \n/// **Parameters:**\n/// \n/// - `bank_account_uuid: &'astr`: Bank account UUID (required)\n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the bank account (required)\nasync fn example_company_bank_accounts_beta_put_companies_company_id_bank_accounts_verify(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::CompanyBankAccount = client\n        .company_bank_accounts_beta()\n        .put_companies_company_id_bank_accounts_verify(\n            \"some-string\",\n            \"some-string\",\n            &gusto_api::types::PutCompaniesCompanyIdBankAccountsVerifyRequestBody {\n                deposit_1: Some(3.14 as f64),\n                deposit_2: Some(3.14 as f64),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/company_bank_accounts_beta/struct.CompanyBankAccountsBeta.html#method.put_companies_company_id_bank_accounts_verify"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1contractors/get/x-rust",
    "value": {
      "example": "/// Get contractors of a company\n/// \n/// Get all contractors, active and inactive, individual and business, for a company.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_contractors_get_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Contractor> = client\n        .contractors()\n        .get_companies_company_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/contractors/struct.Contractors.html#method.get_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1contractors/post/x-rust",
    "value": {
      "example": "/// Create a contractor\n/// \n/// Create an individual or business contractor.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_contractors_post_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Contractor = client\n        .contractors()\n        .post_companies_company_id(\n            \"some-string\",\n            &gusto_api::types::PostCompaniesCompanyIdContractorsRequestBody {\n                type_: gusto_api::types::PostCompaniesCompanyIdContractorsRequestBodyType::Business,\n                wage_type:\n                    gusto_api::types::PostCompaniesCompanyIdContractorsRequestBodyWageType::Fixed,\n                first_name: Some(\"some-string\".to_string()),\n                last_name: Some(\"some-string\".to_string()),\n                start_date: chrono::Utc::now().date().naive_utc(),\n                self_onboarding: Some(false),\n                email: Some(\"some-string\".to_string()),\n                middle_initial: Some(\"some-string\".to_string()),\n                business_name: Some(\"some-string\".to_string()),\n                ein: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/contractors/struct.Contractors.html#method.post_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1employees/get/x-rust",
    "value": {
      "example": "/// Get employees of a company\n/// \n/// Get all of the employees, onboarding, active and terminated, for a given company.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\n/// - `include: Option<Vec<crate::types::GetCompaniesCompanyIdInclude>>`: Include the requested attribute(s) in each employee response\n/// - `page: Option<f64>`: The page that is requested. When unspecified, will load all employees.\n/// - `per: Option<f64>`: Number of employees per page. When unspecified, will default to 25\n/// - `terminated: Option<bool>`: Filters employees by the provided boolean\nasync fn example_employees_get_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Employee> = client\n        .employees()\n        .get_companies_company_id(\n            \"some-string\",\n            Some(vec![\n                gusto_api::types::GetCompaniesCompanyIdInclude::CustomFields,\n            ]),\n            Some(3.14 as f64),\n            Some(3.14 as f64),\n            Some(false),\n            &gusto_api::types::GetCompaniesCompanyIdEmployeesRequestBody {},\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/employees/struct.Employees.html#method.get_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1employees/post/x-rust",
    "value": {
      "example": "/// Create an employee\n/// \n/// Create an employee.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_employees_post() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Employee = client\n        .employees()\n        .post(\n            \"some-string\",\n            &gusto_api::types::PostEmployeesRequestBody {\n                first_name: Some(\"some-string\".to_string()),\n                middle_initial: Some(\"some-string\".to_string()),\n                last_name: Some(\"some-string\".to_string()),\n                date_of_birth: Some(chrono::Utc::now().date().naive_utc()),\n                email: Some(\"some-string\".to_string()),\n                ssn: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/employees/struct.Employees.html#method.post"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1federal_tax_details/get/x-rust",
    "value": {
      "example": "/// Get Federal Tax Details\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Fetches attributes relevant for a company's federal taxes.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The company id or uuid (required)\nasync fn example_federal_tax_details_beta_get_companies_company_id_or_uuid_federal_tax_details(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::GetCompaniesCompanyIdOrUuidFederalTaxDetailsResponse = client\n        .federal_tax_details_beta()\n        .get_companies_company_id_or_uuid_federal_tax_details(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/federal_tax_details_beta/struct.FederalTaxDetailsBeta.html#method.get_companies_company_id_or_uuid_federal_tax_details"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1federal_tax_details/put/x-rust",
    "value": {
      "example": "/// Update Federal Tax Details\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Updates attributes relevant for a company's federal taxes. This information is required is to onboard a company for use with Gusto Embedded Payroll.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The company id or uuid (required)\nasync fn example_federal_tax_details_beta_put_companies_company_id_or_uuid_federal_tax_details(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::PutCompaniesCompanyIdOrUuidFederalTaxDetailsResponse = client\n        .federal_tax_details_beta()\n        .put_companies_company_id_or_uuid_federal_tax_details(\n            \"some-string\",\n            &gusto_api::types::PutCompaniesCompanyIdOrUuidFederalTaxDetailsRequestBody {\n                legal_name: Some(\"some-string\".to_string()),\n                ein: Some(\"some-string\".to_string()),\n                tax_payer_type: Some(\"some-string\".to_string()),\n                filing_form: Some(\"some-string\".to_string()),\n                taxable_as_scorp: Some(false),\n                version: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/federal_tax_details_beta/struct.FederalTaxDetailsBeta.html#method.put_companies_company_id_or_uuid_federal_tax_details"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1locations/get/x-rust",
    "value": {
      "example": "/// Get company locations\n/// \n/// Company locations represent all addresses associated with a company. These can be filing addesses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.\n/// \n/// Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_locations_get_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Location> = client\n        .locations()\n        .get_companies_company_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/locations/struct.Locations.html#method.get_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1locations/post/x-rust",
    "value": {
      "example": "/// Create a company location\n/// \n/// Company locations represent all addresses associated with a company. These can be filing addesses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.\n/// \n/// Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_locations_post_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Location = client\n        .locations()\n        .post_companies_company_id(\n            \"some-string\",\n            &gusto_api::types::PostCompaniesCompanyIdLocationsRequestBody {\n                phone_number: \"some-string\".to_string(),\n                street_1: \"some-string\".to_string(),\n                street_2: Some(\"some-string\".to_string()),\n                city: \"some-string\".to_string(),\n                state: \"some-string\".to_string(),\n                zip: \"some-string\".to_string(),\n                country: Some(\"some-string\".to_string()),\n                mailing_address: Some(false),\n                filing_address: Some(false),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/locations/struct.Locations.html#method.post_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1pay_periods/get/x-rust",
    "value": {
      "example": "/// Get pay periods for a company\n/// \n/// Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.\n/// \n/// \n/// By default, this endpoint returns every current and past pay period for a company. Since companies can process payroll as often as every week, there can be up to 53 pay periods a year. If a company has been running payroll with Gusto for five years, this endpoint could return up to 265 pay periods. Use the `start_date` and `end_date` parameters to reduce the scope of the response.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\n/// - `end_date: Option<chrono::NaiveDate>`\n/// - `start_date: Option<chrono::NaiveDate>`\nasync fn example_payroll_get_companies_company_id_pay_periods() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::PayPeriod> = client\n        .payroll()\n        .get_companies_company_id_pay_periods(\n            \"some-string\",\n            Some(chrono::Utc::now().date().naive_utc()),\n            Some(chrono::Utc::now().date().naive_utc()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.get_companies_company_id_pay_periods"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1pay_schedules~1{pay_schedule_id_or_uuid}/get/x-rust",
    "value": {
      "example": "/// Get a pay schedule\n/// \n/// The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\n/// - `pay_schedule_id_or_uuid: &'astr`: The ID or UUID of the pay schedule (required)\nasync fn example_pay_schedules_get_companies_company_id_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::PaySchedule = client\n        .pay_schedules()\n        .get_companies_company_id_id(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/pay_schedules/struct.PaySchedules.html#method.get_companies_company_id_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1pay_schedules~1{pay_schedule_id_or_uuid}/put/x-rust",
    "value": {
      "example": "/// Update a pay schedule\n/// \n/// Updates a pay schedule.\n/// \n/// This endpoint is in beta. Please contact developer-gws@gusto.com if you’d like to have more information and use it for production. Note, this may require you to enter a different agreement with Gusto\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\n/// - `pay_schedule_id_or_uuid: &'astr`: The ID or UUID of the pay schedule (required)\nasync fn example_pay_schedules_put_companies_company_id_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::PaySchedule = client\n        .pay_schedules()\n        .put_companies_company_id_id(\n            \"some-string\",\n            \"some-string\",\n            &gusto_api::types::PutCompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody {\n                version: \"some-string\".to_string(),\n                auto_pilot: Some(false),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/pay_schedules/struct.PaySchedules.html#method.put_companies_company_id_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1payroll_reversals/get/x-rust",
    "value": {
      "example": "/// Get approved Payroll Reversals\n/// \n/// Returns all approved Payroll Reversals for a Company.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr` (required)\nasync fn example_payroll_get_companies_company_id_or_uuid_reversals() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::GetCompaniesCompanyIdOrUuidPayrollReversalsResponse = client\n        .payroll()\n        .get_companies_company_id_or_uuid_reversals(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.get_companies_company_id_or_uuid_reversals"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1payrolls/get/x-rust",
    "value": {
      "example": "/// Get all payrolls for a company\n/// \n/// Returns all payrolls, current and past for a company.\n/// \n/// Notes:\n/// * Hour and dollar amounts are returned as string representations of numeric decimals.\n/// * Hours are represented to the thousands place; dollar amounts are represented to the cent.\n/// * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ).\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\n/// - `end_date: Option<chrono::NaiveDate>`: Return payrolls whose pay period is before the end date\n/// - `include: Option<Vec<crate::types::GetCompaniesCompanyIdPayrollsInclude>>`: Include the requested attribute in the employee_compensations attribute in the response\n/// - `include_off_cycle: Option<bool>`: Whether to include off cycle payrolls in the response\n/// - `processed: Option<bool>`: Whether to return processed or unprocessed payrolls\n/// - `start_date: Option<chrono::NaiveDate>`: Return payrolls whose pay period is after the start date\nasync fn example_payroll_get_companies_company_id_payrolls() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Payroll> = client\n        .payroll()\n        .get_companies_company_id_payrolls(\n            \"some-string\",\n            Some(chrono::Utc::now().date().naive_utc()),\n            Some(vec![\n                gusto_api::types::GetCompaniesCompanyIdPayrollsInclude::Taxes,\n            ]),\n            Some(false),\n            Some(false),\n            Some(chrono::Utc::now().date().naive_utc()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.get_companies_company_id_payrolls"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1payrolls/post/x-rust",
    "value": {
      "example": "/// Create an Off-Cycle Payroll (Beta)\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Creates a new, unprocessed, off-cycle payroll.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\nasync fn example_payroll_post_companies_company_id_payrolls() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Payroll = client\n        .payroll()\n        .post_companies_company_id_payrolls(\n            \"some-string\",\n            &gusto_api::types::PostCompaniesCompanyIdPayrollsRequestBody {\n                off_cycle: \"some-string\".to_string(),\n                off_cycle_reason: Some(gusto_api::types::OffCycleReason::Correction),\n                start_date: Some(chrono::Utc::now().date().naive_utc()),\n                end_date: Some(chrono::Utc::now().date().naive_utc()),\n                employee_ids: Some(vec![4 as i64]),\n                check_date: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.post_companies_company_id_payrolls"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1payrolls~1{pay_period_start_date}~1{pay_period_end_date}/put/x-rust",
    "value": {
      "example": "/// Update a payroll\n/// \n/// This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.\n/// \n/// The payrolls are identified by their pay periods’ start_date and end_date. Both are required and must correspond with an existing, unprocessed payroll. *If the dates do not match, the entire request will be rejected.* This was an explicit design decision to remove any assumptions around the timespan for data sent.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\n/// - `pay_period_end_date: chrono::NaiveDate`: The end_date of the pay period for the payroll (required)\n/// - `pay_period_start_date: chrono::NaiveDate`: The start_date of the pay period for the payroll (required)\nasync fn example_payroll_put_companies_company_id_payrolls_pay_period_start_date_pay_period_end_date(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result : gusto_api::types::Payroll = client . payroll () . put_companies_company_id_payrolls_pay_period_start_date_pay_period_end_date (\"some-string\" , chrono :: Utc :: now () . date () . naive_utc () , chrono :: Utc :: now () . date () . naive_utc () , & gusto_api::types::PutCompaniesCompanyIdPayrollsPayPeriodStartDatePayPeriodEndDateRequestBody { version : \"some-string\" . to_string () , employee_compensations : vec ! [gusto_api::types::PutCompaniesCompanyIdPayrollsPayPeriodStartDatePayPeriodEndDateRequestBodyEmployeeCompensations { employee_id : 4 as i64 , fixed_compensations : Some (vec ! [gusto_api::types::PutCompaniesCompanyIdPayrollsPayPeriodStartDatePayPeriodEndDateRequestBodyEmployeeCompensationsFixedCompensations { name : Some (\"some-string\" . to_string ()) , amount : Some (\"some-string\" . to_string ()) , job_id : Some (4 as i64) }]) , hourly_compensations : Some (vec ! [gusto_api::types::PutCompaniesCompanyIdPayrollsPayPeriodStartDatePayPeriodEndDateRequestBodyEmployeeCompensationsHourlyCompensations { name : Some (\"some-string\" . to_string ()) , hours : Some (\"some-string\" . to_string ()) , job_id : Some (4 as i64) }]) , paid_time_off : Some (vec ! [gusto_api::types::PutCompaniesCompanyIdPayrollsPayPeriodStartDatePayPeriodEndDateRequestBodyEmployeeCompensationsPaidTimeOff { name : Some (\"some-string\" . to_string ()) , hours : Some (\"some-string\" . to_string ()) }]) }] }) . await ? ;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.put_companies_company_id_payrolls_pay_period_start_date_pay_period_end_date"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1payrolls~1{payroll_id_or_uuid}/get/x-rust",
    "value": {
      "example": "/// Get a single payroll\n/// \n/// Returns a payroll.\n/// \n/// Notes:\n/// * Hour and dollar amounts are returned as string representations of numeric decimals.\n/// * Hours are represented to the thousands place; dollar amounts are represented to the cent.\n/// * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ).\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\n/// - `include: Option<crate::types::GetCompaniesCompanyIdPayrollsIdInclude>`: Include the requested attribute in the employee_compensations attribute in the response\n/// - `payroll_id_or_uuid: &'astr`: The ID or UUID of the payroll  (required)\n/// - `show_calculation: Option<String>`: with `include`, shows the tax, and/or benefit, and/or deduction details for a calculated, unprocessed payroll. \nasync fn example_payroll_get_companies_company_id_payrolls_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Payroll = client\n        .payroll()\n        .get_companies_company_id_payrolls_id(\n            \"some-string\",\n            Some(gusto_api::types::GetCompaniesCompanyIdPayrollsIdInclude::Taxes),\n            \"some-string\",\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.get_companies_company_id_payrolls_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id_or_uuid}~1payrolls~1{payroll_id_or_uuid}/put/x-rust",
    "value": {
      "example": "/// Update a payroll by ID\n/// \n/// This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.\n/// \n/// **Parameters:**\n/// \n/// - `company_id_or_uuid: &'astr`: The ID or UUID of the company (required)\n/// - `payroll_id_or_uuid: &'astr`: The ID or UUID of the payroll  (required)\nasync fn example_payroll_put_companies_company_id_payrolls() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result : gusto_api::types::Payroll = client . payroll () . put_companies_company_id_payrolls (\"some-string\" , \"some-string\" , & gusto_api::types::PutCompaniesCompanyIdPayrollsRequestBody { version : \"some-string\" . to_string () , employee_compensations : vec ! [gusto_api::types::PutCompaniesCompanyIdPayrollsRequestBodyEmployeeCompensations { employee_id : 4 as i64 , fixed_compensations : Some (vec ! [gusto_api::types::PutCompaniesCompanyIdPayrollsRequestBodyEmployeeCompensationsFixedCompensations { name : Some (\"some-string\" . to_string ()) , amount : Some (\"some-string\" . to_string ()) , job_id : Some (4 as i64) }]) , hourly_compensations : Some (vec ! [gusto_api::types::PutCompaniesCompanyIdPayrollsRequestBodyEmployeeCompensationsHourlyCompensations { name : Some (\"some-string\" . to_string ()) , hours : Some (\"some-string\" . to_string ()) , job_id : Some (4 as i64) }]) , paid_time_off : Some (vec ! [gusto_api::types::PutCompaniesCompanyIdPayrollsRequestBodyEmployeeCompensationsPaidTimeOff { name : Some (\"some-string\" . to_string ()) , hours : Some (\"some-string\" . to_string ()) }]) }] }) . await ? ;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.put_companies_company_id_payrolls"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1admins/get/x-rust",
    "value": {
      "example": "/// Get all the admins at a company\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Returns a list of all the admins at a company\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_admins_beta_get_companies_company_id_admins() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Admin> = client\n        .admins_beta()\n        .get_companies_company_id_admins(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/admins_beta/struct.AdminsBeta.html#method.get_companies_company_id_admins"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1admins/post/x-rust",
    "value": {
      "example": "/// Create an admin for the company.\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Creates a new admin for a company. If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_admins_beta_post_companies_company_id_admins() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Admin = client\n        .admins_beta()\n        .post_companies_company_id_admins(\n            \"some-string\",\n            &gusto_api::types::PostCompaniesCompanyIdAdminsRequestBody {\n                first_name: \"some-string\".to_string(),\n                last_name: \"some-string\".to_string(),\n                email: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/admins_beta/struct.AdminsBeta.html#method.post_companies_company_id_admins"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1company_benefits/get/x-rust",
    "value": {
      "example": "/// Get benefits for a company\n/// \n/// Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.\n/// \n/// Note that company benefits can be deactivated only when no employees are enrolled.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_benefits_get_companies_company_id_company() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::CompanyBenefit> = client\n        .benefits()\n        .get_companies_company_id_company(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.get_companies_company_id_company"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1company_benefits/post/x-rust",
    "value": {
      "example": "/// Create a company benefit\n/// \n/// Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.\n/// \n/// Note that company benefits can be deactivated only when no employees are enrolled.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_benefits_post_companies_company_id_company() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::CompanyBenefit = client\n        .benefits()\n        .post_companies_company_id_company(\n            \"some-string\",\n            &gusto_api::types::PostCompaniesCompanyIdCompanyBenefitsRequestBody {\n                benefit_id: 3.14 as f64,\n                active: Some(false),\n                description: \"some-string\".to_string(),\n                responsible_for_employer_taxes: Some(false),\n                responsible_for_employee_w_2: Some(false),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.post_companies_company_id_company"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1contractor_payments/get/x-rust",
    "value": {
      "example": "/// Get contractor payments for a company\n/// \n/// Returns an object containing individual contractor payments, within a given time period, including totals.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `end_date: Option<chrono::NaiveDate>`: The time period for which to retrieve contractor payments\n/// - `start_date: Option<chrono::NaiveDate>`: The time period for which to retrieve contractor payments\nasync fn example_contractor_payments_get_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::ContractorPaymentSummary = client\n        .contractor_payments()\n        .get_companies_company_id(\n            \"some-string\",\n            Some(chrono::Utc::now().date().naive_utc()),\n            Some(chrono::Utc::now().date().naive_utc()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/contractor_payments/struct.ContractorPayments.html#method.get_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1contractor_payments/post/x-rust",
    "value": {
      "example": "/// Create a contractor payment (Beta)\n/// \n/// Returns an object containing individual contractor payments, within a given time period, including totals.\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// **Parameters:**\n/// \n/// - `bonus: Option<f64>`: If the contractor is on an hourly wage, this is the bonus the contractor earned.\n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `contractor_id: f64`: The contractor receiving the payment (required)\n/// - `date: &'astr`: The payment date (required)\n/// - `hours: Option<f64>`: If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment.\n/// - `reimbursement: Option<f64>`: Reimbursed wages for the contractor .\n/// - `wage: Option<f64>`: If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked.\nasync fn example_contractor_payments_post_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::ContractorPayment = client\n        .contractor_payments()\n        .post_companies_company_id(\n            Some(3.14 as f64),\n            \"some-string\",\n            3.14 as f64,\n            \"some-string\",\n            Some(3.14 as f64),\n            Some(3.14 as f64),\n            Some(3.14 as f64),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/contractor_payments/struct.ContractorPayments.html#method.post_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1contractor_payments~1{contractor_payment_id_or_uuid}/delete/x-rust",
    "value": {
      "example": "/// Cancel a contractor payment (Beta)\n/// \n/// Cancels and deletes a contractor payment. If the contractor payment has already started processing, the payment cannot be cancelled.\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `contractor_payment_id_or_uuid: &'astr`: The ID or UUID of the contractor payment (required)\nasync fn example_contractor_payments_delete_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .contractor_payments()\n        .delete_companies_company_id(\"some-string\", \"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/contractor_payments/struct.ContractorPayments.html#method.delete_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1contractor_payments~1{contractor_payment_id_or_uuid}/get/x-rust",
    "value": {
      "example": "/// Get a single contractor payment\n/// \n/// Returns a single contractor payments\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `contractor_payment_id_or_uuid: &'astr`: The ID or UUID of the contractor payment (required)\nasync fn example_contractor_payments_get_single_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::ContractorPayment = client\n        .contractor_payments()\n        .get_single_companies_company_id(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/contractor_payments/struct.ContractorPayments.html#method.get_single_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1custom_fields/get/x-rust",
    "value": {
      "example": "/// Get the custom fields of a company\n/// \n/// Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_custom_fields_get_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::GetCompaniesCompanyIdCustomFieldsResponse = client\n        .custom_fields()\n        .get_companies_company_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/custom_fields/struct.CustomFields.html#method.get_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1earning_types/get/x-rust",
    "value": {
      "example": "/// Get all earning types for a company\n/// \n/// A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.\n/// \n/// #### Default Earning Type\n/// Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)\n/// \n/// #### Custom Earning Type\n/// Custom earning types are all the other earning types added specifically for a company.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_earning_type_get_companies_company_id_earning_types() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::GetCompaniesCompanyIdEarningTypesResponse = client\n        .earning_type()\n        .get_companies_company_id_earning_types(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/earning_type/struct.EarningType.html#method.get_companies_company_id_earning_types"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1earning_types/post/x-rust",
    "value": {
      "example": "/// Create a custom earning type\n/// \n/// Create a custom earning type.\n/// \n/// If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_earning_type_post_companies_company_id_earning_types() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::EarningType = client\n        .earning_type()\n        .post_companies_company_id_earning_types(\n            \"some-string\",\n            &gusto_api::types::PostCompaniesCompanyIdEarningTypesRequestBody {\n                name: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/earning_type/struct.EarningType.html#method.post_companies_company_id_earning_types"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1earning_types~1{earning_type_uuid}/delete/x-rust",
    "value": {
      "example": "/// Deactivate an earning type\n/// \n/// Deactivate an earning type.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `earning_type_uuid: &'astr`: The UUID of the earning type (required)\nasync fn example_earning_type_delete_companies_company_id_earning_types_uuid() -> anyhow::Result<()>\n{\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .earning_type()\n        .delete_companies_company_id_earning_types_uuid(\"some-string\", \"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/earning_type/struct.EarningType.html#method.delete_companies_company_id_earning_types_uuid"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1earning_types~1{earning_type_uuid}/put/x-rust",
    "value": {
      "example": "/// Update an earning type\n/// \n/// Update an earning type.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `earning_type_uuid: &'astr`: The UUID of the earning type (required)\nasync fn example_earning_type_put_companies_company_id_earning_types_uuid() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::EarningType = client\n        .earning_type()\n        .put_companies_company_id_earning_types_uuid(\n            \"some-string\",\n            \"some-string\",\n            &gusto_api::types::PutCompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody {\n                name: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/earning_type/struct.EarningType.html#method.put_companies_company_id_earning_types_uuid"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1job_applicants/get/x-rust",
    "value": {
      "example": "/// Get all job applicants for a company\n/// \n/// *This endpoint is in beta - we will be making breaking changes based on developer feedback.\n/// \n/// Returns all job applicants for a company.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_job_applicants_beta_get_companies_company_id_job_applicants() -> anyhow::Result<()>\n{\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::JobApplicant> = client\n        .job_applicants_beta()\n        .get_companies_company_id_job_applicants(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/job_applicants_beta/struct.JobApplicantsBeta.html#method.get_companies_company_id_job_applicants"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1job_applicants/post/x-rust",
    "value": {
      "example": "/// Create a job applicant\n/// \n/// *This endpoint is in beta - we will be making breaking changes based on developer feedback.\n/// \n/// Create a job applicant.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_job_applicants_beta_post_companies_company_id_job_applicants() -> anyhow::Result<()>\n{\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::JobApplicant = client\n        .job_applicants_beta()\n        .post_companies_company_id_job_applicants(\n            \"some-string\",\n            &gusto_api::types::PostCompaniesCompanyIdJobApplicantsRequestBody {\n                first_name: \"some-string\".to_string(),\n                last_name: \"some-string\".to_string(),\n                email: \"some-string\".to_string(),\n                phone: Some(\"some-string\".to_string()),\n                onboarding_person_type: Some(gusto_api::types::OnboardingPersonType::Contractor),\n                send_offer: Some(false),\n                job_title: Some(\"some-string\".to_string()),\n                date_of_birth: Some(chrono::Utc::now().date().naive_utc()),\n                start_date: Some(chrono::Utc::now().date().naive_utc()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/job_applicants_beta/struct.JobApplicantsBeta.html#method.post_companies_company_id_job_applicants"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1job_applicants~1{job_applicant_uuid}/delete/x-rust",
    "value": {
      "example": "/// Delete a job applicant\n/// \n/// *This endpoint is in beta - we will be making breaking changes based on developer feedback.\n/// \n/// Permanently remove a job applicant by uuid (only allowed when the job applicant has not been imported).\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `job_applicant_uuid: &'astr`: The UUID of the job applicant (required)\nasync fn example_job_applicants_beta_delete_companies_company_id_job_applicants_job_applicant_uuid(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .job_applicants_beta()\n        .delete_companies_company_id_job_applicants_job_applicant_uuid(\"some-string\", \"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/job_applicants_beta/struct.JobApplicantsBeta.html#method.delete_companies_company_id_job_applicants_job_applicant_uuid"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1job_applicants~1{job_applicant_uuid}/get/x-rust",
    "value": {
      "example": "/// Get a job applicant\n/// \n/// *This endpoint is in beta - we will be making breaking changes based on developer feedback.\n/// \n/// Returns a single job applicant.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `job_applicant_uuid: &'astr`: The UUID of the job applicant (required)\nasync fn example_job_applicants_beta_get_companies_company_id_job_applicants_job_applicant_uuid(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::JobApplicant = client\n        .job_applicants_beta()\n        .get_companies_company_id_job_applicants_job_applicant_uuid(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/job_applicants_beta/struct.JobApplicantsBeta.html#method.get_companies_company_id_job_applicants_job_applicant_uuid"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1job_applicants~1{job_applicant_uuid}/put/x-rust",
    "value": {
      "example": "/// Update a job applicant\n/// \n/// *This endpoint is in beta - we will be making breaking changes based on developer feedback.\n/// \n/// Update an existing job applicant (only allowed when the job applicant has not been imported).\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `job_applicant_uuid: &'astr`: The UUID of the job applicant (required)\nasync fn example_job_applicants_beta_put_companies_company_id_job_applicants_job_applicant_uuid(\n) -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::JobApplicant = client\n        .job_applicants_beta()\n        .put_companies_company_id_job_applicants_job_applicant_uuid(\n            \"some-string\",\n            \"some-string\",\n            &gusto_api::types::PutCompaniesCompanyIdJobApplicantsJobApplicantUuidRequestBody {\n                first_name: Some(\"some-string\".to_string()),\n                last_name: Some(\"some-string\".to_string()),\n                email: Some(\"some-string\".to_string()),\n                phone: Some(\"some-string\".to_string()),\n                onboarding_person_type: Some(gusto_api::types::OnboardingPersonType::Contractor),\n                send_offer: Some(false),\n                job_title: Some(\"some-string\".to_string()),\n                date_of_birth: Some(chrono::Utc::now().date().naive_utc()),\n                start_date: Some(chrono::Utc::now().date().naive_utc()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/job_applicants_beta/struct.JobApplicantsBeta.html#method.put_companies_company_id_job_applicants_job_applicant_uuid"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1pay_schedules/get/x-rust",
    "value": {
      "example": "/// Get the pay schedules for a company\n/// \n/// The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\nasync fn example_pay_schedules_get_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::PaySchedule> = client\n        .pay_schedules()\n        .get_companies_company_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/pay_schedules/struct.PaySchedules.html#method.get_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1payrolls~1{payroll_Id}~1submit/put/x-rust",
    "value": {
      "example": "/// Submit Payroll (Beta)\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Submits an unprocessed payroll to be calculated and run. Upon success, transitions the payroll to the `processed` state.\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: Company ID (required)\n/// - `payroll_id: &'astr`: Payroll ID (required)\nasync fn example_payroll_put_companies_company_id_payrolls_id_submit() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .payroll()\n        .put_companies_company_id_payrolls_id_submit(\"some-string\", \"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.put_companies_company_id_payrolls_id_submit"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1payrolls~1{payroll_id}~1calculate/put/x-rust",
    "value": {
      "example": "/// Calculate a Payroll (Beta)\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.\n/// \n/// This endpoint is asynchronous and responds with only a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with the *show_calculation=true* and *include=taxes,benefits,deductions* params\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr` (required)\n/// - `payroll_id: &'astr` (required)\nasync fn example_payroll_put_companies_company_id_payrolls_id_calculate() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .payroll()\n        .put_companies_company_id_payrolls_id_calculate(\"some-string\", \"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.put_companies_company_id_payrolls_id_calculate"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1payrolls~1{payroll_id}~1cancel/put/x-rust",
    "value": {
      "example": "/// Cancel a Payroll (Beta)\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// Transitions a `processed` payroll back to the `unprocessed` state. A payroll cannot be canceled once it has entered the `funded` state.\n/// \n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: Company ID (required)\n/// - `payroll_id: &'astr`: Payroll ID (required)\nasync fn example_payroll_put_api_companies_company_id_payrolls_id_cancel() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Payroll = client\n        .payroll()\n        .put_api_companies_company_id_payrolls_id_cancel(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/payroll/struct.Payroll.html#method.put_api_companies_company_id_payrolls_id_cancel"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1time_off_requests/get/x-rust",
    "value": {
      "example": "/// Get time off requests for a company\n/// \n/// Get all time off requests, past and present, for a company.\n/// \n/// In order to reduce the number of time off requests returned in a single response, or to retrieve time off requests from a time period of interest, you may use the `start_date` and `end_date` parameters.\n/// \n/// You may provide both or either parameters to scope the returned data. For example:\n/// \n/// `?start_date='2019-01-01'`\n/// \n/// Returns all time off requests where the request start date is equal to or after January 1, 2019.\n/// \n/// `?end_date='2019-01-01'`\n/// \n/// Returns all time off requests where the request end date is equal to or before January 1, 2019.\n/// \n/// `?start_date='2019-05-01'&end_date='2019-08-31'`\n/// \n/// Returns all time off requests where the request start date is equal to or after May 1, 2019 and the request end date is equal to or before August 31, 2019.\n/// \n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `end_date: Option<chrono::NaiveDate>`: Filter time off requests where the request end date is equal to or after this parameter\n/// - `start_date: Option<chrono::NaiveDate>`: Filter time off requests where the request start date is equal to or after this parameter\nasync fn example_time_off_requests_get_companies_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::TimeOffRequest> = client\n        .time_off_requests()\n        .get_companies_company_id(\n            \"some-string\",\n            Some(chrono::Utc::now().date().naive_utc()),\n            Some(chrono::Utc::now().date().naive_utc()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/time_off_requests/struct.TimeOffRequests.html#method.get_companies_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1companies~1{company_id}~1time_off_requests~1{time_off_request_id}/get/x-rust",
    "value": {
      "example": "/// Get a specific time off request\n/// \n/// Details of a single time off request\n/// \n/// **Parameters:**\n/// \n/// - `company_id: &'astr`: The ID of the company (required)\n/// - `time_off_request_id: &'astr`: The ID of the time off request (required)\nasync fn example_time_off_requests_get_companies_company_id_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::TimeOffRequest = client\n        .time_off_requests()\n        .get_companies_company_id_id(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/time_off_requests/struct.TimeOffRequests.html#method.get_companies_company_id_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1company_benefits~1{company_benefit_id}/get/x-rust",
    "value": {
      "example": "/// Get a company benefit\n/// \n/// Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.\n/// \n/// Note that company benefits can be deactivated only when no employees are enrolled.\n/// \n/// **Parameters:**\n/// \n/// - `company_benefit_id: &'astr`: The ID of the company benefit (required)\nasync fn example_benefits_get_company_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::CompanyBenefit = client\n        .benefits()\n        .get_company_company_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.get_company_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1company_benefits~1{company_benefit_id}/put/x-rust",
    "value": {
      "example": "/// Update a company benefit\n/// \n/// Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.\n/// \n/// Note that company benefits can be deactivated only when no employees are enrolled.\n/// \n/// **Parameters:**\n/// \n/// - `company_benefit_id: &'astr`: The ID of the company benefit (required)\nasync fn example_benefits_put_company_company_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::CompanyBenefit = client\n        .benefits()\n        .put_company_company_id(\n            \"some-string\",\n            &gusto_api::types::PutCompanyBenefitsCompanyBenefitIdRequestBody {\n                version: \"some-string\".to_string(),\n                active: Some(false),\n                description: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.put_company_company_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1compensations~1{compensation_id}/get/x-rust",
    "value": {
      "example": "/// Get a compensation\n/// \n/// Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.\n/// \n/// Note: Currently, jobs are arbitrarily limited to a single compensation as multiple compensations per job are not yet available in Gusto. The API is architected as if multiple compensations may exist, so integrations should integrate under the same assumption. The only exception is that creating a compensation with the same `job_id` as another will fail with a relevant error.\n/// \n/// \n/// **Parameters:**\n/// \n/// - `compensation_id: &'astr`: The ID of the compensation (required)\nasync fn example_compensations_get_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Compensation = client.compensations().get_id(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/compensations/struct.Compensations.html#method.get_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1compensations~1{compensation_id}/put/x-rust",
    "value": {
      "example": "/// Update a compensation\n/// \n/// Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.\n/// \n/// Note: Currently, jobs are arbitrarily limited to a single compensation as multiple compensations per job are not yet available in Gusto. The API is architected as if multiple compensations may exist, so integrations should integrate under the same assumption. The only exception is that creating a compensation with the same `job_id` as another will fail with a relevant error\n/// \n/// **Parameters:**\n/// \n/// - `compensation_id: &'astr`: The ID of the compensation (required)\nasync fn example_compensations_put_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Compensation = client\n        .compensations()\n        .put_id(\n            \"some-string\",\n            &gusto_api::types::PutCompensationsCompensationIdRequestBody {\n                version: \"some-string\".to_string(),\n                rate: Some(\"some-string\".to_string()),\n                payment_unit: Some(gusto_api::types::PaymentUnit::Paycheck),\n                flsa_status: Some(gusto_api::types::FlsaStatus::Owner),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/compensations/struct.Compensations.html#method.put_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1contractors~1{contractor_id_or_uuid}/get/x-rust",
    "value": {
      "example": "/// Get a contractor\n/// \n/// Get a contractor.\n/// \n/// **Parameters:**\n/// \n/// - `contractor_id_or_uuid: &'astr`: The ID or UUID of the contractor (required)\nasync fn example_contractors_get_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Contractor = client.contractors().get_id(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/contractors/struct.Contractors.html#method.get_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1contractors~1{contractor_id_or_uuid}/put/x-rust",
    "value": {
      "example": "/// Update a contractor\n/// \n/// Update a contractor.\n/// \n/// **Parameters:**\n/// \n/// - `contractor_id_or_uuid: &'astr`: The ID or UUID of the contractor (required)\nasync fn example_contractors_put_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Contractor = client\n        .contractors()\n        .put_id(\n            \"some-string\",\n            &gusto_api::types::PutContractorsContractorIdRequestBody {\n                version: Some(\"some-string\".to_string()),\n                start_date: Some(chrono::Utc::now().date().naive_utc()),\n                first_name: Some(\"some-string\".to_string()),\n                last_name: Some(\"some-string\".to_string()),\n                middle_initial: Some(\"some-string\".to_string()),\n                wage_type: Some(\n                    gusto_api::types::PutContractorsContractorIdRequestBodyWageType::Hourly,\n                ),\n                hourly_rate: Some(\"some-string\".to_string()),\n                business_name: Some(\"some-string\".to_string()),\n                ein: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/contractors/struct.Contractors.html#method.put_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employee_benefits~1{employee_benefit_id}/delete/x-rust",
    "value": {
      "example": "/// Delete an employee benefit\n/// \n/// Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.\n/// \n/// **Parameters:**\n/// \n/// - `employee_benefit_id: &'astr`: The ID of the employee benefit (required)\nasync fn example_benefits_delete_employee_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .benefits()\n        .delete_employee_employee_id(\"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.delete_employee_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employee_benefits~1{employee_benefit_id}/get/x-rust",
    "value": {
      "example": "/// Get an employee benefit\n/// \n/// Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.\n/// \n/// **Parameters:**\n/// \n/// - `employee_benefit_id: &'astr`: The ID of the employee benefit (required)\nasync fn example_benefits_get_employee_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::EmployeeBenefit = client\n        .benefits()\n        .get_employee_employee_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.get_employee_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employee_benefits~1{employee_benefit_id}/put/x-rust",
    "value": {
      "example": "/// Update an employee benefit\n/// \n/// Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.\n/// \n/// **Parameters:**\n/// \n/// - `employee_benefit_id: &'astr`: The ID of the employee benefit (required)\nasync fn example_benefits_put_employee_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::EmployeeBenefit = client\n        .benefits()\n        .put_employee_employee_id(\n            \"some-string\",\n            &gusto_api::types::PutEmployeeBenefitsEmployeeBenefitIdRequestBody {\n                version: \"some-string\".to_string(),\n                active: Some(false),\n                employee_deduction: Some(\"some-string\".to_string()),\n                company_contribution: Some(\"some-string\".to_string()),\n                employee_deduction_annual_maximum: Some(\"some-string\".to_string()),\n                company_contribution_annual_maximum: Some(\"some-string\".to_string()),\n                limit_option: Some(\"some-string\".to_string()),\n                deduct_as_percentage: Some(false),\n                contribute_as_percentage: Some(false),\n                catch_up: Some(false),\n                coverage_amount: Some(\"some-string\".to_string()),\n                deduction_reduces_taxable_income: Some(\n                    gusto_api::types::DeductionReducesTaxableIncome::DoesNotReduceTaxableIncome,\n                ),\n                coverage_salary_multiplier: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.put_employee_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id_or_uuid}/get/x-rust",
    "value": {
      "example": "/// Get an employee\n/// \n/// Get an employee.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id_or_uuid: &'astr`: The ID or UUID of the employee (required)\n/// - `include: Option<Vec<crate::types::GetInclude>>`: Include the requested attribute(s) in each employee response\nasync fn example_employees_get() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Employee = client\n        .employees()\n        .get(\n            \"some-string\",\n            Some(vec![gusto_api::types::GetInclude::CustomFields]),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/employees/struct.Employees.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id_or_uuid}/put/x-rust",
    "value": {
      "example": "/// Update an employee\n/// \n/// Update an employee.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id_or_uuid: &'astr`: The ID or UUID of the employee (required)\nasync fn example_employees_put() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Employee = client\n        .employees()\n        .put(\n            \"some-string\",\n            &gusto_api::types::PutEmployeesRequestBody {\n                version: \"some-string\".to_string(),\n                first_name: Some(\"some-string\".to_string()),\n                middle_initial: Some(\"some-string\".to_string()),\n                last_name: Some(\"some-string\".to_string()),\n                date_of_birth: Some(chrono::Utc::now().date().naive_utc()),\n                email: Some(\"some-string\".to_string()),\n                ssn: Some(\"some-string\".to_string()),\n                two_percent_shareholder: Some(false),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/employees/struct.Employees.html#method.put"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1custom_fields/get/x-rust",
    "value": {
      "example": "/// Get an employee's custom fields\n/// \n/// Returns a list of the employee's custom fields.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee (required)\nasync fn example_custom_fields_get_employees_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::GetEmployeesEmployeeIdCustomFieldsResponse = client\n        .custom_fields()\n        .get_employees_employee_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/custom_fields/struct.CustomFields.html#method.get_employees_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1employee_benefits/get/x-rust",
    "value": {
      "example": "/// Get an employee's benefits\n/// \n/// Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.\n/// \n/// Returns an array of all employee benefits for this employee\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee (required)\nasync fn example_benefits_get_employees_employee_id_employee() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::EmployeeBenefit> = client\n        .benefits()\n        .get_employees_employee_id_employee(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.get_employees_employee_id_employee"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1employee_benefits/post/x-rust",
    "value": {
      "example": "/// Create an employee benefit\n/// \n/// Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee (required)\nasync fn example_benefits_post_employees_employee_id_employee() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result : gusto_api::types::EmployeeBenefit = client . benefits () . post_employees_employee_id_employee (\"some-string\" , & gusto_api::types::PostEmployeesEmployeeIdEmployeeBenefitsRequestBody { company_benefit_id : 3.14 as f64 , active : Some (false) , employee_deduction : Some (\"some-string\" . to_string ()) , company_contribution : Some (\"some-string\" . to_string ()) , employee_deduction_annual_maximum : Some (\"some-string\" . to_string ()) , company_contribution_annual_maximum : Some (\"some-string\" . to_string ()) , limit_option : Some (\"some-string\" . to_string ()) , deduct_as_percentage : Some (false) , contribute_as_percentage : Some (false) , catch_up : Some (false) , coverage_amount : Some (\"some-string\" . to_string ()) , deduction_reduces_taxable_income : Some (gusto_api::types::PostEmployeesEmployeeIdEmployeeBenefitsRequestBodyDeductionReducesTaxableIncome :: DoesNotReduceTaxableIncome) , coverage_salary_multiplier : Some (\"some-string\" . to_string ()) }) . await ? ;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.post_employees_employee_id_employee"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1garnishments/get/x-rust",
    "value": {
      "example": "/// Get garnishments for an employee\n/// \n/// Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee to which the garnishment belongs (required)\nasync fn example_garnishments_get_employees_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Garnishment> = client\n        .garnishments()\n        .get_employees_employee_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/garnishments/struct.Garnishments.html#method.get_employees_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1garnishments/post/x-rust",
    "value": {
      "example": "/// Create a garnishment\n/// \n/// Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee to which the garnishment belongs (required)\nasync fn example_garnishments_post_employees_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Garnishment = client\n        .garnishments()\n        .post_employees_employee_id(\n            \"some-string\",\n            &gusto_api::types::PostEmployeesEmployeeIdGarnishmentsRequestBody {\n                active: Some(false),\n                amount: \"some-string\".to_string(),\n                description: \"some-string\".to_string(),\n                court_ordered: false,\n                times: Some(4 as i64),\n                recurring: Some(false),\n                annual_maximum: Some(\"some-string\".to_string()),\n                pay_period_maximum: Some(\"some-string\".to_string()),\n                deduct_as_percentage: Some(false),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/garnishments/struct.Garnishments.html#method.post_employees_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1home_address/get/x-rust",
    "value": {
      "example": "/// Get an employee's home address\n/// \n/// The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee (required)\nasync fn example_employees_get_id_home_address() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Location = client\n        .employees()\n        .get_id_home_address(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/employees/struct.Employees.html#method.get_id_home_address"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1home_address/put/x-rust",
    "value": {
      "example": "/// Update an employee's home address\n/// \n/// The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee (required)\nasync fn example_employees_put_id_home_address() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Location = client\n        .employees()\n        .put_id_home_address(\n            \"some-string\",\n            &gusto_api::types::PutEmployeesEmployeeIdHomeAddressRequestBody {\n                version: \"some-string\".to_string(),\n                street_1: Some(\"some-string\".to_string()),\n                street_2: Some(\"some-string\".to_string()),\n                city: Some(\"some-string\".to_string()),\n                state: Some(\"some-string\".to_string()),\n                zip: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/employees/struct.Employees.html#method.put_id_home_address"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1jobs/get/x-rust",
    "value": {
      "example": "/// Get jobs for an employee\n/// \n/// Get all of the jobs that an employee holds.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The employee ID (required)\nasync fn example_jobs_get_employees_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Job> = client\n        .jobs()\n        .get_employees_employee_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/jobs/struct.Jobs.html#method.get_employees_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1jobs/post/x-rust",
    "value": {
      "example": "/// Create a job\n/// \n/// Create a job.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The employee ID (required)\nasync fn example_jobs_post_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Job = client\n        .jobs()\n        .post_id(\n            \"some-string\",\n            &gusto_api::types::PostJobsJobIdRequestBody {\n                title: Some(\"some-string\".to_string()),\n                location_id: Some(3.14 as f64),\n                hire_date: Some(chrono::Utc::now().date().naive_utc()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/jobs/struct.Jobs.html#method.post_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1terminations/get/x-rust",
    "value": {
      "example": "/// Get terminations for an employee\n/// \n/// Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.\n/// \n/// Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee (required)\nasync fn example_terminations_get_employees_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Termination> = client\n        .terminations()\n        .get_employees_employee_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/terminations/struct.Terminations.html#method.get_employees_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1terminations/post/x-rust",
    "value": {
      "example": "/// Create an employee termination\n/// \n/// Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.\n/// \n/// Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee (required)\nasync fn example_terminations_post_employees_employee_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Termination = client\n        .terminations()\n        .post_employees_employee_id(\n            \"some-string\",\n            &gusto_api::types::PostEmployeesEmployeeIdTerminationsRequestBody {\n                effective_date: Some(chrono::Utc::now().date().naive_utc()),\n                run_termination_payroll: Some(false),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/terminations/struct.Terminations.html#method.post_employees_employee_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1employees~1{employee_id}~1ytd_benefit_amounts_from_different_company/post/x-rust",
    "value": {
      "example": "/// Year-to-date Benefit Amounts from Different Company\n/// \n/// Year-to-date benefit amounts from a different company represents the amount of money added to an employees plan during a current year, made outside of the current contribution when they were employed at a different company.\n/// \n/// **Parameters:**\n/// \n/// - `employee_id: &'astr`: The ID of the employee (required)\nasync fn example_benefits_post_employee_ytd_amounts_from_different_company() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client\n        .benefits()\n        .post_employee_ytd_amounts_from_different_company(\n            \"some-string\",\n            &gusto_api::types::PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequestBody {\n                benefit_id: 3.14 as f64,\n                tax_year: 3.14 as f64,\n                ytd_employee_deduction_amount: \"some-string\".to_string(),\n                ytd_company_contribution_amount: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/benefits/struct.Benefits.html#method.post_employee_ytd_amounts_from_different_company"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1garnishments~1{garnishment_id}/get/x-rust",
    "value": {
      "example": "/// Get a garnishment\n/// \n/// Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.\n/// \n/// **Parameters:**\n/// \n/// - `garnishment_id: &'astr`: The ID of the garnishment (required)\nasync fn example_garnishments_get_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Garnishment = client.garnishments().get_id(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/garnishments/struct.Garnishments.html#method.get_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1garnishments~1{garnishment_id}/put/x-rust",
    "value": {
      "example": "/// Update a garnishment\n/// \n/// Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.\n/// \n/// **Parameters:**\n/// \n/// - `garnishment_id: &'astr`: The ID of the garnishment (required)\nasync fn example_garnishments_put_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Garnishment = client\n        .garnishments()\n        .put_id(\n            \"some-string\",\n            &gusto_api::types::PutGarnishmentsGarnishmentIdRequestBody {\n                active: Some(false),\n                amount: Some(\"some-string\".to_string()),\n                description: Some(\"some-string\".to_string()),\n                court_ordered: Some(false),\n                times: Some(4 as i64),\n                recurring: Some(false),\n                annual_maximum: Some(\"some-string\".to_string()),\n                pay_period_maximum: Some(\"some-string\".to_string()),\n                deduct_as_percentage: Some(false),\n                version: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/garnishments/struct.Garnishments.html#method.put_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1jobs~1{job_id}/delete/x-rust",
    "value": {
      "example": "/// Delete an individual job\n/// \n/// Deletes a specific job that an employee holds.\n/// \n/// **Parameters:**\n/// \n/// - `job_id: &'astr`: The job ID (required)\nasync fn example_jobs_delete_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    client.jobs().delete_id(\"some-string\").await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/jobs/struct.Jobs.html#method.delete_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1jobs~1{job_id}/get/x-rust",
    "value": {
      "example": "/// Get a job\n/// \n/// Get a job.\n/// \n/// **Parameters:**\n/// \n/// - `job_id: &'astr`: The job ID (required)\nasync fn example_jobs_get_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Job = client.jobs().get_id(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/jobs/struct.Jobs.html#method.get_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1jobs~1{job_id}/put/x-rust",
    "value": {
      "example": "/// Update a job\n/// \n/// Update a job.\n/// \n/// **Parameters:**\n/// \n/// - `job_id: &'astr`: The job ID (required)\nasync fn example_jobs_put_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Job = client\n        .jobs()\n        .put_id(\n            \"some-string\",\n            &gusto_api::types::PutJobsJobIdRequestBody {\n                version: \"some-string\".to_string(),\n                title: Some(\"some-string\".to_string()),\n                location_id: Some(3.14 as f64),\n                hire_date: Some(chrono::Utc::now().date().naive_utc()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/jobs/struct.Jobs.html#method.put_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1jobs~1{job_id}~1compensations/get/x-rust",
    "value": {
      "example": "/// Get compensations for a job\n/// \n/// Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.\n/// \n/// Note: Currently, jobs are arbitrarily limited to a single compensation as multiple compensations per job are not yet available in Gusto. The API is architected as if multiple compensations may exist, so integrations should integrate under the same assumption. The only exception is that creating a compensation with the same `job_id` as another will fail with a relevant error.\n/// \n/// Use the `flsa_status` to determine if an employee is elibgle for overtime.\n/// \n/// **Parameters:**\n/// \n/// - `job_id: &'astr`: The ID of the job to which the compensation belongs (required)\nasync fn example_compensations_get_jobs_job_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: Vec<gusto_api::types::Compensation> = client\n        .compensations()\n        .get_jobs_job_id(\"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/compensations/struct.Compensations.html#method.get_jobs_job_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1jobs~1{job_id}~1compensations/post/x-rust",
    "value": {
      "example": "/// Create a compensation\n/// \n/// Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.\n/// \n/// Note: Currently, jobs are arbitrarily limited to a single compensation as multiple compensations per job are not yet available in Gusto. The API is architected as if multiple compensations may exist, so integrations should integrate under the same assumption. The only exception is that creating a compensation with the same `job_id` as another will fail with a relevant error\n/// \n/// **Parameters:**\n/// \n/// - `job_id: &'astr`: The ID of the job to which the compensation belongs (required)\nasync fn example_jobs_post_id_compensations() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Compensation = client\n        .jobs()\n        .post_id_compensations(\n            \"some-string\",\n            &gusto_api::types::PostJobsJobIdCompensationsRequestBody {\n                rate: \"some-string\".to_string(),\n                payment_unit: gusto_api::types::PaymentUnit::Paycheck,\n                flsa_status: gusto_api::types::FlsaStatus::Owner,\n                effective_date: Some(chrono::Utc::now().date().naive_utc()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/jobs/struct.Jobs.html#method.post_id_compensations"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1locations~1{location_id}/get/x-rust",
    "value": {
      "example": "/// Get a location\n/// \n/// Get a location.\n/// \n/// **Parameters:**\n/// \n/// - `location_id: &'astr`: The ID of the location (required)\nasync fn example_locations_get_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Location = client.locations().get_id(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/locations/struct.Locations.html#method.get_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1locations~1{location_id}/put/x-rust",
    "value": {
      "example": "/// Update a location\n/// \n/// Update a location.\n/// \n/// **Parameters:**\n/// \n/// - `location_id: &'astr`: The ID of the location (required)\nasync fn example_locations_put_id() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::Location = client\n        .locations()\n        .put_id(\n            \"some-string\",\n            &gusto_api::types::PutLocationsLocationIdRequestBody {\n                phone_number: Some(\"some-string\".to_string()),\n                street_1: Some(\"some-string\".to_string()),\n                street_2: Some(\"some-string\".to_string()),\n                city: Some(\"some-string\".to_string()),\n                state: Some(\"some-string\".to_string()),\n                zip: Some(\"some-string\".to_string()),\n                country: Some(\"some-string\".to_string()),\n                mailing_address: Some(false),\n                filing_address: Some(false),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/locations/struct.Locations.html#method.put_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1me/get/x-rust",
    "value": {
      "example": "/// Get the current user\n/// \n/// Returns information pertaining to the user associated with the provided access token.\nasync fn example_current_user_get_me() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::CurrentUser = client.current_user().get_me().await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/current_user/struct.CurrentUser.html#method.get_me"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1partner_managed_companies/post/x-rust",
    "value": {
      "example": "/// Create a partner managed company (Beta)\n/// \n/// This endpoint is in beta and intended for **[Gusto Embedded Payroll](https://gusto.com/embedded-payroll)** customers. Please [apply for early access](https://gusto-embedded-payroll.typeform.com/to/iomAQIj3?utm_source=docs) if you’d like to learn more and use it for production. Note, this endpoint will require you to enter a different agreement with Gusto.\n/// \n/// ### Overview\n/// \n/// The partner managed company API provides a way to create a Gusto company that you can manage. This endpoint behaves similarly to [creating a company](../~1v1~1provision/post) in that it does the following:\n/// \n/// * Creates a new company in Gusto.\n/// * Creates a new user in Gusto.\n/// * Makes the new user the primary payroll administrator of the new company.\n/// * Sends a welcome email to the new user.\n/// \n/// Additionally, on successful creation of the company, this API will do the following:\n/// * Creates a link between the partner and the company.\n/// * Creates access tokens and refresh tokens that can be used immediately.\n/// \n/// In the response, you will receive the access token, the refresh token, and the uuid of the created company.\n/// \n/// ### Authentication\n/// \n/// Due to the nature of this endpoint, Gusto will provide partners with an API token and will permit partners to use API Token Authentication instead of OAuth to provision Gusto accounts. The API token is included in the authorization HTTP header with the Token scheme, e.g.:\n/// \n/// ```ignore\n/// Content-Type: application/json\n/// Authorization: Token bbb286ff1a4fe6b84742b0d49b8d0d65bd0208d27d3d50333591df71\n/// ```ignore\nasync fn example_companies_post_partner_managed() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::PostPartnerManagedCompaniesResponse = client\n        .companies()\n        .post_partner_managed(&gusto_api::types::PostPartnerManagedCompaniesRequestBody {\n            user: gusto_api::types::User {\n                first_name: \"some-string\".to_string(),\n                last_name: \"some-string\".to_string(),\n                email: \"some-string\".to_string(),\n                phone: Some(\"some-string\".to_string()),\n            },\n            company: gusto_api::types::PostPartnerManagedCompaniesRequestBodyCompany {\n                name: \"some-string\".to_string(),\n                trade_name: Some(\"some-string\".to_string()),\n                ein: Some(\"some-string\".to_string()),\n            },\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/companies/struct.Companies.html#method.post_partner_managed"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1v1~1provision/post/x-rust",
    "value": {
      "example": "/// Create a company\n/// \n/// ### Overview\n/// \n/// The company provisioning API provides a way to create a Gusto company as part of your integration. When you successfully call the API, the API does the following:\n/// \n/// * Creates a new company in Gusto.\n/// * Creates a new user in Gusto.\n/// * Makes the new user the primary payroll administrator of the new company.\n/// * Sends a welcome email to the new user.\n/// \n/// In the response, you will receive an account claim URL. Redirect the user to this URL to complete their account setup inside of Gusto\n/// \n/// ### Authentication\n/// \n/// Due to the nature of this endpoint, Gusto will provide partners with an API token and will permit partners to use API Token Authentication instead of OAuth to provision Gusto accounts. The API token is included in the authorization HTTP header with the Token scheme, e.g.:\n/// \n/// ```ignore\n/// Content-Type: application/json\n/// Authorization: Token bbb286ff1a4fe6b84742b0d49b8d0d65bd0208d27d3d50333591df71\n/// ```ignore\nasync fn example_companies_post_provision() -> anyhow::Result<()> {\n    let client =\n        gusto_api::Client::new_from_env(String::from(\"token\"), String::from(\"refresh-token\"));\n    let result: gusto_api::types::PostProvisionResponse = client\n        .companies()\n        .post_provision(&gusto_api::types::PostProvisionRequestBody {\n            user: gusto_api::types::User {\n                first_name: \"some-string\".to_string(),\n                last_name: \"some-string\".to_string(),\n                email: \"some-string\".to_string(),\n                phone: Some(\"some-string\".to_string()),\n            },\n            company: gusto_api::types::PostProvisionRequestBodyCompany {\n                name: \"some-string\".to_string(),\n                trade_name: Some(\"some-string\".to_string()),\n                ein: Some(\"some-string\".to_string()),\n                states: Some(vec![\"some-string\".to_string()]),\n                number_employees: Some(3.14 as f64),\n                addresses: Some(vec![gusto_api::types::Addresses {\n                    street_1: Some(\"some-string\".to_string()),\n                    street_2: Some(\"some-string\".to_string()),\n                    city: Some(\"some-string\".to_string()),\n                    zip: Some(\"some-string\".to_string()),\n                    state: Some(\"some-string\".to_string()),\n                    phone: Some(\"some-string\".to_string()),\n                    is_primary: Some(\"some-string\".to_string()),\n                }]),\n            },\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/gusto-api/latest/gusto-api/companies/struct.Companies.html#method.post_provision"
    }
  }
]