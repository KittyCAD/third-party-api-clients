[
  {
    "op": "add",
    "path": "/info/x-rust",
    "value": {
      "client": "// Authenticate via an API token.\nlet client = rippling-api::Client::new(\"$TOKEN\");\n\n// - OR -\n\n// Authenticate with your token and host parsed from the environment variables:\n// `RIPPLING_API_TOKEN`.\nlet client = rippling_api::Client::new_from_env();",
      "install": "[dependencies]\nrippling-api = \"0.1.5\""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1candidate-applications/get/x-rust",
    "value": {
      "example": "/// List candidate applications\n/// \n/// A List of candidate applications\n/// - Requires: `API Tier 2`\n/// - Expandable fields: `job`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_candidate_applications_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListCandidateApplicationsResponse = client\n        .candidate_applications()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_candidate_applications_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut candidate_applications = client.candidate_applications();\n    let mut stream = candidate_applications.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/candidate_applications/struct.CandidateApplications.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1candidates/get/x-rust",
    "value": {
      "example": "/// List candidates\n/// \n/// A List of candidates\n/// - Requires: `API Tier 2`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_candidates_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListCandidatesResponse = client\n        .candidates()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_candidates_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut candidates = client.candidates();\n    let mut stream = candidates.list_stream(Some(\"some-string\".to_string()));\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/candidates/struct.Candidates.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1companies/get/x-rust",
    "value": {
      "example": "/// List companies\n/// \n/// A List of companies\n/// - Requires: `API Tier 1`\n/// - Expandable fields: - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_companies_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListCompaniesResponse = client\n        .companies()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_companies_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut companies = client.companies();\n    let mut stream = companies.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/companies/struct.Companies.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1compensations/get/x-rust",
    "value": {
      "example": "/// List compensations\n/// \n/// A List of compensations\n/// - Requires: `API Tier 2`\n/// - Expandable fields: `worker`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_compensations_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListCompensationsResponse = client\n        .compensations()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_compensations_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut compensations = client.compensations();\n    let mut stream = compensations.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/compensations/struct.Compensations.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1compensations~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific compensation\n/// \n/// Retrieves the Compensation for the Worker with the ID provided in the URL path.\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_compensations_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetCompensationsResponse = client\n        .compensations()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/compensations/struct.Compensations.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-fields/get/x-rust",
    "value": {
      "example": "/// List custom fields\n/// \n/// A List of custom fields\n/// - Requires: `API Tier 1`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_custom_fields_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListCustomFieldsResponse = client\n        .custom_fields()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_custom_fields_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut custom_fields = client.custom_fields();\n    let mut stream = custom_fields.list_stream(Some(\"some-string\".to_string()));\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_fields/struct.CustomFields.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects/get/x-rust",
    "value": {
      "example": "/// List custom objects\n/// \n/// A List of custom objects\n/// - Requires: `API Tier 1`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\nasync fn example_custom_objects_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListCustomObjectsResponse = client\n        .custom_objects()\n        .list(Some(\"some-string\".to_string()))\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_custom_objects_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut custom_objects = client.custom_objects();\n    let mut stream = custom_objects.list_stream();\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_objects/struct.CustomObjects.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects/post/x-rust",
    "value": {
      "example": "/// Create a new custom object\n/// \n/// Create a new custom object\nasync fn example_custom_objects_create() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::CustomObject = client\n        .custom_objects()\n        .create(&rippling_api::types::CreateCustomObjectsRequestBody {\n            name: Some(\"some-string\".to_string()),\n            description: Some(\"some-string\".to_string()),\n            category: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_objects/struct.CustomObjects.html#method.create"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}/delete/x-rust",
    "value": {
      "example": "/// Delete a custom object\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_objects_delete() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client.custom_objects().delete(\"some-string\").await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_objects/struct.CustomObjects.html#method.delete"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific custom object\n/// \n/// Retrieve a specific custom object\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_objects_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::CustomObject = client.custom_objects().get(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_objects/struct.CustomObjects.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}/patch/x-rust",
    "value": {
      "example": "/// Update a custom object\n/// \n/// Updated a specific custom object\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_objects_update() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::CustomObject = client\n        .custom_objects()\n        .update(\n            \"some-string\",\n            &rippling_api::types::UpdateCustomObjectsRequestBody {\n                name: Some(\"some-string\".to_string()),\n                description: Some(\"some-string\".to_string()),\n                category: Some(\"some-string\".to_string()),\n                plural_label: Some(\"some-string\".to_string()),\n                owner_role: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_objects/struct.CustomObjects.html#method.update"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1fields/get/x-rust",
    "value": {
      "example": "/// List custom object fields\n/// \n/// A List of custom object fields\n/// - Requires: `API Tier 1`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_fields_list_custom_objects_custom_object_api_name_fields(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListCustomObjectsCustomObjectApiNameFieldsResponse = client\n        .custom_object_fields()\n        .list_custom_objects_custom_object_api_name_fields(\n            Some(\"some-string\".to_string()),\n            \"some-string\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_custom_object_fields_list_custom_objects_custom_object_api_name_fields_stream(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut custom_object_fields = client.custom_object_fields();\n    let mut stream = custom_object_fields\n        .list_custom_objects_custom_object_api_name_fields_stream(\"some-string\");\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_fields/struct.CustomObjectFields.html#method.list_custom_objects_custom_object_api_name_fields"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1fields/post/x-rust",
    "value": {
      "example": "/// Create a new custom object field\n/// \n/// Create a new custom object field\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_fields_create_custom_objects_custom_object_api_name_fields(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::CustomObjectField = client\n        .custom_object_fields()\n        .create_custom_objects_custom_object_api_name_fields(\n            \"some-string\",\n            &rippling_api::types::CreateCustomObjectsCustomObjectApiNameFieldsRequestBody {\n                name: Some(\"some-string\".to_string()),\n                description: Some(\"some-string\".to_string()),\n                required: Some(false),\n                is_unique: Some(false),\n                enable_history: Some(false),\n                derived_field_formula: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_fields/struct.CustomObjectFields.html#method.create_custom_objects_custom_object_api_name_fields"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1fields~1{field_api_name}/delete/x-rust",
    "value": {
      "example": "/// Delete a custom object field\n/// \n/// Delete a custom object field\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\n/// - `field_api_name: &'astr` (required)\nasync fn example_custom_object_fields_delete_custom_objects_custom_object_api_name_fields(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client\n        .custom_object_fields()\n        .delete_custom_objects_custom_object_api_name_fields(\"some-string\", \"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_fields/struct.CustomObjectFields.html#method.delete_custom_objects_custom_object_api_name_fields"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1fields~1{field_api_name}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific custom object field\n/// \n/// Retrieve a specific custom object field\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\n/// - `field_api_name: &'astr` (required)\nasync fn example_custom_object_fields_get_custom_objects_custom_object_api_name_fields(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::CustomObjectField = client\n        .custom_object_fields()\n        .get_custom_objects_custom_object_api_name_fields(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_fields/struct.CustomObjectFields.html#method.get_custom_objects_custom_object_api_name_fields"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1fields~1{field_api_name}/patch/x-rust",
    "value": {
      "example": "/// Update a custom object field\n/// \n/// Updated a specific custom object field\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\n/// - `field_api_name: &'astr` (required)\nasync fn example_custom_object_fields_update_custom_objects_custom_object_api_name_fields(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::CustomObjectField = client\n        .custom_object_fields()\n        .update_custom_objects_custom_object_api_name_fields(\n            \"some-string\",\n            \"some-string\",\n            &rippling_api::types::UpdateCustomObjectsCustomObjectApiNameFieldsRequestBody {\n                name: Some(\"some-string\".to_string()),\n                description: Some(\"some-string\".to_string()),\n                required: Some(false),\n                is_unique: Some(false),\n                enable_history: Some(false),\n                derived_field_formula: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_fields/struct.CustomObjectFields.html#method.update_custom_objects_custom_object_api_name_fields"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records/get/x-rust",
    "value": {
      "example": "/// List custom object records\n/// \n/// A List of custom object records\n/// - Requires: `API Tier 1`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_list_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListCustomObjectsCustomObjectApiNameRecordsResponse = client\n        .custom_object_records()\n        .list_custom_objects_custom_object_api_name_records(\n            Some(\"some-string\".to_string()),\n            \"some-string\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_custom_object_records_list_custom_objects_custom_object_api_name_records_stream(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut custom_object_records = client.custom_object_records();\n    let mut stream = custom_object_records\n        .list_custom_objects_custom_object_api_name_records_stream(\"some-string\");\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.list_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records/post/x-rust",
    "value": {
      "example": "/// Create a new custom object record\n/// \n/// Create a new custom object record\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_create_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::CreateCustomObjectsCustomObjectApiNameRecordsResponse = client\n        .custom_object_records()\n        .create_custom_objects_custom_object_api_name_records(\n            \"some-string\",\n            &rippling_api::types::CreateCustomObjectsCustomObjectApiNameRecordsRequestBody {\n                name: Some(\"some-string\".to_string()),\n                field_api_name: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.create_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records~1bulk/delete/x-rust",
    "value": {
      "example": "/// bulk delete custom object records\n/// \n/// Bulk Delete custom object records\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_bulk_delete_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client\n        .custom_object_records()\n        .bulk_delete_custom_objects_custom_object_api_name_records(\n            \"some-string\",\n            &rippling_api::types::BulkDeleteCustomObjectsCustomObjectApiNameRecordsRequestBody {\n                rows_to_delete: Some(\"some-string\".to_string()),\n                all_or_nothing: Some(false),\n            },\n        )\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.bulk_delete_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records~1bulk/patch/x-rust",
    "value": {
      "example": "/// Bulk Update custom object records\n/// \n/// Bulk Updated a specific custom object records\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_bulk_update_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: Vec<rippling_api::types::BulkUpdateCustomObjectsCustomObjectApiNameRecordsResponse> =\n        client\n            .custom_object_records()\n            .bulk_update_custom_objects_custom_object_api_name_records(\n                \"some-string\",\n                &rippling_api::types::BulkUpdateCustomObjectsCustomObjectApiNameRecordsRequestBody {\n                    rows_to_update: Some(vec![rippling_api::types::RowsToUpdate {\n                        name: Some(\"some-string\".to_string()),\n                        field_api_name: Some(\"some-string\".to_string()),\n                    }]),\n                    all_or_nothing: Some(false),\n                },\n            )\n            .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.bulk_update_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records~1bulk/post/x-rust",
    "value": {
      "example": "/// Bulk Create custom object records\n/// \n/// bulk create new custom object records\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_bulk_create_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: Vec<rippling_api::types::BulkCreateCustomObjectsCustomObjectApiNameRecordsResponse> =\n        client\n            .custom_object_records()\n            .bulk_create_custom_objects_custom_object_api_name_records(\n                \"some-string\",\n                &rippling_api::types::BulkCreateCustomObjectsCustomObjectApiNameRecordsRequestBody {\n                    rows_to_write: Some(vec![rippling_api::types::RowsToWrite {\n                        name: Some(\"some-string\".to_string()),\n                        field_api_name: Some(\"some-string\".to_string()),\n                    }]),\n                    all_or_nothing: Some(false),\n                },\n            )\n            .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.bulk_create_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records~1external_id~1{external_id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific custom object record by its external_id\n/// \n/// Retrieve a specific custom object record by its external_id\n/// \n/// **Parameters:**\n/// \n/// - `custom_object_api_name: &'astr` (required)\n/// - `external_id: &'astr` (required)\nasync fn example_custom_object_records_get_custom_objects_custom_object_api_name_records_by_external_id(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetCustomObjectsCustomObjectApiNameRecordsByExternalIdResponse =\n        client\n            .custom_object_records()\n            .get_custom_objects_custom_object_api_name_records_by_external_id(\n                \"some-string\",\n                \"some-string\",\n            )\n            .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.get_custom_objects_custom_object_api_name_records_by_external_id"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records~1query/post/x-rust",
    "value": {
      "example": "/// List custom object records by query\n/// \n/// A List of custom object records filtered by querying\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_list_by_query_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListByQueryCustomObjectsCustomObjectApiNameRecordsResponse = client\n        .custom_object_records()\n        .list_by_query_custom_objects_custom_object_api_name_records(\n            Some(\"some-string\".to_string()),\n            \"some-string\",\n            &rippling_api::types::ListByQueryCustomObjectsCustomObjectApiNameRecordsRequestBody {\n                query: Some(\"some-string\".to_string()),\n                limit: Some(4 as i64),\n                cursor: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.list_by_query_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records~1{codr_id}/delete/x-rust",
    "value": {
      "example": "/// Delete a custom object record\n/// \n/// **Parameters:**\n/// \n/// - `codr_id: &'astr` (required)\n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_delete_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client\n        .custom_object_records()\n        .delete_custom_objects_custom_object_api_name_records(\"some-string\", \"some-string\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.delete_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records~1{codr_id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific custom object record\n/// \n/// Retrieve a specific custom object record\n/// \n/// **Parameters:**\n/// \n/// - `codr_id: &'astr` (required)\n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_get_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetCustomObjectsCustomObjectApiNameRecordsResponse = client\n        .custom_object_records()\n        .get_custom_objects_custom_object_api_name_records(\"some-string\", \"some-string\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.get_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1custom-objects~1{custom_object_api_name}~1records~1{codr_id}/patch/x-rust",
    "value": {
      "example": "/// Update a custom object record\n/// \n/// Updated a specific custom object record\n/// \n/// **Parameters:**\n/// \n/// - `codr_id: &'astr` (required)\n/// - `custom_object_api_name: &'astr` (required)\nasync fn example_custom_object_records_update_custom_objects_custom_object_api_name_records(\n) -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::UpdateCustomObjectsCustomObjectApiNameRecordsResponse = client\n        .custom_object_records()\n        .update_custom_objects_custom_object_api_name_records(\n            \"some-string\",\n            \"some-string\",\n            &rippling_api::types::UpdateCustomObjectsCustomObjectApiNameRecordsRequestBody {\n                name: Some(\"some-string\".to_string()),\n                field_api_name: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/custom_object_records/struct.CustomObjectRecords.html#method.update_custom_objects_custom_object_api_name_records"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1departments/get/x-rust",
    "value": {
      "example": "/// List departments\n/// \n/// A List of departments\n/// - Requires: `API Tier 1`\n/// - Expandable fields: `parent`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_departments_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListDepartmentsResponse = client\n        .departments()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_departments_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut departments = client.departments();\n    let mut stream = departments.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/departments/struct.Departments.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1departments~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific department\n/// \n/// Retrieve a specific department\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_departments_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetDepartmentsResponse = client\n        .departments()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/departments/struct.Departments.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1employment-types/get/x-rust",
    "value": {
      "example": "/// List employment types\n/// \n/// A List of employment types\n/// - Requires: `API Tier 1`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_employment_types_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListEmploymentTypesResponse = client\n        .employment_types()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_employment_types_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut employment_types = client.employment_types();\n    let mut stream = employment_types.list_stream(Some(\"some-string\".to_string()));\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/employment_types/struct.EmploymentTypes.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1employment-types~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific employment type\n/// \n/// Retrieve a specific employment type\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_employment_types_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetEmploymentTypesResponse = client\n        .employment_types()\n        .get(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/employment_types/struct.EmploymentTypes.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1entitlements/get/x-rust",
    "value": {
      "example": "/// List entitlements\n/// \n/// A List of entitlements\n/// - Requires: `API Tier 1`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\nasync fn example_entitlements_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListEntitlementsResponse = client\n        .entitlements()\n        .list(Some(\"some-string\".to_string()))\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_entitlements_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut entitlements = client.entitlements();\n    let mut stream = entitlements.list_stream();\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/entitlements/struct.Entitlements.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-codes/get/x-rust",
    "value": {
      "example": "/// List job codes\n/// \n/// A List of job codes\n/// - Requires: `API Tier 2`\n/// - Filterable fields: `job_dimension_id`, `group_id`\n/// - Expandable fields: `job_dimension`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_job_list_codes() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListJobCodesResponse = client\n        .job()\n        .list_codes(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_job_list_codes_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut job = client.job();\n    let mut stream = job.list_codes_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.list_codes"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-codes/post/x-rust",
    "value": {
      "example": "/// Create a new job code\n/// \n/// Create a new job code\nasync fn example_job_create_codes() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::JobCode = client\n        .job()\n        .create_codes(&rippling_api::types::JobCodeRequest {\n            name: \"some-string\".to_string(),\n            job_dimension_id: \"some-string\".to_string(),\n            external_id: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.create_codes"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-codes~1{id}/delete/x-rust",
    "value": {
      "example": "/// Delete a job code\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to delete (required)\nasync fn example_job_delete_codes() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client\n        .job()\n        .delete_codes(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.delete_codes"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-codes~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific job code\n/// \n/// Retrieve a specific job code\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_job_get_codes() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetJobCodesResponse = client\n        .job()\n        .get_codes(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.get_codes"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-codes~1{id}/patch/x-rust",
    "value": {
      "example": "/// Update a job code\n/// \n/// Updated a specific job code\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to patch (required)\nasync fn example_job_update_codes() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::JobCode = client\n        .job()\n        .update_codes(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            &rippling_api::types::JobCodeRequest {\n                name: \"some-string\".to_string(),\n                job_dimension_id: \"some-string\".to_string(),\n                external_id: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.update_codes"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-dimensions/get/x-rust",
    "value": {
      "example": "/// List job dimensions\n/// \n/// A List of job dimensions\n/// - Requires: `API Tier 2`\n/// - Filterable fields: `name`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_job_list_dimensions() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListJobDimensionsResponse = client\n        .job()\n        .list_dimensions(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_job_list_dimensions_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut job = client.job();\n    let mut stream = job.list_dimensions_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.list_dimensions"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-dimensions/post/x-rust",
    "value": {
      "example": "/// Create a new job dimension\n/// \n/// Create a new job dimension\nasync fn example_job_create_dimensions() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::JobDimension = client\n        .job()\n        .create_dimensions(&rippling_api::types::JobDimensionRequest {\n            name: \"some-string\".to_string(),\n            external_id: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.create_dimensions"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-dimensions~1{id}/delete/x-rust",
    "value": {
      "example": "/// Delete a job dimension\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to delete (required)\nasync fn example_job_delete_dimensions() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client\n        .job()\n        .delete_dimensions(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.delete_dimensions"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-dimensions~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific job dimension\n/// \n/// Retrieve a specific job dimension\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_job_get_dimensions() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetJobDimensionsResponse = client\n        .job()\n        .get_dimensions(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.get_dimensions"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-dimensions~1{id}/patch/x-rust",
    "value": {
      "example": "/// Update a job dimension\n/// \n/// Updated a specific job dimension\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to patch (required)\nasync fn example_job_update_dimensions() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::JobDimension = client\n        .job()\n        .update_dimensions(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            &rippling_api::types::JobDimensionRequest {\n                name: \"some-string\".to_string(),\n                external_id: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job/struct.Job.html#method.update_dimensions"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1job-requisitions/get/x-rust",
    "value": {
      "example": "/// List job requisitions\n/// \n/// A List of job requisitions\n/// - Requires: `API Tier 2`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_job_requisitions_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListJobRequisitionsResponse = client\n        .job_requisitions()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_job_requisitions_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut job_requisitions = client.job_requisitions();\n    let mut stream = job_requisitions.list_stream(Some(\"some-string\".to_string()));\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/job_requisitions/struct.JobRequisitions.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1leave-balances/get/x-rust",
    "value": {
      "example": "/// List leave balances\n/// \n/// A List of leave balances\n/// - Requires: `API Tier 2`\n/// - Filterable fields: `worker_id`, `leave_type_id`\n/// - Expandable fields: `worker`, `leave_type`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_leave_balances_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListLeaveBalancesResponse = client\n        .leave_balances()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_leave_balances_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut leave_balances = client.leave_balances();\n    let mut stream = leave_balances.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/leave_balances/struct.LeaveBalances.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1leave-balances~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific leave balance\n/// \n/// Retrieve a specific leave balance\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_leave_balances_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetLeaveBalancesResponse = client\n        .leave_balances()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/leave_balances/struct.LeaveBalances.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1leave-requests/get/x-rust",
    "value": {
      "example": "/// List leave requests\n/// \n/// A List of leave requests\n/// - Requires: `API Tier 2`\n/// - Filterable fields: `worker_id`, `requester_id`, `reviewer_id`, `status`, `leave_policy_id`, `leave_type_id`\n/// - Expandable fields: `worker`, `requester`, `leave_type`, `reviewer`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_leave_requests_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListLeaveRequestsResponse = client\n        .leave_requests()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_leave_requests_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut leave_requests = client.leave_requests();\n    let mut stream = leave_requests.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/leave_requests/struct.LeaveRequests.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1leave-requests/post/x-rust",
    "value": {
      "example": "/// Create a new leave request\n/// \n/// Create a new leave request\nasync fn example_leave_requests_create() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::LeaveRequest = client\n        .leave_requests()\n        .create(&rippling_api::types::LeaveRequestRequest {\n            worker_id: \"some-string\".to_string(),\n            requester_id: Some(\"some-string\".to_string()),\n            status: rippling_api::types::LeaveRequestRequestStatus::Canceled,\n            start_date: \"some-string\".to_string(),\n            start_time: Some(\"some-string\".to_string()),\n            end_date: \"some-string\".to_string(),\n            end_time: Some(\"some-string\".to_string()),\n            start_date_custom_hours: Some(3.14 as f64),\n            end_date_custom_hours: Some(3.14 as f64),\n            comments: Some(\"some-string\".to_string()),\n            leave_policy_id: \"some-string\".to_string(),\n            leave_type_id: Some(\"some-string\".to_string()),\n            reason_for_leave: Some(\"some-string\".to_string()),\n            reviewer_id: Some(\"some-string\".to_string()),\n            reviewed_at: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/leave_requests/struct.LeaveRequests.html#method.create"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1leave-requests~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific leave request\n/// \n/// Retrieve a specific leave request\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_leave_requests_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetLeaveRequestsResponse = client\n        .leave_requests()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/leave_requests/struct.LeaveRequests.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1leave-requests~1{id}/patch/x-rust",
    "value": {
      "example": "/// Update a leave request\n/// \n/// Updated a specific leave request\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to patch (required)\nasync fn example_leave_requests_update() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::LeaveRequest = client\n        .leave_requests()\n        .update(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            &rippling_api::types::LeaveRequestRequest {\n                worker_id: \"some-string\".to_string(),\n                requester_id: Some(\"some-string\".to_string()),\n                status: rippling_api::types::LeaveRequestRequestStatus::Canceled,\n                start_date: \"some-string\".to_string(),\n                start_time: Some(\"some-string\".to_string()),\n                end_date: \"some-string\".to_string(),\n                end_time: Some(\"some-string\".to_string()),\n                start_date_custom_hours: Some(3.14 as f64),\n                end_date_custom_hours: Some(3.14 as f64),\n                comments: Some(\"some-string\".to_string()),\n                leave_policy_id: \"some-string\".to_string(),\n                leave_type_id: Some(\"some-string\".to_string()),\n                reason_for_leave: Some(\"some-string\".to_string()),\n                reviewer_id: Some(\"some-string\".to_string()),\n                reviewed_at: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/leave_requests/struct.LeaveRequests.html#method.update"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1leave-types/get/x-rust",
    "value": {
      "example": "/// List leave types\n/// \n/// A List of leave types\n/// - Requires: `API Tier 2`\n/// - Filterable fields: `name`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_leave_types_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListLeaveTypesResponse = client\n        .leave_types()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_leave_types_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut leave_types = client.leave_types();\n    let mut stream = leave_types.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/leave_types/struct.LeaveTypes.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1leave-types~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific leave type\n/// \n/// Retrieve a specific leave type\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_leave_types_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetLeaveTypesResponse = client\n        .leave_types()\n        .get(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/leave_types/struct.LeaveTypes.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1legal-entities/get/x-rust",
    "value": {
      "example": "/// List legal entities\n/// \n/// A List of legal entities\n/// - Requires: `API Tier 2`\n/// - Expandable fields: `parent`, `company`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_legal_entities_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListLegalEntitiesResponse = client\n        .legal_entities()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_legal_entities_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut legal_entities = client.legal_entities();\n    let mut stream = legal_entities.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/legal_entities/struct.LegalEntities.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1legal-entities~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific legal entity\n/// \n/// Retrieve a specific legal entity\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_legal_entities_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetLegalEntitiesResponse = client\n        .legal_entities()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/legal_entities/struct.LegalEntities.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1levels/get/x-rust",
    "value": {
      "example": "/// List levels\n/// \n/// A List of levels\n/// - Requires: `API Tier 2`\n/// - Expandable fields: `parent`, `track`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_tracks_and_levels_list_levels() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListLevelsResponse = client\n        .tracks_and_levels()\n        .list_levels(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_tracks_and_levels_list_levels_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut tracks_and_levels = client.tracks_and_levels();\n    let mut stream = tracks_and_levels.list_levels_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/tracks_and_levels/struct.TracksAndLevels.html#method.list_levels"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1levels~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific level\n/// \n/// Retrieve a specific level\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_tracks_and_levels_get_levels() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetLevelsResponse = client\n        .tracks_and_levels()\n        .get_levels(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/tracks_and_levels/struct.TracksAndLevels.html#method.get_levels"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1object-categories/get/x-rust",
    "value": {
      "example": "/// List object categories\n/// \n/// A List of object categories\n/// - Requires: `API Tier 1`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\nasync fn example_object_categories_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListObjectCategoriesResponse = client\n        .object_categories()\n        .list(Some(\"some-string\".to_string()))\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_object_categories_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut object_categories = client.object_categories();\n    let mut stream = object_categories.list_stream();\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/object_categories/struct.ObjectCategories.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1object-categories/post/x-rust",
    "value": {
      "example": "/// Create a new object category\n/// \n/// Create a new object category\nasync fn example_object_categories_create() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ObjectCategory = client\n        .object_categories()\n        .create(&rippling_api::types::CreateObjectCategoriesRequestBody {\n            name: Some(\"some-string\".to_string()),\n            description: Some(\"some-string\".to_string()),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/object_categories/struct.ObjectCategories.html#method.create"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1object-categories~1{id}/delete/x-rust",
    "value": {
      "example": "/// Delete a object category\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr` (required)\nasync fn example_object_categories_delete() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client.object_categories().delete(\"some-string\").await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/object_categories/struct.ObjectCategories.html#method.delete"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1object-categories~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific object category\n/// \n/// Retrieve a specific object category\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr` (required)\nasync fn example_object_categories_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ObjectCategory =\n        client.object_categories().get(\"some-string\").await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/object_categories/struct.ObjectCategories.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1object-categories~1{id}/patch/x-rust",
    "value": {
      "example": "/// Update a object category\n/// \n/// Updated a specific object category\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr` (required)\nasync fn example_object_categories_update() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ObjectCategory = client\n        .object_categories()\n        .update(\n            \"some-string\",\n            &rippling_api::types::UpdateObjectCategoriesRequestBody {\n                name: Some(\"some-string\".to_string()),\n                description: Some(\"some-string\".to_string()),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/object_categories/struct.ObjectCategories.html#method.update"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1shift-inputs/get/x-rust",
    "value": {
      "example": "/// List shift inputs\n/// \n/// A List of shift inputs\n/// - Requires: `API Tier 2`\n/// - Filterable fields: `name`\n/// - Expandable fields: `creator`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_shift_inputs_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListShiftInputsResponse = client\n        .shift_inputs()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_shift_inputs_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut shift_inputs = client.shift_inputs();\n    let mut stream = shift_inputs.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/shift_inputs/struct.ShiftInputs.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1shift-inputs/post/x-rust",
    "value": {
      "example": "/// Create a new shift input\n/// \n/// Create a new shift input\nasync fn example_shift_inputs_create() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ShiftInput = client\n        .shift_inputs()\n        .create(&rippling_api::types::ShiftInputRequest {\n            creator_id: Some(\"some-string\".to_string()),\n            name: \"some-string\".to_string(),\n            prompt: \"some-string\".to_string(),\n            type_: \"some-string\".to_string(),\n            country_code: \"some-string\".to_string(),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/shift_inputs/struct.ShiftInputs.html#method.create"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1shift-inputs~1{id}/delete/x-rust",
    "value": {
      "example": "/// Delete a shift input\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to delete (required)\nasync fn example_shift_inputs_delete() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client\n        .shift_inputs()\n        .delete(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/shift_inputs/struct.ShiftInputs.html#method.delete"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1shift-inputs~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific shift input\n/// \n/// Retrieve a specific shift input\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_shift_inputs_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetShiftInputsResponse = client\n        .shift_inputs()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/shift_inputs/struct.ShiftInputs.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1shift-inputs~1{id}/patch/x-rust",
    "value": {
      "example": "/// Update a shift input\n/// \n/// Updated a specific shift input\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to patch (required)\nasync fn example_shift_inputs_update() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ShiftInput = client\n        .shift_inputs()\n        .update(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            &rippling_api::types::ShiftInputRequest {\n                creator_id: Some(\"some-string\".to_string()),\n                name: \"some-string\".to_string(),\n                prompt: \"some-string\".to_string(),\n                type_: \"some-string\".to_string(),\n                country_code: \"some-string\".to_string(),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/shift_inputs/struct.ShiftInputs.html#method.update"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1sso-me/get/x-rust",
    "value": {
      "example": "/// Retrieve my SSO information\n/// \n/// SSO information of the current user\n/// - Requires: `API Tier 1`\n/// - Expandable fields: `company`\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\nasync fn example_me_list_sso() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::Ssome = client\n        .me()\n        .list_sso(Some(\"some-string\".to_string()))\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/me/struct.Me.html#method.list_sso"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1teams/get/x-rust",
    "value": {
      "example": "/// List teams\n/// \n/// A List of teams\n/// - Requires: `API Tier 1`\n/// - Expandable fields: `parent`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_teams_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListTeamsResponse = client\n        .teams()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_teams_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut teams = client.teams();\n    let mut stream = teams.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/teams/struct.Teams.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1teams~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific team\n/// \n/// Retrieve a specific team\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_teams_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetTeamsResponse = client\n        .teams()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/teams/struct.Teams.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1time-cards/get/x-rust",
    "value": {
      "example": "/// List time cards\n/// \n/// A List of time cards\n/// - Requires: `API Tier 2`\n/// - Filterable fields: `pay_period.start_date`, `worker_id`\n/// - Expandable fields: `worker`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_time_entries_list_time_cards() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListTimeCardsResponse = client\n        .time_entries()\n        .list_time_cards(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_time_entries_list_time_cards_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut time_entries = client.time_entries();\n    let mut stream = time_entries.list_time_cards_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/time_entries/struct.TimeEntries.html#method.list_time_cards"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1time-cards~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific time card\n/// \n/// Retrieve a specific time card\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_time_entries_get_time_cards() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetTimeCardsResponse = client\n        .time_entries()\n        .get_time_cards(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/time_entries/struct.TimeEntries.html#method.get_time_cards"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1time-entries/get/x-rust",
    "value": {
      "example": "/// List time entries\n/// \n/// A List of time entries\n/// - Requires: `API Tier 2`\n/// - Filterable fields: `worker_id`, `start_time`, `pay_period.start_date`\n/// - Expandable fields: `worker`, `time_card`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_time_entries_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListTimeEntriesResponse = client\n        .time_entries()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_time_entries_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut time_entries = client.time_entries();\n    let mut stream = time_entries.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/time_entries/struct.TimeEntries.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1time-entries/post/x-rust",
    "value": {
      "example": "/// Create a new time entry\n/// \n/// Create a new time entry\nasync fn example_time_entries_create() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::TimeEntry = client\n        .time_entries()\n        .create(&rippling_api::types::TimeEntryRequest {\n            worker_id: \"some-string\".to_string(),\n            duration: Some(3.14 as f64),\n            comments: Some(vec![rippling_api::types::TimeEntryCommentRequest {\n                text: Some(\"some-string\".to_string()),\n            }]),\n            job_shifts: Some(vec![rippling_api::types::JobShiftRequest {\n                start_time: Some(\"some-string\".to_string()),\n                end_time: Some(\"some-string\".to_string()),\n                duration: Some(3.14 as f64),\n                start_date: Some(\"some-string\".to_string()),\n                original_start_time: Some(\"some-string\".to_string()),\n                original_end_time: Some(\"some-string\".to_string()),\n                job_codes_id: Some(vec![\"some-string\".to_string()]),\n                is_hours_only_input: Some(false),\n            }]),\n            breaks: Some(vec![rippling_api::types::BreakRequest {\n                start_time: Some(\"some-string\".to_string()),\n                end_time: Some(\"some-string\".to_string()),\n                break_type_id: Some(\"some-string\".to_string()),\n            }]),\n            tags: Some(vec![\"some-string\".to_string()]),\n            idempotency_key: Some(\"some-string\".to_string()),\n            create_extra_hours_run: Some(false),\n            status: Some(rippling_api::types::TimeEntryRequestStatus::Finalized),\n            pay_period: Some(rippling_api::types::PayPeriodRequest {\n                start_date: Some(\"some-string\".to_string()),\n                end_date: Some(\"some-string\".to_string()),\n                pay_schedule_id: Some(\"some-string\".to_string()),\n            }),\n            shift_input_values: Some(vec![rippling_api::types::ShiftInputValueRequest {\n                shift_input_id: \"some-string\".to_string(),\n                author_id: Some(\"some-string\".to_string()),\n            }]),\n        })\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/time_entries/struct.TimeEntries.html#method.create"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1time-entries~1{id}/delete/x-rust",
    "value": {
      "example": "/// Delete a time entry\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to delete (required)\nasync fn example_time_entries_delete() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    client\n        .time_entries()\n        .delete(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/time_entries/struct.TimeEntries.html#method.delete"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1time-entries~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific time entry\n/// \n/// Retrieve a specific time entry\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_time_entries_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetTimeEntriesResponse = client\n        .time_entries()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/time_entries/struct.TimeEntries.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1time-entries~1{id}/patch/x-rust",
    "value": {
      "example": "/// Update a time entry\n/// \n/// Updated a specific time entry\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to patch (required)\nasync fn example_time_entries_update() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::TimeEntry = client\n        .time_entries()\n        .update(\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n            &rippling_api::types::TimeEntryRequest {\n                worker_id: \"some-string\".to_string(),\n                duration: Some(3.14 as f64),\n                comments: Some(vec![rippling_api::types::TimeEntryCommentRequest {\n                    text: Some(\"some-string\".to_string()),\n                }]),\n                job_shifts: Some(vec![rippling_api::types::JobShiftRequest {\n                    start_time: Some(\"some-string\".to_string()),\n                    end_time: Some(\"some-string\".to_string()),\n                    duration: Some(3.14 as f64),\n                    start_date: Some(\"some-string\".to_string()),\n                    original_start_time: Some(\"some-string\".to_string()),\n                    original_end_time: Some(\"some-string\".to_string()),\n                    job_codes_id: Some(vec![\"some-string\".to_string()]),\n                    is_hours_only_input: Some(false),\n                }]),\n                breaks: Some(vec![rippling_api::types::BreakRequest {\n                    start_time: Some(\"some-string\".to_string()),\n                    end_time: Some(\"some-string\".to_string()),\n                    break_type_id: Some(\"some-string\".to_string()),\n                }]),\n                tags: Some(vec![\"some-string\".to_string()]),\n                idempotency_key: Some(\"some-string\".to_string()),\n                create_extra_hours_run: Some(false),\n                status: Some(rippling_api::types::TimeEntryRequestStatus::Finalized),\n                pay_period: Some(rippling_api::types::PayPeriodRequest {\n                    start_date: Some(\"some-string\".to_string()),\n                    end_date: Some(\"some-string\".to_string()),\n                    pay_schedule_id: Some(\"some-string\".to_string()),\n                }),\n                shift_input_values: Some(vec![rippling_api::types::ShiftInputValueRequest {\n                    shift_input_id: \"some-string\".to_string(),\n                    author_id: Some(\"some-string\".to_string()),\n                }]),\n            },\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/time_entries/struct.TimeEntries.html#method.update"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1tracks/get/x-rust",
    "value": {
      "example": "/// List tracks\n/// \n/// A List of tracks\n/// - Requires: `API Tier 2`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_tracks_and_levels_list_tracks() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListTracksResponse = client\n        .tracks_and_levels()\n        .list_tracks(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_tracks_and_levels_list_tracks_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut tracks_and_levels = client.tracks_and_levels();\n    let mut stream = tracks_and_levels.list_tracks_stream(Some(\"some-string\".to_string()));\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/tracks_and_levels/struct.TracksAndLevels.html#method.list_tracks"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1tracks~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific track\n/// \n/// Retrieve a specific track\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_tracks_and_levels_get_tracks() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetTracksResponse = client\n        .tracks_and_levels()\n        .get_tracks(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/tracks_and_levels/struct.TracksAndLevels.html#method.get_tracks"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users/get/x-rust",
    "value": {
      "example": "/// List users\n/// \n/// A List of users\n/// - Requires: `API Tier 1`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_users_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListUsersResponse = client\n        .users()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_users_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut users = client.users();\n    let mut stream = users.list_stream(Some(\"some-string\".to_string()));\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/users/struct.Users.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific user\n/// \n/// Retrieve a specific user\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_users_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetUsersResponse = client\n        .users()\n        .get(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/users/struct.Users.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1work-locations/get/x-rust",
    "value": {
      "example": "/// List work locations\n/// \n/// A List of work locations\n/// - Requires: `API Tier 1`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_work_locations_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListWorkLocationsResponse = client\n        .work_locations()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_work_locations_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut work_locations = client.work_locations();\n    let mut stream = work_locations.list_stream(Some(\"some-string\".to_string()));\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/work_locations/struct.WorkLocations.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1work-locations~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific work location\n/// \n/// Retrieve a specific work location\n/// \n/// **Parameters:**\n/// \n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_work_locations_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::GetWorkLocationsResponse = client\n        .work_locations()\n        .get(\"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\")\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/work_locations/struct.WorkLocations.html#method.get"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1workers/get/x-rust",
    "value": {
      "example": "/// List workers\n/// \n/// A List of workers\n/// - Requires: `API Tier 1`\n/// - Filterable fields: `status`, `work_email`\n/// - Expandable fields: `user`, `manager`, `legal_entity`, `employment_type`, `compensation`, `department`, `teams`, `level`, `custom_fields`\n/// - Sortable fields: `id`, `created_at`, `updated_at`\n/// \n/// **Parameters:**\n/// \n/// - `cursor: Option<String>`\n/// - `expand: Option<String>`\n/// - `filter: Option<String>`\n/// - `order_by: Option<String>`\nasync fn example_workers_list() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::ListWorkersResponse = client\n        .workers()\n        .list(\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n            Some(\"some-string\".to_string()),\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n\n\n/// - OR -\n\n/// Get a stream of results.\n///\n/// This allows you to paginate through all the items.\nuse futures_util::TryStreamExt;\nasync fn example_workers_list_stream() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let mut workers = client.workers();\n    let mut stream = workers.list_stream(\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n        Some(\"some-string\".to_string()),\n    );\n    loop {\n        match stream.try_next().await {\n            Ok(Some(item)) => {\n                println!(\"{:?}\", item);\n            }\n            Ok(None) => {\n                break;\n            }\n            Err(err) => {\n                return Err(err.into());\n            }\n        }\n    }\n\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/workers/struct.Workers.html#method.list"
    }
  },
  {
    "op": "add",
    "path": "/paths/~1workers~1{id}/get/x-rust",
    "value": {
      "example": "/// Retrieve a specific worker\n/// \n/// Retrieve a specific worker\n/// \n/// **Parameters:**\n/// \n/// - `expand: Option<String>`\n/// - `id: &'astr`: ID of the resource to return (required)\nasync fn example_workers_get() -> anyhow::Result<()> {\n    let client = rippling_api::Client::new_from_env();\n    let result: rippling_api::types::Worker = client\n        .workers()\n        .get(\n            Some(\"some-string\".to_string()),\n            \"d9797f8d-9ad6-4e08-90d7-2ec17e13471c\",\n        )\n        .await?;\n    println!(\"{:?}\", result);\n    Ok(())\n}\n",
      "libDocsLink": "https://docs.rs/rippling-api/latest/rippling-api/workers/struct.Workers.html#method.get"
    }
  }
]